{"version":3,"file":"588.a067c32eea6f5688.js","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/common/config/version.ts","webpack://lcn-frontend/./homeassistant-frontend/src/common/const.ts","webpack://lcn-frontend/./homeassistant-frontend/src/common/entity/compute_domain.ts","webpack://lcn-frontend/./homeassistant-frontend/src/common/entity/compute_state_domain.ts","webpack://lcn-frontend/./homeassistant-frontend/src/common/entity/device_tracker_icon.ts","webpack://lcn-frontend/./homeassistant-frontend/src/common/entity/state_icon.ts","webpack://lcn-frontend/./homeassistant-frontend/src/common/entity/update_icon.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-check-list-item.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-domain-icon.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-expansion-panel.ts","webpack://lcn-frontend/./homeassistant-frontend/src/data/custom_iconsets.ts","webpack://lcn-frontend/./homeassistant-frontend/src/data/custom_icons.ts","webpack://lcn-frontend/./homeassistant-frontend/src/common/util/promise-timeout.ts","webpack://lcn-frontend/./homeassistant-frontend/src/resources/icon-metadata.ts","webpack://lcn-frontend/./homeassistant-frontend/src/data/iconsets.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-icon.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-state-icon.ts","webpack://lcn-frontend/./homeassistant-frontend/src/data/icons.ts","webpack://lcn-frontend/./homeassistant-frontend/src/data/update.ts","webpack://lcn-frontend/./homeassistant-frontend/src/panels/config/ha-config-section.ts","webpack://lcn-frontend/./homeassistant-frontend/src/resources/home-assistant-logo-svg.ts","webpack://lcn-frontend/./src/components/lcn-filter-address.ts","webpack://lcn-frontend/./src/dialogs/show-dialog-create-entity.ts","webpack://lcn-frontend/./src/lcn-entities-page.ts"],"sourcesContent":["export const atLeastVersion = (\n  version: string,\n  major: number,\n  minor: number,\n  patch?: number\n): boolean => {\n  if (__DEMO__) {\n    return true;\n  }\n\n  const [haMajor, haMinor, haPatch] = version.split(\".\", 3);\n\n  return (\n    Number(haMajor) > major ||\n    (Number(haMajor) === major &&\n      (patch === undefined\n        ? Number(haMinor) >= minor\n        : Number(haMinor) > minor)) ||\n    (patch !== undefined &&\n      Number(haMajor) === major &&\n      Number(haMinor) === minor &&\n      Number(haPatch) >= patch)\n  );\n};\n\nexport const isDevVersion = (version: string): boolean => {\n  if (__DEMO__) {\n    return false;\n  }\n\n  return version.includes(\"dev\");\n};\n","/** Constants to be used in the frontend. */\n\n// Constants should be alphabetically sorted by name.\n// Arrays with values should be alphabetically sorted if order doesn't matter.\n// Each constant should have a description what it is supposed to be used for.\n\n/** Domains that have a state card. */\nexport const DOMAINS_WITH_CARD = [\n  \"alert\",\n  \"button\",\n  \"climate\",\n  \"cover\",\n  \"configurator\",\n  \"event\",\n  \"input_button\",\n  \"input_select\",\n  \"input_number\",\n  \"input_text\",\n  \"humidifier\",\n  \"lawn_mower\",\n  \"lock\",\n  \"media_player\",\n  \"number\",\n  \"scene\",\n  \"script\",\n  \"select\",\n  \"timer\",\n  \"text\",\n  \"update\",\n  \"vacuum\",\n  \"water_heater\",\n];\n\nexport const SENSOR_ENTITIES = [\n  \"sensor\",\n  \"binary_sensor\",\n  \"calendar\",\n  \"camera\",\n  \"device_tracker\",\n  \"image\",\n  \"weather\",\n];\n\nexport const ASSIST_ENTITIES = [\n  \"assist_satellite\",\n  \"conversation\",\n  \"stt\",\n  \"tts\",\n];\n\n/** Domains that render an input element instead of a text value when displayed in a row.\n *  Those rows should then not show a cursor pointer when hovered (which would normally\n *  be the default) unless the element itself enforces it (e.g. a button). Also those elements\n *  should not act as a click target to open the more info dialog (the row name and state icon\n *  still do of course) as the click should instead e.g. activate the input field  or toggle\n *  the button that this row shows.\n */\nexport const DOMAINS_INPUT_ROW = [\n  \"automation\",\n  \"button\",\n  \"cover\",\n  \"date\",\n  \"datetime\",\n  \"fan\",\n  \"group\",\n  \"humidifier\",\n  \"input_boolean\",\n  \"input_button\",\n  \"input_datetime\",\n  \"input_number\",\n  \"input_select\",\n  \"input_text\",\n  \"light\",\n  \"lock\",\n  \"media_player\",\n  \"number\",\n  \"scene\",\n  \"script\",\n  \"select\",\n  \"switch\",\n  \"text\",\n  \"time\",\n  \"vacuum\",\n  \"valve\",\n];\n\n/** States that we consider \"off\". */\nexport const STATES_OFF = [\"closed\", \"locked\", \"off\"];\n\n/** Binary States */\nexport const BINARY_STATE_ON = \"on\";\nexport const BINARY_STATE_OFF = \"off\";\n\n/** Domains where we allow toggle in Lovelace. */\nexport const DOMAINS_TOGGLE = new Set([\n  \"fan\",\n  \"input_boolean\",\n  \"light\",\n  \"switch\",\n  \"group\",\n  \"automation\",\n  \"humidifier\",\n  \"valve\",\n]);\n\n/** Domains that have a dynamic entity image / picture. */\nexport const DOMAINS_WITH_DYNAMIC_PICTURE = new Set([\n  \"camera\",\n  \"image\",\n  \"media_player\",\n]);\n\n/** Temperature units. */\nexport const UNIT_C = \"°C\";\nexport const UNIT_F = \"°F\";\n\n/** Entity ID of the default view. */\nexport const DEFAULT_VIEW_ENTITY_ID = \"group.default_view\";\n","export const computeDomain = (entityId: string): string =>\n  entityId.substring(0, entityId.indexOf(\".\"));\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeDomain } from \"./compute_domain\";\n\nexport const computeStateDomain = (stateObj: HassEntity) =>\n  computeDomain(stateObj.entity_id);\n","import type { HassEntity } from \"home-assistant-js-websocket\";\n\nexport const deviceTrackerIcon = (stateObj: HassEntity, state?: string) => {\n  const compareState = state ?? stateObj.state;\n  if (stateObj?.attributes.source_type === \"router\") {\n    return compareState === \"home\" ? \"mdi:lan-connect\" : \"mdi:lan-disconnect\";\n  }\n  if (\n    [\"bluetooth\", \"bluetooth_le\"].includes(stateObj?.attributes.source_type)\n  ) {\n    return compareState === \"home\" ? \"mdi:bluetooth-connect\" : \"mdi:bluetooth\";\n  }\n  return compareState === \"not_home\"\n    ? \"mdi:account-arrow-right\"\n    : \"mdi:account\";\n};\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeStateDomain } from \"./compute_state_domain\";\nimport { updateIcon } from \"./update_icon\";\nimport { deviceTrackerIcon } from \"./device_tracker_icon\";\n\nexport const stateIcon = (\n  stateObj: HassEntity,\n  state?: string\n): string | undefined => {\n  const domain = computeStateDomain(stateObj);\n  const compareState = state ?? stateObj.state;\n  switch (domain) {\n    case \"update\":\n      return updateIcon(stateObj, compareState);\n\n    case \"device_tracker\":\n      return deviceTrackerIcon(stateObj, compareState);\n\n    case \"sun\":\n      return compareState === \"above_horizon\"\n        ? \"mdi:white-balance-sunny\"\n        : \"mdi:weather-night\";\n\n    case \"input_datetime\":\n      if (!stateObj.attributes.has_date) {\n        return \"mdi:clock\";\n      }\n      if (!stateObj.attributes.has_time) {\n        return \"mdi:calendar\";\n      }\n      break;\n  }\n  return undefined;\n};\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { UpdateEntity } from \"../../data/update\";\nimport { updateIsInstalling } from \"../../data/update\";\n\nexport const updateIcon = (stateObj: HassEntity, state?: string) => {\n  const compareState = state ?? stateObj.state;\n  return compareState === \"on\"\n    ? updateIsInstalling(stateObj as UpdateEntity)\n      ? \"mdi:package-down\"\n      : \"mdi:package-up\"\n    : \"mdi:package\";\n};\n","import { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-checkbox\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  @property({ type: Boolean, attribute: \"checkbox-disabled\" })\n  checkboxDisabled = false;\n\n  @property({ type: Boolean })\n  indeterminate = false;\n\n  async onChange(event) {\n    super.onChange(event);\n    fireEvent(this, event.type);\n  }\n\n  override render() {\n    const checkboxClasses = {\n      \"mdc-deprecated-list-item__graphic\": this.left,\n      \"mdc-deprecated-list-item__meta\": !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic =\n      this.graphic && this.graphic !== \"control\" && !this.left\n        ? this.renderGraphic()\n        : nothing;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : nothing;\n    const ripple = this.renderRipple();\n\n    return html` ${ripple} ${graphic} ${this.left ? \"\" : text}\n      <span class=${classMap(checkboxClasses)}>\n        <ha-checkbox\n          reducedTouchTarget\n          tabindex=${this.tabindex}\n          .checked=${this.selected}\n          .indeterminate=${this.indeterminate}\n          ?disabled=${this.disabled || this.checkboxDisabled}\n          @change=${this.onChange}\n        >\n        </ha-checkbox>\n      </span>\n      ${this.left ? text : \"\"} ${meta}`;\n  }\n\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n\n      :host([graphic=\"avatar\"]) .mdc-deprecated-list-item__graphic,\n      :host([graphic=\"medium\"]) .mdc-deprecated-list-item__graphic,\n      :host([graphic=\"large\"]) .mdc-deprecated-list-item__graphic,\n      :host([graphic=\"control\"]) .mdc-deprecated-list-item__graphic {\n        margin-inline-end: var(--mdc-list-item-graphic-margin, 16px);\n        margin-inline-start: 0px;\n        direction: var(--direction);\n      }\n      .mdc-deprecated-list-item__meta {\n        flex-shrink: 0;\n        direction: var(--direction);\n        margin-inline-start: auto;\n        margin-inline-end: 0;\n      }\n      .mdc-deprecated-list-item__graphic {\n        margin-top: var(--check-list-item-graphic-margin-top);\n      }\n      :host([graphic=\"icon\"]) .mdc-deprecated-list-item__graphic {\n        margin-inline-start: 0;\n        margin-inline-end: var(--mdc-list-item-graphic-margin, 32px);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport {\n  DEFAULT_DOMAIN_ICON,\n  domainIcon,\n  FALLBACK_DOMAIN_ICONS,\n} from \"../data/icons\";\nimport type { HomeAssistant } from \"../types\";\nimport { brandsUrl } from \"../util/brands-url\";\nimport \"./ha-icon\";\n\n@customElement(\"ha-domain-icon\")\nexport class HaDomainIcon extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public domain?: string;\n\n  @property({ attribute: false }) public deviceClass?: string;\n\n  @property() public icon?: string;\n\n  @property({ attribute: \"brand-fallback\", type: Boolean })\n  public brandFallback?: boolean;\n\n  protected render() {\n    if (this.icon) {\n      return html`<ha-icon .icon=${this.icon}></ha-icon>`;\n    }\n\n    if (!this.domain) {\n      return nothing;\n    }\n\n    if (!this.hass) {\n      return this._renderFallback();\n    }\n\n    const icon = domainIcon(this.hass, this.domain, this.deviceClass).then(\n      (icn) => {\n        if (icn) {\n          return html`<ha-icon .icon=${icn}></ha-icon>`;\n        }\n        return this._renderFallback();\n      }\n    );\n\n    return html`${until(icon)}`;\n  }\n\n  private _renderFallback() {\n    if (this.domain && this.domain in FALLBACK_DOMAIN_ICONS) {\n      return html`\n        <ha-svg-icon .path=${FALLBACK_DOMAIN_ICONS[this.domain!]}></ha-svg-icon>\n      `;\n    }\n    if (this.brandFallback) {\n      const image = brandsUrl({\n        domain: this.domain!,\n        type: \"icon\",\n        darkOptimized: this.hass.themes?.darkMode,\n      });\n      return html`\n        <img\n          alt=\"\"\n          src=${image}\n          crossorigin=\"anonymous\"\n          referrerpolicy=\"no-referrer\"\n        />\n      `;\n    }\n    return html`<ha-svg-icon .path=${DEFAULT_DOMAIN_ICON}></ha-svg-icon>`;\n  }\n\n  static styles = css`\n    img {\n      width: var(--mdc-icon-size, 24px);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-domain-icon\": HaDomainIcon;\n  }\n}\n","import { mdiChevronDown } from \"@mdi/js\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nexport class HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property({ attribute: \"left-chevron\", type: Boolean, reflect: true })\n  public leftChevron = false;\n\n  @property({ attribute: \"no-collapse\", type: Boolean, reflect: true })\n  public noCollapse = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @state() _showContent = this.expanded;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    const chevronIcon = this.noCollapse\n      ? nothing\n      : html`\n          <ha-svg-icon\n            .path=${mdiChevronDown}\n            class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n          ></ha-svg-icon>\n        `;\n    return html`\n      <div class=\"top ${classMap({ expanded: this.expanded })}\">\n        <div\n          id=\"summary\"\n          class=${classMap({ noCollapse: this.noCollapse })}\n          @click=${this._toggleContainer}\n          @keydown=${this._toggleContainer}\n          @focus=${this._focusChanged}\n          @blur=${this._focusChanged}\n          role=\"button\"\n          tabindex=${this.noCollapse ? -1 : 0}\n          aria-expanded=${this.expanded}\n          aria-controls=\"sect1\"\n        >\n          ${this.leftChevron ? chevronIcon : nothing}\n          <slot name=\"leading-icon\"></slot>\n          <slot name=\"header\">\n            <div class=\"header\">\n              ${this.header}\n              <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n            </div>\n          </slot>\n          ${!this.leftChevron ? chevronIcon : nothing}\n          <slot name=\"icons\"></slot>\n        </div>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n        role=\"region\"\n        aria-labelledby=\"summary\"\n        aria-hidden=${!this.expanded}\n        tabindex=\"-1\"\n      >\n        ${this._showContent ? html`<slot></slot>` : \"\"}\n      </div>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"expanded\")) {\n      this._showContent = this.expanded;\n      setTimeout(() => {\n        // Verify we're still expanded\n        this._container.style.overflow = this.expanded ? \"initial\" : \"hidden\";\n      }, 300);\n    }\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n    this._container.style.overflow = this.expanded ? \"initial\" : \"hidden\";\n    this._showContent = this.expanded;\n  }\n\n  private async _toggleContainer(ev): Promise<void> {\n    if (ev.defaultPrevented) {\n      return;\n    }\n    if (ev.type === \"keydown\" && ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    if (this.noCollapse) {\n      return;\n    }\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n    this._container.style.overflow = \"hidden\";\n\n    if (newExpanded) {\n      this._showContent = true;\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  private _focusChanged(ev) {\n    if (this.noCollapse) {\n      return;\n    }\n    this.shadowRoot!.querySelector(\".top\")!.classList.toggle(\n      \"focused\",\n      ev.type === \"focus\"\n    );\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n    }\n\n    .top {\n      display: flex;\n      align-items: center;\n      border-radius: var(--ha-card-border-radius, 12px);\n    }\n\n    .top.expanded {\n      border-bottom-left-radius: 0px;\n      border-bottom-right-radius: 0px;\n    }\n\n    .top.focused {\n      background: var(--input-fill-color);\n    }\n\n    :host([outlined]) {\n      box-shadow: none;\n      border-width: 1px;\n      border-style: solid;\n      border-color: var(--outline-color);\n      border-radius: var(--ha-card-border-radius, 12px);\n    }\n\n    .summary-icon {\n      transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n      direction: var(--direction);\n      margin-left: 8px;\n      margin-inline-start: 8px;\n      margin-inline-end: initial;\n    }\n\n    :host([left-chevron]) .summary-icon,\n    ::slotted([slot=\"leading-icon\"]) {\n      margin-left: 0;\n      margin-right: 8px;\n      margin-inline-start: 0;\n      margin-inline-end: 8px;\n    }\n\n    #summary {\n      flex: 1;\n      display: flex;\n      padding: var(--expansion-panel-summary-padding, 0 8px);\n      min-height: 48px;\n      align-items: center;\n      cursor: pointer;\n      overflow: hidden;\n      font-weight: var(--ha-font-weight-medium);\n      outline: none;\n    }\n    #summary.noCollapse {\n      cursor: default;\n    }\n\n    .summary-icon.expanded {\n      transform: rotate(180deg);\n    }\n\n    .header,\n    ::slotted([slot=\"header\"]) {\n      flex: 1;\n      overflow-wrap: anywhere;\n    }\n\n    .container {\n      padding: var(--expansion-panel-content-padding, 0 8px);\n      overflow: hidden;\n      transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n      height: 0px;\n    }\n\n    .container.expanded {\n      height: auto;\n    }\n\n    .secondary {\n      display: block;\n      color: var(--secondary-text-color);\n      font-size: var(--ha-font-size-s);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import type { CustomIcon } from \"./custom_icons\";\n\ninterface CustomIconsetsWindow {\n  customIconsets?: Record<string, (name: string) => Promise<CustomIcon>>;\n}\n\nconst customIconsetsWindow = window as CustomIconsetsWindow;\n\nif (!(\"customIconsets\" in customIconsetsWindow)) {\n  customIconsetsWindow.customIconsets = {};\n}\n\nexport const customIconsets = customIconsetsWindow.customIconsets!;\n","import { customIconsets } from \"./custom_iconsets\";\n\nexport interface CustomIcon {\n  path: string;\n  secondaryPath?: string;\n  viewBox?: string;\n}\n\nexport interface CustomIconListItem {\n  name: string;\n  keywords?: string[];\n}\n\nexport interface CustomIconHelpers {\n  getIcon: (name: string) => Promise<CustomIcon>;\n  getIconList?: () => Promise<CustomIconListItem[]>;\n}\n\nexport interface CustomIconsWindow {\n  customIcons?: Record<string, CustomIconHelpers>;\n}\n\nconst customIconsWindow = window as CustomIconsWindow;\n\nif (!(\"customIcons\" in customIconsWindow)) {\n  customIconsWindow.customIcons = {};\n}\n\n// Proxy for backward compatibility with icon sets\nexport const customIcons = new Proxy(customIconsWindow.customIcons!, {\n  get: (obj, prop: string) =>\n    obj[prop] ??\n    (customIconsets[prop]\n      ? {\n          getIcon: customIconsets[prop],\n        }\n      : undefined),\n});\n","class TimeoutError extends Error {\n  public timeout: number;\n\n  constructor(timeout: number, ...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, TimeoutError);\n    }\n\n    this.name = \"TimeoutError\";\n    // Custom debugging information\n    this.timeout = timeout;\n    this.message = `Timed out in ${timeout} ms.`;\n  }\n}\n\nexport const promiseTimeout = (ms: number, promise: Promise<any> | any) => {\n  const timeout = new Promise((_resolve, reject) => {\n    setTimeout(() => {\n      reject(new TimeoutError(ms));\n    }, ms);\n  });\n\n  // Returns a race between our timeout and the passed in promise\n  return Promise.race([promise, timeout]);\n};\n","import * as iconMetadata_ from \"../../build/mdi/iconMetadata.json\";\nimport type { IconMetaFile } from \"../types.js\";\n\nexport const iconMetadata = (iconMetadata_ as any).default as IconMetaFile;\n","import { clear, get, set, createStore, promisifyRequest } from \"idb-keyval\";\nimport memoizeOne from \"memoize-one\";\nimport { promiseTimeout } from \"../common/util/promise-timeout\";\nimport { iconMetadata } from \"../resources/icon-metadata\";\nimport type { IconMeta } from \"../types\";\n\nexport type Icons = Record<string, string>;\n\nexport type Chunks = Record<string, Promise<Icons>>;\n\nconst getStore = memoizeOne(async () => {\n  const iconStore = createStore(\"hass-icon-db\", \"mdi-icon-store\");\n\n  // Supervisor doesn't use icons, and should not update/downgrade the icon DB.\n  if (!__SUPERVISOR__) {\n    const version = await get(\"_version\", iconStore);\n\n    if (!version) {\n      set(\"_version\", iconMetadata.version, iconStore);\n    } else if (version !== iconMetadata.version) {\n      await clear(iconStore);\n      set(\"_version\", iconMetadata.version, iconStore);\n    }\n  }\n\n  return iconStore;\n});\n\nexport const MDI_PREFIXES = [\"mdi\", \"hass\", \"hassio\", \"hademo\"];\n\nlet toRead: [\n  string,\n  (iconPath: string | undefined) => void,\n  (e: any) => void,\n][] = [];\n\n// Queue up as many icon fetches in 1 transaction\nexport const getIcon = (iconName: string) =>\n  new Promise<string | undefined>((resolve, reject) => {\n    toRead.push([iconName, resolve, reject]);\n\n    if (toRead.length > 1) {\n      return;\n    }\n\n    // Start initializing the store, so it's ready when we need it\n    const iconStoreProm = getStore();\n    const readIcons = async () => {\n      const iconStore = await iconStoreProm;\n      iconStore(\"readonly\", (store) => {\n        for (const [iconName_, resolve_, reject_] of toRead) {\n          promisifyRequest<string | undefined>(store.get(iconName_))\n            .then((icon) => resolve_(icon))\n            .catch((e) => reject_(e));\n        }\n        toRead = [];\n      });\n    };\n\n    promiseTimeout(1000, readIcons()).catch((e) => {\n      // Firefox in private mode doesn't support IDB\n      // Safari sometime doesn't open the DB so we time out\n      for (const [, , reject_] of toRead) {\n        reject_(e);\n      }\n      toRead = [];\n    });\n  });\n\nexport const findIconChunk = (icon: string): string => {\n  let lastChunk: IconMeta;\n  for (const chunk of iconMetadata.parts) {\n    if (chunk.start !== undefined && icon < chunk.start) {\n      break;\n    }\n    lastChunk = chunk;\n  }\n  return lastChunk!.file;\n};\n\nexport const writeCache = async (chunks: Chunks) => {\n  const keys = Object.keys(chunks);\n  const iconsSets: Icons[] = await Promise.all(Object.values(chunks));\n  const iconStore = await getStore();\n  // We do a batch opening the store just once, for (considerable) performance\n  iconStore(\"readwrite\", (store) => {\n    iconsSets.forEach((icons, idx) => {\n      Object.entries(icons).forEach(([name, path]) => {\n        store.put(path, name);\n      });\n      delete chunks[keys[idx]];\n    });\n  });\n};\n","import type { PropertyValues } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { debounce } from \"../common/util/debounce\";\nimport type { CustomIcon } from \"../data/custom_icons\";\nimport { customIcons } from \"../data/custom_icons\";\nimport type { Chunks, Icons } from \"../data/iconsets\";\nimport {\n  MDI_PREFIXES,\n  findIconChunk,\n  getIcon,\n  writeCache,\n} from \"../data/iconsets\";\nimport \"./ha-svg-icon\";\n\ntype DeprecatedIcon = Record<\n  string,\n  {\n    removeIn: string;\n    newName?: string;\n  }\n>;\n\nconst mdiDeprecatedIcons: DeprecatedIcon = {};\n\nconst chunks: Chunks = {};\n\nconst debouncedWriteCache = debounce(() => writeCache(chunks), 2000);\n\nconst cachedIcons: Record<string, string> = {};\n\n@customElement(\"ha-icon\")\nexport class HaIcon extends LitElement {\n  @property() public icon?: string;\n\n  @state() private _path?: string;\n\n  @state() private _secondaryPath?: string;\n\n  @state() private _viewBox?: string;\n\n  @state() private _legacy = false;\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"icon\")) {\n      this._path = undefined;\n      this._secondaryPath = undefined;\n      this._viewBox = undefined;\n      this._loadIcon();\n    }\n  }\n\n  protected render() {\n    if (!this.icon) {\n      return nothing;\n    }\n    if (this._legacy) {\n      return html`<!-- @ts-ignore we don't provide the iron-icon element -->\n        <iron-icon .icon=${this.icon}></iron-icon>`;\n    }\n    return html`<ha-svg-icon\n      .path=${this._path}\n      .secondaryPath=${this._secondaryPath}\n      .viewBox=${this._viewBox}\n    ></ha-svg-icon>`;\n  }\n\n  private async _loadIcon() {\n    if (!this.icon) {\n      return;\n    }\n    const requestedIcon = this.icon;\n    const [iconPrefix, origIconName] = this.icon.split(\":\", 2);\n\n    let iconName = origIconName;\n\n    if (!iconPrefix || !iconName) {\n      return;\n    }\n\n    if (!MDI_PREFIXES.includes(iconPrefix)) {\n      const customIcon = customIcons[iconPrefix];\n      if (customIcon) {\n        if (customIcon && typeof customIcon.getIcon === \"function\") {\n          this._setCustomPath(customIcon.getIcon(iconName), requestedIcon);\n        }\n        return;\n      }\n      this._legacy = true;\n      return;\n    }\n\n    this._legacy = false;\n\n    if (iconName in mdiDeprecatedIcons) {\n      const deprecatedIcon = mdiDeprecatedIcons[iconName];\n      let message: string;\n\n      if (deprecatedIcon.newName) {\n        message = `Icon ${iconPrefix}:${iconName} was renamed to ${iconPrefix}:${deprecatedIcon.newName}, please change your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n        iconName = deprecatedIcon.newName!;\n      } else {\n        message = `Icon ${iconPrefix}:${iconName} was removed from MDI, please replace this icon with an other icon in your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n      }\n      // eslint-disable-next-line no-console\n      console.warn(message);\n      fireEvent(this, \"write_log\", {\n        level: \"warning\",\n        message,\n      });\n    }\n\n    if (iconName in cachedIcons) {\n      this._path = cachedIcons[iconName];\n      return;\n    }\n\n    if (iconName === \"home-assistant\") {\n      const icon = (await import(\"../resources/home-assistant-logo-svg\"))\n        .mdiHomeAssistant;\n\n      if (this.icon === requestedIcon) {\n        this._path = icon;\n      }\n      cachedIcons[iconName] = icon;\n      return;\n    }\n\n    let databaseIcon: string | undefined;\n    try {\n      databaseIcon = await getIcon(iconName);\n    } catch (_err) {\n      // Firefox in private mode doesn't support IDB\n      // iOS Safari sometimes doesn't open the DB\n      databaseIcon = undefined;\n    }\n\n    if (databaseIcon) {\n      if (this.icon === requestedIcon) {\n        this._path = databaseIcon;\n      }\n      cachedIcons[iconName] = databaseIcon;\n      return;\n    }\n    const chunk = findIconChunk(iconName);\n\n    if (chunk in chunks) {\n      this._setPath(chunks[chunk], iconName, requestedIcon);\n      return;\n    }\n\n    const iconPromise = fetch(`/static/mdi/${chunk}.json`).then((response) =>\n      response.json()\n    );\n    chunks[chunk] = iconPromise;\n    this._setPath(iconPromise, iconName, requestedIcon);\n    debouncedWriteCache();\n  }\n\n  private async _setCustomPath(\n    promise: Promise<CustomIcon>,\n    requestedIcon: string\n  ) {\n    const icon = await promise;\n    if (this.icon !== requestedIcon) {\n      return;\n    }\n    this._path = icon.path;\n    this._secondaryPath = icon.secondaryPath;\n    this._viewBox = icon.viewBox;\n  }\n\n  private async _setPath(\n    promise: Promise<Icons>,\n    iconName: string,\n    requestedIcon: string\n  ) {\n    const iconPack = await promise;\n    if (this.icon === requestedIcon) {\n      this._path = iconPack[iconName];\n    }\n    cachedIcons[iconName] = iconPack[iconName];\n  }\n\n  static styles = css`\n    :host {\n      fill: currentcolor;\n    }\n  `;\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon\": HaIcon;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport {\n  DEFAULT_DOMAIN_ICON,\n  entityIcon,\n  FALLBACK_DOMAIN_ICONS,\n} from \"../data/icons\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public stateValue?: string;\n\n  @property() public icon?: string;\n\n  protected render() {\n    const overrideIcon =\n      this.icon ||\n      (this.stateObj && this.hass?.entities[this.stateObj.entity_id]?.icon) ||\n      this.stateObj?.attributes.icon;\n    if (overrideIcon) {\n      return html`<ha-icon .icon=${overrideIcon}></ha-icon>`;\n    }\n    if (!this.stateObj) {\n      return nothing;\n    }\n    if (!this.hass) {\n      return this._renderFallback();\n    }\n    const icon = entityIcon(this.hass, this.stateObj, this.stateValue).then(\n      (icn) => {\n        if (icn) {\n          return html`<ha-icon .icon=${icn}></ha-icon>`;\n        }\n        return this._renderFallback();\n      }\n    );\n    return html`${until(icon)}`;\n  }\n\n  private _renderFallback() {\n    const domain = computeStateDomain(this.stateObj!);\n\n    return html`\n      <ha-svg-icon\n        .path=${FALLBACK_DOMAIN_ICONS[domain] || DEFAULT_DOMAIN_ICON}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import {\n  mdiAccount,\n  mdiAirFilter,\n  mdiAlert,\n  mdiAppleSafari,\n  mdiBell,\n  mdiBookmark,\n  mdiBullhorn,\n  mdiButtonPointer,\n  mdiCalendar,\n  mdiCalendarClock,\n  mdiChatSleep,\n  mdiClipboardList,\n  mdiClock,\n  mdiCog,\n  mdiCommentAlert,\n  mdiCounter,\n  mdiEye,\n  mdiFlower,\n  mdiFormatListBulleted,\n  mdiFormTextbox,\n  mdiForumOutline,\n  mdiGoogleAssistant,\n  mdiGoogleCirclesCommunities,\n  mdiHomeAutomation,\n  mdiImage,\n  mdiImageFilterFrames,\n  mdiLightbulb,\n  mdiMapMarkerRadius,\n  mdiMicrophoneMessage,\n  mdiPalette,\n  mdiRayVertex,\n  mdiRemote,\n  mdiRobot,\n  mdiRobotMower,\n  mdiRobotVacuum,\n  mdiRoomService,\n  mdiScriptText,\n  mdiSpeakerMessage,\n  mdiThermostat,\n  mdiTimerOutline,\n  mdiToggleSwitch,\n  mdiWeatherPartlyCloudy,\n  mdiWhiteBalanceSunny,\n} from \"@mdi/js\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nimport { atLeastVersion } from \"../common/config/version\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeObjectId } from \"../common/entity/compute_object_id\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { stateIcon } from \"../common/entity/state_icon\";\nimport type { HomeAssistant } from \"../types\";\nimport type {\n  EntityRegistryDisplayEntry,\n  EntityRegistryEntry,\n} from \"./entity_registry\";\n\nimport { mdiHomeAssistant } from \"../resources/home-assistant-logo-svg\";\n\n/** Icon to use when no icon specified for service. */\nexport const DEFAULT_SERVICE_ICON = mdiRoomService;\n\n/** Icon to use when no icon specified for domain. */\nexport const DEFAULT_DOMAIN_ICON = mdiBookmark;\n\n/** Fallback icons for each domain */\nexport const FALLBACK_DOMAIN_ICONS = {\n  air_quality: mdiAirFilter,\n  alert: mdiAlert,\n  automation: mdiRobot,\n  calendar: mdiCalendar,\n  climate: mdiThermostat,\n  configurator: mdiCog,\n  conversation: mdiForumOutline,\n  counter: mdiCounter,\n  date: mdiCalendar,\n  datetime: mdiCalendarClock,\n  demo: mdiHomeAssistant,\n  device_tracker: mdiAccount,\n  google_assistant: mdiGoogleAssistant,\n  group: mdiGoogleCirclesCommunities,\n  homeassistant: mdiHomeAssistant,\n  homekit: mdiHomeAutomation,\n  image_processing: mdiImageFilterFrames,\n  image: mdiImage,\n  input_boolean: mdiToggleSwitch,\n  input_button: mdiButtonPointer,\n  input_datetime: mdiCalendarClock,\n  input_number: mdiRayVertex,\n  input_select: mdiFormatListBulleted,\n  input_text: mdiFormTextbox,\n  lawn_mower: mdiRobotMower,\n  light: mdiLightbulb,\n  notify: mdiCommentAlert,\n  number: mdiRayVertex,\n  persistent_notification: mdiBell,\n  person: mdiAccount,\n  plant: mdiFlower,\n  proximity: mdiAppleSafari,\n  remote: mdiRemote,\n  scene: mdiPalette,\n  schedule: mdiCalendarClock,\n  script: mdiScriptText,\n  select: mdiFormatListBulleted,\n  sensor: mdiEye,\n  simple_alarm: mdiBell,\n  siren: mdiBullhorn,\n  stt: mdiMicrophoneMessage,\n  sun: mdiWhiteBalanceSunny,\n  text: mdiFormTextbox,\n  time: mdiClock,\n  timer: mdiTimerOutline,\n  todo: mdiClipboardList,\n  tts: mdiSpeakerMessage,\n  vacuum: mdiRobotVacuum,\n  wake_word: mdiChatSleep,\n  weather: mdiWeatherPartlyCloudy,\n  zone: mdiMapMarkerRadius,\n};\n\nconst resources: {\n  entity: Record<string, Promise<PlatformIcons>>;\n  entity_component: {\n    domains?: string[];\n    resources?: Promise<Record<string, ComponentIcons>>;\n  };\n  services: {\n    all?: Promise<Record<string, ServiceIcons>>;\n    domains: Record<string, ServiceIcons | Promise<ServiceIcons>>;\n  };\n} = {\n  entity: {},\n  entity_component: {},\n  services: { domains: {} },\n};\n\ninterface IconResources<\n  T extends ComponentIcons | PlatformIcons | ServiceIcons,\n> {\n  resources: Record<string, T>;\n}\n\ntype PlatformIcons = Record<\n  string,\n  {\n    state: Record<string, string>;\n    range?: Record<string, string>;\n    state_attributes: Record<\n      string,\n      {\n        state: Record<string, string>;\n        range?: Record<string, string>;\n        default: string;\n      }\n    >;\n    default: string;\n  }\n>;\n\nexport type ComponentIcons = Record<\n  string,\n  {\n    state?: Record<string, string>;\n    range?: Record<string, string>;\n    state_attributes?: Record<\n      string,\n      {\n        state: Record<string, string>;\n        range?: Record<string, string>;\n        default: string;\n      }\n    >;\n    default: string;\n  }\n>;\n\ntype ServiceIcons = Record<\n  string,\n  { service: string; sections?: Record<string, string> }\n>;\n\nexport type IconCategory = \"entity\" | \"entity_component\" | \"services\";\n\ninterface CategoryType {\n  entity: PlatformIcons;\n  entity_component: ComponentIcons;\n  services: ServiceIcons;\n}\n\nexport const getHassIcons = async <T extends IconCategory>(\n  hass: HomeAssistant,\n  category: T,\n  integration?: string\n) =>\n  hass.callWS<IconResources<CategoryType[T]>>({\n    type: \"frontend/get_icons\",\n    category,\n    integration,\n  });\n\nexport const getPlatformIcons = async (\n  hass: HomeAssistant,\n  integration: string,\n  force = false\n): Promise<PlatformIcons | undefined> => {\n  if (!force && integration in resources.entity) {\n    return resources.entity[integration];\n  }\n  if (\n    !isComponentLoaded(hass, integration) ||\n    !atLeastVersion(hass.connection.haVersion, 2024, 2)\n  ) {\n    return undefined;\n  }\n  const result = getHassIcons(hass, \"entity\", integration).then(\n    (res) => res?.resources[integration]\n  );\n  resources.entity[integration] = result;\n  return resources.entity[integration];\n};\n\nexport const getComponentIcons = async (\n  hass: HomeAssistant,\n  domain: string,\n  force = false\n): Promise<ComponentIcons | undefined> => {\n  // For Cast, old instances can connect to it.\n  if (\n    __BACKWARDS_COMPAT__ &&\n    !atLeastVersion(hass.connection.haVersion, 2024, 2)\n  ) {\n    return import(\"../fake_data/entity_component_icons\")\n      .then((mod) => mod.ENTITY_COMPONENT_ICONS)\n      .then((res) => res[domain]);\n  }\n\n  if (\n    !force &&\n    resources.entity_component.resources &&\n    resources.entity_component.domains?.includes(domain)\n  ) {\n    return resources.entity_component.resources.then((res) => res[domain]);\n  }\n\n  if (!isComponentLoaded(hass, domain)) {\n    return undefined;\n  }\n  resources.entity_component.domains = [...hass.config.components];\n  resources.entity_component.resources = getHassIcons(\n    hass,\n    \"entity_component\"\n  ).then((result) => result.resources);\n  return resources.entity_component.resources.then((res) => res[domain]);\n};\n\nexport const getServiceIcons = async (\n  hass: HomeAssistant,\n  domain?: string,\n  force = false\n): Promise<ServiceIcons | Record<string, ServiceIcons> | undefined> => {\n  if (!domain) {\n    if (!force && resources.services.all) {\n      return resources.services.all;\n    }\n    resources.services.all = getHassIcons(hass, \"services\", domain).then(\n      (res) => {\n        resources.services.domains = res.resources;\n        return res?.resources;\n      }\n    );\n    return resources.services.all;\n  }\n  if (!force && domain in resources.services.domains) {\n    return resources.services.domains[domain];\n  }\n  if (resources.services.all && !force) {\n    await resources.services.all;\n    if (domain in resources.services.domains) {\n      return resources.services.domains[domain];\n    }\n  }\n  if (!isComponentLoaded(hass, domain)) {\n    return undefined;\n  }\n  const result = getHassIcons(hass, \"services\", domain);\n  resources.services.domains[domain] = result.then(\n    (res) => res?.resources[domain]\n  );\n  return resources.services.domains[domain];\n};\n\n// Cache for sorted range keys\nconst sortedRangeCache = new WeakMap<Record<string, string>, number[]>();\n\n// Helper function to get an icon from a range of values\nconst getIconFromRange = (\n  value: number,\n  range: Record<string, string>\n): string | undefined => {\n  // Get cached range values or compute and cache them\n  let rangeValues = sortedRangeCache.get(range);\n  if (!rangeValues) {\n    rangeValues = Object.keys(range)\n      .map(Number)\n      .filter((k) => !isNaN(k))\n      .sort((a, b) => a - b);\n    sortedRangeCache.set(range, rangeValues);\n  }\n\n  if (rangeValues.length === 0) {\n    return undefined;\n  }\n\n  // If the value is below the first threshold, return undefined\n  // (we'll fall back to the default icon)\n  if (value < rangeValues[0]) {\n    return undefined;\n  }\n\n  // Find the highest threshold that's less than or equal to the value\n  let selectedThreshold = rangeValues[0];\n  for (const threshold of rangeValues) {\n    if (value >= threshold) {\n      selectedThreshold = threshold;\n    } else {\n      break;\n    }\n  }\n\n  return range[selectedThreshold.toString()];\n};\n\n// Helper function to get an icon based on state and translations\nconst getIconFromTranslations = (\n  state: string | number | undefined,\n  translations:\n    | {\n        default?: string;\n        state?: Record<string, string>;\n        range?: Record<string, string>;\n      }\n    | undefined\n): string | undefined => {\n  if (!translations) {\n    return undefined;\n  }\n\n  // First check for exact state match\n  if (state && translations.state?.[state]) {\n    return translations.state[state];\n  }\n  // Then check for range-based icons if we have a numeric state\n  if (state !== undefined && translations.range && !isNaN(Number(state))) {\n    return getIconFromRange(Number(state), translations.range);\n  }\n  // Fallback to default icon\n  return translations.default;\n};\n\nexport const entityIcon = async (\n  hass: HomeAssistant,\n  stateObj: HassEntity,\n  state?: string\n) => {\n  const entry = hass.entities?.[stateObj.entity_id] as\n    | EntityRegistryDisplayEntry\n    | undefined;\n  if (entry?.icon) {\n    return entry.icon;\n  }\n  const domain = computeStateDomain(stateObj);\n\n  return getEntityIcon(hass, domain, stateObj, state, entry);\n};\n\nexport const entryIcon = async (\n  hass: HomeAssistant,\n  entry: EntityRegistryEntry | EntityRegistryDisplayEntry\n) => {\n  if (entry.icon) {\n    return entry.icon;\n  }\n  const stateObj = hass.states[entry.entity_id] as HassEntity | undefined;\n  const domain = computeDomain(entry.entity_id);\n  return getEntityIcon(hass, domain, stateObj, undefined, entry);\n};\n\nconst getEntityIcon = async (\n  hass: HomeAssistant,\n  domain: string,\n  stateObj?: HassEntity,\n  stateValue?: string,\n  entry?: EntityRegistryEntry | EntityRegistryDisplayEntry\n) => {\n  const platform = entry?.platform;\n  const translation_key = entry?.translation_key;\n  const device_class = stateObj?.attributes.device_class;\n  const state = stateValue ?? stateObj?.state;\n\n  let icon: string | undefined;\n  if (translation_key && platform) {\n    const platformIcons = await getPlatformIcons(hass, platform);\n    if (platformIcons) {\n      const translations = platformIcons[domain]?.[translation_key];\n\n      icon = getIconFromTranslations(state, translations);\n    }\n  }\n\n  if (!icon && stateObj) {\n    icon = stateIcon(stateObj, state);\n  }\n\n  if (!icon) {\n    const entityComponentIcons = await getComponentIcons(hass, domain);\n    if (entityComponentIcons) {\n      const translations =\n        (device_class && entityComponentIcons[device_class]) ||\n        entityComponentIcons._;\n\n      icon = getIconFromTranslations(state, translations);\n    }\n  }\n  return icon;\n};\n\nexport const attributeIcon = async (\n  hass: HomeAssistant,\n  state: HassEntity,\n  attribute: string,\n  attributeValue?: string\n) => {\n  let icon: string | undefined;\n  const domain = computeStateDomain(state);\n  const deviceClass = state.attributes.device_class;\n  const entity = hass.entities?.[state.entity_id] as\n    | EntityRegistryDisplayEntry\n    | undefined;\n  const platform = entity?.platform;\n  const translation_key = entity?.translation_key;\n  const value =\n    attributeValue ??\n    (state.attributes[attribute] as string | number | undefined);\n\n  if (translation_key && platform) {\n    const platformIcons = await getPlatformIcons(hass, platform);\n    if (platformIcons) {\n      icon = getIconFromTranslations(\n        value,\n        platformIcons[domain]?.[translation_key]?.state_attributes?.[attribute]\n      );\n    }\n  }\n  if (!icon) {\n    const entityComponentIcons = await getComponentIcons(hass, domain);\n    if (entityComponentIcons) {\n      const translations =\n        (deviceClass &&\n          entityComponentIcons[deviceClass]?.state_attributes?.[attribute]) ||\n        entityComponentIcons._?.state_attributes?.[attribute];\n\n      icon = getIconFromTranslations(value, translations);\n    }\n  }\n  return icon;\n};\n\nexport const serviceIcon = async (\n  hass: HomeAssistant,\n  service: string\n): Promise<string | undefined> => {\n  let icon: string | undefined;\n  const domain = computeDomain(service);\n  const serviceName = computeObjectId(service);\n  const serviceIcons = await getServiceIcons(hass, domain);\n  if (serviceIcons) {\n    const srvceIcon = serviceIcons[serviceName] as ServiceIcons[string];\n    icon = srvceIcon?.service;\n  }\n  if (!icon) {\n    icon = await domainIcon(hass, domain);\n  }\n  return icon;\n};\n\nexport const serviceSectionIcon = async (\n  hass: HomeAssistant,\n  service: string,\n  section: string\n): Promise<string | undefined> => {\n  const domain = computeDomain(service);\n  const serviceName = computeObjectId(service);\n  const serviceIcons = await getServiceIcons(hass, domain);\n  if (serviceIcons) {\n    const srvceIcon = serviceIcons[serviceName] as ServiceIcons[string];\n    return srvceIcon?.sections?.[section];\n  }\n  return undefined;\n};\n\nexport const domainIcon = async (\n  hass: HomeAssistant,\n  domain: string,\n  deviceClass?: string\n): Promise<string | undefined> => {\n  const entityComponentIcons = await getComponentIcons(hass, domain);\n  if (entityComponentIcons) {\n    const translations =\n      (deviceClass && entityComponentIcons[deviceClass]) ||\n      entityComponentIcons._;\n    return translations?.default;\n  }\n  return undefined;\n};\n","import type {\n  HassEntities,\n  HassEntityAttributeBase,\n  HassEntityBase,\n  HassEvent,\n} from \"home-assistant-js-websocket\";\nimport { BINARY_STATE_ON } from \"../common/const\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { supportsFeature } from \"../common/entity/supports-feature\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport type { HomeAssistant } from \"../types\";\nimport { showToast } from \"../util/toast\";\nimport type { EntitySources } from \"./entity_sources\";\n\nexport enum UpdateEntityFeature {\n  INSTALL = 1,\n  SPECIFIC_VERSION = 2,\n  PROGRESS = 4,\n  BACKUP = 8,\n  RELEASE_NOTES = 16,\n}\n\ninterface UpdateEntityAttributes extends HassEntityAttributeBase {\n  auto_update: boolean | null;\n  display_precision: number;\n  installed_version: string | null;\n  in_progress: boolean;\n  latest_version: string | null;\n  release_summary: string | null;\n  release_url: string | null;\n  skipped_version: string | null;\n  title: string | null;\n  update_percentage: number | null;\n}\n\nexport interface UpdateEntity extends HassEntityBase {\n  attributes: UpdateEntityAttributes;\n}\n\nexport const updateUsesProgress = (entity: UpdateEntity): boolean =>\n  supportsFeature(entity, UpdateEntityFeature.PROGRESS) &&\n  entity.attributes.update_percentage !== null;\n\nexport const updateCanInstall = (\n  entity: UpdateEntity,\n  showSkipped = false\n): boolean =>\n  (entity.state === BINARY_STATE_ON ||\n    (showSkipped && Boolean(entity.attributes.skipped_version))) &&\n  supportsFeature(entity, UpdateEntityFeature.INSTALL);\n\nexport const updateIsInstalling = (entity: UpdateEntity): boolean =>\n  !!entity.attributes.in_progress;\n\nexport const updateReleaseNotes = (hass: HomeAssistant, entityId: string) =>\n  hass.callWS<string | null>({\n    type: \"update/release_notes\",\n    entity_id: entityId,\n  });\n\nconst HOME_ASSISTANT_CORE_TITLE = \"Home Assistant Core\";\nconst HOME_ASSISTANT_SUPERVISOR_TITLE = \"Home Assistant Supervisor\";\nconst HOME_ASSISTANT_OS_TITLE = \"Home Assistant Operating System\";\n\nexport const filterUpdateEntities = (\n  entities: HassEntities,\n  language?: string\n) =>\n  (\n    Object.values(entities).filter(\n      (entity) => computeStateDomain(entity) === \"update\"\n    ) as UpdateEntity[]\n  ).sort((a, b) => {\n    if (a.attributes.title === HOME_ASSISTANT_CORE_TITLE) {\n      return -3;\n    }\n    if (b.attributes.title === HOME_ASSISTANT_CORE_TITLE) {\n      return 3;\n    }\n    if (a.attributes.title === HOME_ASSISTANT_OS_TITLE) {\n      return -2;\n    }\n    if (b.attributes.title === HOME_ASSISTANT_OS_TITLE) {\n      return 2;\n    }\n    if (a.attributes.title === HOME_ASSISTANT_SUPERVISOR_TITLE) {\n      return -1;\n    }\n    if (b.attributes.title === HOME_ASSISTANT_SUPERVISOR_TITLE) {\n      return 1;\n    }\n    return caseInsensitiveStringCompare(\n      a.attributes.title || a.attributes.friendly_name || \"\",\n      b.attributes.title || b.attributes.friendly_name || \"\",\n      language\n    );\n  });\n\nexport const filterUpdateEntitiesWithInstall = (\n  entities: HassEntities,\n  showSkipped = false\n) =>\n  filterUpdateEntities(entities).filter((entity) =>\n    updateCanInstall(entity, showSkipped)\n  );\n\nexport const checkForEntityUpdates = async (\n  element: HTMLElement,\n  hass: HomeAssistant\n) => {\n  const entities = filterUpdateEntities(hass.states, hass.locale.language).map(\n    (entity) => entity.entity_id\n  );\n\n  if (!entities.length) {\n    showAlertDialog(element, {\n      title: hass.localize(\"ui.panel.config.updates.no_update_entities.title\"),\n      text: hass.localize(\n        \"ui.panel.config.updates.no_update_entities.description\"\n      ),\n      warning: true,\n    });\n    return;\n  }\n\n  showToast(element, {\n    message: hass.localize(\"ui.panel.config.updates.checking_updates\"),\n  });\n\n  let updated = 0;\n\n  const unsubscribeEvents = await hass.connection.subscribeEvents<HassEvent>(\n    (event) => {\n      if (computeDomain(event.data.entity_id) === \"update\") {\n        updated++;\n        showToast(element, {\n          message: hass.localize(\"ui.panel.config.updates.updates_refreshed\", {\n            count: updated,\n          }),\n        });\n      }\n    },\n    \"state_changed\"\n  );\n\n  await hass.callService(\"homeassistant\", \"update_entity\", {\n    entity_id: entities,\n  });\n\n  // there is no reliable way to know if all the updates are done updating, so we just wait a bit for now...\n  await new Promise((r) => {\n    setTimeout(r, 15000);\n  });\n\n  unsubscribeEvents();\n\n  if (updated === 0) {\n    showToast(element, {\n      message: hass.localize(\"ui.panel.config.updates.no_new_updates\"),\n    });\n  }\n};\n\n// When updating, and entity does not support % show \"Installing\"\n// When updating, and entity does support % show \"Installing (xx%)\"\n// When update available, show \"Update available\"\n// When the latest version is skipped, show the latest version\n// When update is not available, show \"Up-to-date\"\n// When update is not available and there is no latest_version show \"Unavailable\"\nexport const computeUpdateStateDisplay = (\n  stateObj: UpdateEntity,\n  hass: HomeAssistant\n): string => {\n  const state = stateObj.state;\n  const attributes = stateObj.attributes;\n\n  if (state === \"off\") {\n    const isSkipped =\n      attributes.latest_version &&\n      attributes.skipped_version === attributes.latest_version;\n    if (isSkipped) {\n      return attributes.latest_version!;\n    }\n    return hass.formatEntityState(stateObj);\n  }\n\n  if (state === \"on\") {\n    if (updateIsInstalling(stateObj)) {\n      const supportsProgress =\n        supportsFeature(stateObj, UpdateEntityFeature.PROGRESS) &&\n        attributes.update_percentage !== null;\n      if (supportsProgress) {\n        return hass.localize(\"ui.card.update.installing_with_progress\", {\n          progress: formatNumber(attributes.update_percentage!, hass.locale, {\n            maximumFractionDigits: attributes.display_precision,\n            minimumFractionDigits: attributes.display_precision,\n          }),\n        });\n      }\n      return hass.localize(\"ui.card.update.installing\");\n    }\n  }\n\n  return hass.formatEntityState(stateObj);\n};\n\nexport type UpdateType =\n  | \"addon\"\n  | \"home_assistant\"\n  | \"home_assistant_os\"\n  | \"generic\";\n\nexport const getUpdateType = (\n  stateObj: UpdateEntity,\n  entitySources: EntitySources\n): UpdateType => {\n  const entity_id = stateObj.entity_id;\n  const domain = entitySources[entity_id]?.domain;\n\n  if (domain !== \"hassio\") {\n    return \"generic\";\n  }\n\n  const title = stateObj.attributes.title || \"\";\n  if (title === HOME_ASSISTANT_CORE_TITLE) {\n    return \"home_assistant\";\n  }\n\n  if (title === HOME_ASSISTANT_OS_TITLE) {\n    return \"home_assistant_os\";\n  }\n\n  if (title !== HOME_ASSISTANT_SUPERVISOR_TITLE) {\n    return \"addon\";\n  }\n  return \"generic\";\n};\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property({ attribute: \"is-wide\", type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  @property({ type: Boolean, attribute: \"full-width\" })\n  public fullWidth = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n          \"full-width\": this.fullWidth,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n    }\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n\n    .layout {\n      display: flex;\n    }\n\n    .horizontal {\n      flex-direction: row;\n    }\n\n    .vertical {\n      flex-direction: column;\n    }\n\n    .flex-auto {\n      flex: 1 1 auto;\n    }\n\n    .header {\n      font-family: var(--ha-font-family-body);\n      -webkit-font-smoothing: var(--ha-font-smoothing);\n      -moz-osx-font-smoothing: var(--ha-moz-osx-font-smoothing);\n      font-size: var(--ha-font-size-2xl);\n      font-weight: var(--ha-font-weight-normal);\n      line-height: var(--ha-line-height-condensed);\n      opacity: var(--dark-primary-opacity);\n    }\n\n    .together {\n      margin-top: var(--config-section-content-together-margin-top, 32px);\n    }\n\n    .intro {\n      font-family: var(--ha-font-family-body);\n      -webkit-font-smoothing: var(--ha-font-smoothing);\n      -moz-osx-font-smoothing: var(--ha-moz-osx-font-smoothing);\n      font-weight: var(--ha-font-weight-normal);\n      line-height: var(--ha-line-height-normal);\n      width: 100%;\n      opacity: var(--dark-primary-opacity);\n      font-size: var(--ha-font-size-m);\n      padding-bottom: 20px;\n    }\n\n    .horizontal .intro {\n      max-width: 400px;\n      margin-right: 40px;\n      margin-inline-end: 40px;\n      margin-inline-start: initial;\n    }\n\n    .panel {\n      margin-top: -24px;\n    }\n\n    .panel ::slotted(*) {\n      margin-top: 24px;\n      display: block;\n    }\n\n    .narrow.content {\n      max-width: 640px;\n    }\n    .narrow .together {\n      margin-top: var(\n        --config-section-narrow-content-together-margin-top,\n        var(--config-section-content-together-margin-top, 20px)\n      );\n    }\n    .narrow .intro {\n      padding-bottom: 20px;\n      margin-right: 0;\n      margin-inline-end: 0;\n      margin-inline-start: initial;\n      max-width: 500px;\n    }\n\n    .full-width {\n      padding: 0;\n    }\n\n    .full-width .layout {\n      flex-direction: column;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section\": HaConfigSection;\n  }\n}\n","export const mdiHomeAssistant =\n  \"m12.151 1.5882c-.3262 0-.6523.1291-.8996.3867l-8.3848 8.7354c-.0619.0644-.1223.1368-.1807.2154-.0588.0789-.1151.1638-.1688.2534-.2593.4325-.4552.9749-.5232 1.4555-.0026.018-.0076.0369-.0094.0548-.0121.0987-.0184.1944-.0184.2857v8.0124a1.2731 1.2731 0 001.2731 1.2731h7.8313l-3.4484-3.593a1.7399 1.7399 0 111.0803-1.125l2.6847 2.7972v-10.248a1.7399 1.7399 0 111.5276-0v7.187l2.6702-2.782a1.7399 1.7399 0 111.0566 1.1505l-3.7269 3.8831v2.7299h8.174a1.2471 1.2471 0 001.2471-1.2471v-8.0375c0-.0912-.0059-.1868-.0184-.2855-.0603-.4935-.2636-1.0617-.5326-1.5105-.0537-.0896-.1101-.1745-.1684-.253-.0588-.079-.1191-.1513-.181-.2158l-8.3848-8.7363c-.2473-.2577-.5735-.3866-.8995-.3864\";\n","import { mdiFilterVariantRemove } from \"@mdi/js\";\nimport type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport type { HomeAssistant } from \"@ha/types\";\nimport { haStyleScrollbar } from \"@ha/resources/styles\";\nimport type { LCN, LcnAddress, LcnDeviceConfig } from \"types/lcn\";\nimport \"@ha/components/ha-domain-icon\";\nimport \"@ha/components/search-input-outlined\";\nimport \"@ha/components/ha-expansion-panel\";\nimport \"@ha/components/ha-icon-button\";\nimport \"@ha/components/ha-icon\";\nimport \"@ha/components/ha-check-list-item\";\nimport { addressToString, stringToAddress } from \"helpers/address_conversion\";\nimport { stringCompare } from \"@ha/common/string/compare\";\n\n@customElement(\"lcn-filter-address\")\nexport class HaFilterDomains extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public deviceConfigs!: LcnDeviceConfig[];\n\n  @property({ attribute: false }) public value?: string[];\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean, reflect: true }) public expanded = false;\n\n  @state() private _shouldRender = false;\n\n  @state() private _filter?: string;\n\n  protected render() {\n    return html`\n      <ha-expansion-panel\n        leftChevron\n        .expanded=${this.expanded}\n        @expanded-will-change=${this._expandedWillChange}\n        @expanded-changed=${this._expandedChanged}\n      >\n        <div slot=\"header\" class=\"header\">\n          ${this.lcn.localize(\"devices\")}/${this.lcn.localize(\"addresses\")}\n          ${this.value?.length\n            ? html`<div class=\"badge\">${this.value?.length}</div>\n                <ha-icon-button\n                  .path=${mdiFilterVariantRemove}\n                  @click=${this._clearFilter}\n                ></ha-icon-button>`\n            : nothing}\n        </div>\n        ${this._shouldRender\n          ? html`<search-input-outlined\n                .hass=${this.hass}\n                .filter=${this._filter}\n                @value-changed=${this._handleSearchChange}\n              ></search-input-outlined>\n\n              <mwc-list class=\"ha-scrollbar\" multi @click=${this._handleItemClick}>\n                ${this._addresses(this.deviceConfigs, this._filter).map(\n                  (address: string) =>\n                    html`<ha-check-list-item\n                      .value=${address}\n                      .selected=${(this.value || []).includes(address)}\n                    >\n                      ${this._addressRepr(address)}\n                    </ha-check-list-item>`,\n                )}\n              </mwc-list>`\n          : nothing}\n      </ha-expansion-panel>\n    `;\n  }\n\n  private _addresses = memoizeOne((deviceConfigs, filter) => {\n    const addresses = new Set<string>();\n    deviceConfigs.forEach((deviceConfig) => {\n      addresses.add(addressToString(deviceConfig.address));\n    });\n    return Array.from(addresses.values())\n      .map((address: string) => ({\n        address,\n        name: this._addressRepr(address),\n      }))\n      .filter(\n        (entry) =>\n          !filter ||\n          entry.address.toLowerCase().includes(filter) ||\n          entry.name.toLowerCase().includes(filter),\n      )\n      .sort((a, b) => stringCompare(a.name, b.name, this.hass.locale.language))\n      .map((entry) => entry.address);\n  });\n\n  private _addressRepr(address: string): string {\n    const lcnAddress: LcnAddress = stringToAddress(address);\n    const device = lcnAddress[2] ? this.lcn.localize(\"group\") : this.lcn.localize(\"module\");\n    const segmentId = lcnAddress[0];\n    const addressId = lcnAddress[1];\n    const result = `${device} (${segmentId}, ${addressId})`;\n    return result;\n  }\n\n  protected updated(changed) {\n    if (changed.has(\"expanded\") && this.expanded) {\n      setTimeout(() => {\n        if (!this.expanded) return;\n        this.renderRoot.querySelector(\"mwc-list\")!.style.height =\n          `${this.clientHeight - 49 - 32}px`; // 32px is the height of the search input\n      }, 300);\n    }\n  }\n\n  private _expandedWillChange(ev) {\n    this._shouldRender = ev.detail.expanded;\n  }\n\n  private _expandedChanged(ev) {\n    this.expanded = ev.detail.expanded;\n  }\n\n  private _handleItemClick(ev) {\n    const listItem = ev.target.closest(\"ha-check-list-item\");\n    const value = listItem?.value;\n    if (!value) {\n      return;\n    }\n    if (this.value?.includes(value)) {\n      this.value = this.value?.filter((val) => val !== value);\n    } else {\n      this.value = [...(this.value || []), value];\n    }\n\n    listItem.selected = this.value.includes(value);\n\n    fireEvent(this, \"data-table-filter-changed\", {\n      value: this.value,\n      items: undefined,\n    });\n  }\n\n  private _clearFilter(ev) {\n    ev.preventDefault();\n    this.value = undefined;\n    fireEvent(this, \"data-table-filter-changed\", {\n      value: undefined,\n      items: undefined,\n    });\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value.toLowerCase();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleScrollbar,\n      css`\n        :host {\n          border-bottom: 1px solid var(--divider-color);\n        }\n        :host([expanded]) {\n          flex: 1;\n          height: 0;\n        }\n        ha-expansion-panel {\n          --ha-card-border-radius: 0;\n          --expansion-panel-content-padding: 0;\n        }\n        .header {\n          display: flex;\n          align-items: center;\n        }\n        .header ha-icon-button {\n          margin-inline-start: initial;\n          margin-inline-end: 8px;\n        }\n        .badge {\n          display: inline-block;\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n          min-width: 16px;\n          box-sizing: border-box;\n          border-radius: 50%;\n          font-weight: 400;\n          font-size: 11px;\n          background-color: var(--primary-color);\n          line-height: 16px;\n          text-align: center;\n          padding: 0px 2px;\n          color: var(--text-primary-color);\n        }\n        search-input-outlined {\n          display: block;\n          padding: 0 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-filter-address\": HaFilterDomains;\n  }\n}\n","import { fireEvent } from \"@ha/common/dom/fire_event\";\nimport type { LCN, LcnEntityConfig, LcnDeviceConfig } from \"types/lcn\";\n\nexport interface LcnEntityDialogParams {\n  lcn: LCN;\n  deviceConfig: LcnDeviceConfig | undefined;\n  createEntity: (entityParams: Partial<LcnEntityConfig>) => Promise<boolean>;\n}\n\nexport const loadLCNCreateEntityDialog = () => import(\"./lcn-create-entity-dialog\");\n\nexport const showLCNCreateEntityDialog = (\n  element: HTMLElement,\n  lcnEntityDialogParams: LcnEntityDialogParams,\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"lcn-create-entity-dialog\",\n    dialogImport: loadLCNCreateEntityDialog,\n    dialogParams: lcnEntityDialogParams,\n  });\n};\n","import { consume } from \"@lit/context\";\nimport { deviceConfigsContext, entityConfigsContext } from \"components/context\";\nimport { fullEntitiesContext } from \"@ha/data/context\";\nimport { haStyle } from \"@ha/resources/styles\";\nimport type { EntityRegistryEntry } from \"@ha/data/entity_registry\";\nimport type { CSSResultGroup, PropertyValues } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { customElement, property, state, queryAsync } from \"lit/decorators\";\nimport { mdiPlus, mdiDelete } from \"@mdi/js\";\nimport type { HomeAssistant, Route } from \"@ha/types\";\nimport { computeDomain } from \"@ha/common/entity/compute_domain\";\nimport \"@ha/layouts/hass-tabs-subpage-data-table\";\nimport type { HaTabsSubpageDataTable } from \"@ha/layouts/hass-tabs-subpage-data-table\";\nimport memoize from \"memoize-one\";\nimport { storage } from \"@ha/common/decorators/storage\";\nimport \"@ha/panels/config/ha-config-section\";\nimport \"@ha/components/ha-svg-icon\";\nimport \"@ha/components/ha-icon\";\nimport \"@ha/components/ha-icon-button\";\nimport \"@ha/components/ha-state-icon\";\nimport \"@ha/components/ha-domain-icon\";\nimport \"@ha/components/ha-fab\";\nimport \"@ha/components/ha-tooltip\";\nimport { mainWindow } from \"@ha/common/dom/get_main_window\";\nimport type {\n  LCN,\n  LcnDeviceConfig,\n  LcnEntityConfig,\n  LcnAddress,\n  LcnDomainData,\n  SwitchConfig,\n  LightConfig,\n  BinarySensorConfig,\n  SensorConfig,\n  ClimateConfig,\n  SceneConfig,\n  CoverConfig,\n} from \"types/lcn\";\nimport { addEntity, deleteEntity } from \"types/lcn\";\nimport { updateEntityConfigs } from \"components/events\";\nimport type { HASSDomEvent } from \"@ha/common/dom/fire_event\";\nimport type {\n  DataTableColumnContainer,\n  RowClickedEvent,\n  SelectionChangedEvent,\n  SortingChangedEvent,\n} from \"@ha/components/data-table/ha-data-table\";\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport { addressToString, stringToAddress } from \"helpers/address_conversion\";\nimport { lcnMainTabs } from \"lcn-router\";\nimport type { DataTableFiltersItems, DataTableFiltersValues } from \"@ha/data/data_table_filters\";\nimport { renderBrandLogo } from \"helpers/brand_logo\";\nimport {\n  loadLCNCreateEntityDialog,\n  showLCNCreateEntityDialog,\n} from \"./dialogs/show-dialog-create-entity\";\nimport \"components/lcn-filter-address\";\n\nexport interface EntityRowData extends LcnEntityConfig {\n  unique_id: string;\n  address_str: string;\n  entityRegistryEntry: EntityRegistryEntry;\n}\n\nfunction getResource(domainName: string, domainData: LcnDomainData): string {\n  let resource = \"\";\n  switch (domainName) {\n    case \"switch\":\n      resource = (domainData as SwitchConfig).output;\n      break;\n    case \"light\":\n      resource = (domainData as LightConfig).output;\n      break;\n    case \"sensor\":\n      resource = (domainData as SensorConfig).source;\n      break;\n    case \"binary_sensor\":\n      resource = (domainData as BinarySensorConfig).source;\n      break;\n    case \"cover\":\n      resource = (domainData as CoverConfig).motor;\n      break;\n    case \"climate\":\n      resource = `${(domainData as ClimateConfig).setpoint}`;\n      break;\n    case \"scene\":\n      resource = `${(domainData as SceneConfig).register}${(domainData as SceneConfig).scene}`;\n      break;\n  }\n  return resource.toLowerCase();\n}\n\nfunction createUniqueEntityId(entity: LcnEntityConfig, includeDomain = true): string {\n  let uniqueId = `${addressToString(entity.address)}-${getResource(entity.domain, entity.domain_data)}`;\n  if (includeDomain) {\n    uniqueId = `${entity.domain}-` + uniqueId;\n  }\n  return uniqueId;\n}\n\nfunction parseUniqueEntityId(uniqueId: string): {\n  address: LcnAddress;\n  domain: string;\n  resource: string;\n} {\n  const splitted = uniqueId.split(\"-\");\n  const resource = splitted.pop()!;\n  const address = splitted.pop();\n  const domain = splitted.pop()!;\n  const lcnAddress = stringToAddress(address!);\n  const result = { address: lcnAddress, domain: domain, resource: resource };\n  return result;\n}\n\n@customElement(\"lcn-entities-page\")\nexport class LCNEntitiesPage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state() private _deviceConfig: LcnDeviceConfig | undefined;\n\n  @state()\n  @consume({ context: deviceConfigsContext, subscribe: true })\n  _deviceConfigs!: LcnDeviceConfig[];\n\n  @state()\n  @consume({ context: entityConfigsContext, subscribe: true })\n  _entityConfigs!: LcnEntityConfig[];\n\n  @state()\n  @consume({ context: fullEntitiesContext, subscribe: true })\n  _entityRegistryEntries!: EntityRegistryEntry[];\n\n  @storage({\n    storage: \"sessionStorage\",\n    key: \"entities-table-filters\",\n    state: true,\n    subscribe: false,\n  })\n  private _filters: DataTableFiltersValues = {};\n\n  @state() private _filteredItems: DataTableFiltersItems = {};\n\n  @state() private _selected: string[] = [];\n\n  @state() private _expandedFilter?: string;\n\n  @storage({\n    storage: \"sessionStorage\",\n    key: \"lcn-entities-table-search\",\n    state: true,\n    subscribe: false,\n  })\n  private _filter: string = history.state?.filter || \"\";\n\n  @state() private _searchParms = new URLSearchParams(mainWindow.location.search);\n\n  @storage({\n    storage: \"sessionStorage\",\n    key: \"lcn-entities-table-sort\",\n    state: false,\n    subscribe: false,\n  })\n  private _activeSorting?: SortingChangedEvent;\n\n  @storage({\n    key: \"lcn-entities-table-column-order\",\n    state: false,\n    subscribe: false,\n  })\n  private _activeColumnOrder?: string[];\n\n  @storage({\n    key: \"lcn-entities-table-hidden-columns\",\n    state: false,\n    subscribe: false,\n  })\n  private _activeHiddenColumns?: string[];\n\n  @queryAsync(\"hass-tabs-subpage-data-table\")\n  private _dataTable!: Promise<HaTabsSubpageDataTable>;\n\n  private get _extEntityConfigs(): EntityRowData[] {\n    const extEntityConfigs = memoize(\n      (\n        entityConfigs: LcnEntityConfig[] = this._entityConfigs,\n        entityRegistryEntries: EntityRegistryEntry[] = this._entityRegistryEntries,\n      ) =>\n        entityConfigs.map((entityConfig) => ({\n          ...entityConfig,\n          unique_id: createUniqueEntityId(entityConfig),\n          address_str: addressToString(entityConfig.address),\n          entityRegistryEntry: entityRegistryEntries.find(\n            (entry) =>\n              computeDomain(entry.entity_id) === entityConfig.domain &&\n              createUniqueEntityId(entityConfig, false) ===\n                entry.unique_id.split(\"-\").slice(1).join(\"-\"),\n          )!,\n        })),\n    );\n    return extEntityConfigs();\n  }\n\n  private _columns = memoize(\n    (): DataTableColumnContainer<EntityRowData> => ({\n      icon: {\n        title: \"\",\n        label: \"Icon\",\n        type: \"icon\",\n        showNarrow: true,\n        moveable: false,\n        template: (entry) =>\n          entry.entityRegistryEntry\n            ? entry.entityRegistryEntry.icon\n              ? html`<ha-icon .icon=${entry.entityRegistryEntry.icon}></ha-icon>`\n              : this.hass.states[entry.entityRegistryEntry.entity_id]\n                ? html`\n                    <ha-state-icon\n                      title=${ifDefined(\n                        this.hass.states[entry.entityRegistryEntry.entity_id].state,\n                      )}\n                      slot=\"item-icon\"\n                      .hass=${this.hass}\n                      .stateObj=${this.hass.states[entry.entityRegistryEntry.entity_id]}\n                    ></ha-state-icon>\n                  `\n                : html`<ha-domain-icon\n                    .domain=${computeDomain(entry.entityRegistryEntry.entity_id)}\n                  ></ha-domain-icon>`\n            : nothing,\n      },\n      name: {\n        main: true,\n        title: this.lcn.localize(\"name\"),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        flex: 2,\n        template: (entry) =>\n          entry.entityRegistryEntry\n            ? entry.entityRegistryEntry.name || entry.entityRegistryEntry.original_name!\n            : entry.name,\n      },\n      address_str: {\n        title: this.lcn.localize(\"address\"),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n      },\n      domain: {\n        title: this.lcn.localize(\"domain\"),\n        sortable: true,\n        filterable: true,\n      },\n      resource: {\n        title: this.lcn.localize(\"resource\"),\n        sortable: true,\n        filterable: true,\n        template: (entry) => getResource(entry.domain, entry.domain_data),\n      },\n      delete: {\n        title: this.lcn.localize(\"delete\"),\n        showNarrow: true,\n        moveable: false,\n        type: \"icon-button\",\n        template: (entry) => {\n          const handler = (_ev) => this._deleteEntities([entry]);\n          return html`\n            <ha-tooltip\n              content=${this.lcn.localize(\"dashboard-entities-table-delete\")}\n              distance=\"-5\"\n              placement=\"left\"\n            >\n              <ha-icon-button\n                id=${\"delete-entity-\" + entry.unique_id}\n                .label=${this.lcn.localize(\"dashboard-entities-table-delete\")}\n                .path=${mdiDelete}\n                @click=${handler}\n              ></ha-icon-button>\n            </ha-tooltip>\n          `;\n        },\n      },\n    }),\n  );\n\n  private _filteredEntities = memoize(\n    (\n      filters: DataTableFiltersValues,\n      filteredItems: DataTableFiltersItems,\n      entities: EntityRowData[],\n    ) => {\n      let filteredEntityConfigs = entities;\n\n      Object.entries(filters).forEach(([key, filter]) => {\n        if (key === \"lcn-filter-address\" && Array.isArray(filter) && filter.length) {\n          filteredEntityConfigs = filteredEntityConfigs.filter((entityConfig) =>\n            filter.includes(entityConfig.address_str),\n          );\n        }\n      });\n\n      Object.values(filteredItems).forEach((items) => {\n        if (items) {\n          filteredEntityConfigs = filteredEntityConfigs.filter((entityConfig) =>\n            items.has(entityConfig.unique_id),\n          );\n        }\n      });\n\n      return filteredEntityConfigs;\n    },\n  );\n\n  private _filterExpanded(ev) {\n    if (ev.detail.expanded) {\n      this._expandedFilter = ev.target.localName;\n    } else if (this._expandedFilter === ev.target.localName) {\n      this._expandedFilter = undefined;\n    }\n  }\n\n  private _filterChanged(ev) {\n    const type = ev.target.localName;\n\n    this._filters = { ...this._filters, [type]: ev.detail.value };\n    this._filteredItems = { ...this._filteredItems, [type]: ev.detail.items };\n\n    this._updateFilteredDevice();\n  }\n\n  private _updateFilteredDevice() {\n    let address: LcnAddress;\n    if (\n      \"lcn-filter-address\" in this._filters &&\n      this._filters[\"lcn-filter-address\"] &&\n      this._filters[\"lcn-filter-address\"][0]\n    ) {\n      address = stringToAddress(this._filters[\"lcn-filter-address\"][0]);\n    } else {\n      const filteredEntities = this._filteredEntities(\n        this._filters,\n        this._filteredItems,\n        this._extEntityConfigs,\n      );\n      if (filteredEntities.length === 0) {\n        this._deviceConfig = undefined;\n        return;\n      }\n      address = filteredEntities[0].address;\n    }\n    this._deviceConfig = this._deviceConfigs.find(\n      (deviceConfig) =>\n        deviceConfig.address[0] === address[0] &&\n        deviceConfig.address[1] === address[1] &&\n        deviceConfig.address[2] === address[2],\n    );\n  }\n\n  protected async firstUpdated(changedProperties: PropertyValues): Promise<void> {\n    super.firstUpdated(changedProperties);\n    loadLCNCreateEntityDialog();\n    updateEntityConfigs(this);\n    this._setFiltersFromUrl();\n  }\n\n  protected async updated(changedProperties: PropertyValues): Promise<void> {\n    super.updated(changedProperties);\n    this._dataTable.then(renderBrandLogo);\n  }\n\n  private _setFiltersFromUrl() {\n    const address = this._searchParms.get(\"address\");\n\n    if (!address && this._filters) {\n      this._filters = {};\n      return;\n    }\n\n    this._filter = history.state?.filter || \"\";\n\n    this._filters = {\n      \"lcn-filter-address\": address ? [address] : [],\n    };\n\n    this._updateFilteredDevice();\n  }\n\n  protected render() {\n    if (!(this.hass && this.lcn && this._deviceConfigs && this._entityConfigs)) {\n      return nothing;\n    }\n    const filteredEntities = this._filteredEntities(\n      this._filters,\n      this._filteredItems,\n      this._extEntityConfigs,\n    );\n\n    const hasFab = this._deviceConfigs.length > 0;\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/lcn/devices\"\n        noDataText=${this._deviceConfigs.length === 0\n          ? this.lcn.localize(\"dashboard-entities-no-data-text-devices\")\n          : this.lcn.localize(\"dashboard-entities-no-data-text-entities\")}\n        .route=${this.route}\n        .tabs=${lcnMainTabs}\n        .localizeFunc=${this.lcn.localize}\n        .columns=${this._columns()}\n        .data=${filteredEntities}\n        hasFilters\n        .filters=${Object.values(this._filters).filter((filter) =>\n          Array.isArray(filter)\n            ? filter.length\n            : filter &&\n              Object.values(filter).some((val) => (Array.isArray(val) ? val.length : val)),\n        ).length}\n        selectable\n        .selected=${this._selected.length}\n        .initialSorting=${this._activeSorting}\n        .columnOrder=${this._activeColumnOrder}\n        .hiddenColumns=${this._activeHiddenColumns}\n        @columns-changed=${this._handleColumnsChanged}\n        @sorting-changed=${this._handleSortingChanged}\n        @selection-changed=${this._handleSelectionChanged}\n        clickable\n        @clear-filter=${this._clearFilter}\n        .filter=${this._filter}\n        @search-changed=${this._handleSearchChange}\n        @row-click=${this._openEditEntry}\n        id=\"unique_id\"\n        .hasfab=${hasFab}\n        class=${this.narrow ? \"narrow\" : \"\"}\n      >\n        <div class=\"header-btns\" slot=\"selection-bar\">\n          ${!this.narrow\n            ? html`\n                <mwc-button @click=${this._deleteSelected} class=\"warning\">\n                  ${this.lcn.localize(\"delete-selected\")}\n                </mwc-button>\n              `\n            : html`\n                <ha-icon-button\n                  class=\"warning\"\n                  id=\"remove-btn\"\n                  @click=${this._deleteSelected}\n                  .path=${mdiDelete}\n                  .label=${this.lcn.localize(\"delete-selected\")}\n                ></ha-icon-button>\n                <ha-help-tooltip .label=${this.lcn.localize(\"delete-selected\")} )}>\n                </ha-help-tooltip>\n              `}\n        </div>\n\n        <lcn-filter-address\n          .hass=${this.hass}\n          .lcn=${this.lcn}\n          .value=${this._filters[\"lcn-filter-address\"]}\n          .deviceConfigs=${this._deviceConfigs}\n          @data-table-filter-changed=${this._filterChanged}\n          slot=\"filter-pane\"\n          .expanded=${this._expandedFilter === \"lcn-filter-address\"}\n          .narrow=${this.narrow}\n          @expanded-changed=${this._filterExpanded}\n        ></lcn-filter-address>\n\n        ${hasFab\n          ? html`\n              <ha-fab\n                slot=\"fab\"\n                @click=${this._addEntity}\n                .label=${this.lcn.localize(\"dashboard-entities-add\")}\n                extended\n              >\n                <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n              </ha-fab>\n            `\n          : nothing}\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _getEntityConfigByUniqueId(uniqueId: string): LcnEntityConfig {\n    const { address, domain, resource } = parseUniqueEntityId(uniqueId);\n    const entityConfig = this._entityConfigs.find(\n      (el) =>\n        el.address[0] === address[0] &&\n        el.address[1] === address[1] &&\n        el.address[2] === address[2] &&\n        el.domain === domain &&\n        getResource(el.domain, el.domain_data) === resource,\n    );\n    return entityConfig!;\n  }\n\n  private async _openEditEntry(ev: CustomEvent): Promise<void> {\n    const uniqueId = (ev.detail as RowClickedEvent).id;\n    const entityConfig = this._getEntityConfigByUniqueId(uniqueId);\n    const entityRegistryEntry = this._entityRegistryEntries.find(\n      (entry) =>\n        computeDomain(entry.entity_id) === entityConfig.domain &&\n        createUniqueEntityId(entityConfig, false) === entry.unique_id.split(\"-\").slice(1).join(\"-\"),\n    )!;\n\n    fireEvent(mainWindow.document.querySelector(\"home-assistant\")!, \"hass-more-info\", {\n      entityId: entityRegistryEntry.entity_id,\n    });\n  }\n\n  private async _addEntity() {\n    showLCNCreateEntityDialog(this, {\n      lcn: this.lcn,\n      deviceConfig: this._deviceConfig as LcnDeviceConfig | undefined,\n      createEntity: async (entityParams) => {\n        if (await addEntity(this.hass, this.lcn.config_entry, entityParams)) {\n          updateEntityConfigs(this);\n          return true;\n        }\n        return false;\n      },\n    });\n  }\n\n  private async _deleteSelected() {\n    const entities = this._selected.map((uniqueId) => this._getEntityConfigByUniqueId(uniqueId));\n    this._deleteEntities(entities);\n    this._clearSelection();\n  }\n\n  private async _deleteEntities(entities: LcnEntityConfig[]) {\n    if (entities.length === 0) return;\n    for await (const entity of entities) {\n      await deleteEntity(this.hass, this.lcn.config_entry, entity);\n    }\n    updateEntityConfigs(this);\n  }\n\n  private async _clearSelection() {\n    (await this._dataTable).clearSelection();\n  }\n\n  private _clearFilter() {\n    this._filters = {};\n    this._filteredItems = {};\n    this._updateFilteredDevice();\n  }\n\n  private _handleSortingChanged(ev: CustomEvent) {\n    this._activeSorting = ev.detail;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n    history.replaceState({ filter: this._filter }, \"\");\n  }\n\n  private _handleColumnsChanged(ev: CustomEvent) {\n    this._activeColumnOrder = ev.detail.columnOrder;\n    this._activeHiddenColumns = ev.detail.hiddenColumns;\n  }\n\n  private _handleSelectionChanged(ev: HASSDomEvent<SelectionChangedEvent>): void {\n    this._selected = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyle,\n      css`\n        hass-tabs-subpage-data-table {\n          --data-table-row-height: 60px;\n        }\n        hass-tabs-subpage-data-table.narrow {\n          --data-table-row-height: 72px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-entities-page\": LCNEntitiesPage;\n  }\n}\n"],"names":["atLeastVersion","version","major","minor","patch","haMajor","haMinor","haPatch","split","Number","undefined","Set","computeDomain","entityId","substring","indexOf","computeStateDomain","stateObj","entity_id","deviceTrackerIcon","state","compareState","attributes","source_type","includes","stateIcon","domain","updateIcon","has_date","has_time","updateIsInstalling","HaCheckListItem","CheckListItemBase","onChange","event","super","fireEvent","type","render","checkboxClasses","this","left","text","renderText","graphic","renderGraphic","nothing","meta","hasMeta","renderMeta","ripple","renderRipple","html","classMap","tabindex","selected","indeterminate","disabled","checkboxDisabled","args","styles","controlStyles","css","Boolean","attribute","HaDomainIcon","LitElement","icon","hass","_renderFallback","domainIcon","deviceClass","then","icn","until","FALLBACK_DOMAIN_ICONS","brandFallback","image","brandsUrl","darkOptimized","themes","darkMode","DEFAULT_DOMAIN_ICON","HaExpansionPanel","chevronIcon","noCollapse","expanded","_toggleContainer","_focusChanged","leftChevron","header","secondary","_handleTransitionEnd","_showContent","willUpdate","changedProps","has","setTimeout","_container","style","overflow","removeProperty","ev","defaultPrevented","key","preventDefault","newExpanded","nextRender","scrollHeight","height","shadowRoot","querySelector","classList","toggle","outlined","reflect","customIconsetsWindow","window","customIconsets","customIconsWindow","customIcons","Proxy","get","obj","prop","getIcon","TimeoutError","Error","constructor","timeout","params","captureStackTrace","name","message","iconMetadata","getStore","memoizeOne","iconStore","createStore","clear","set","MDI_PREFIXES","toRead","iconName","Promise","resolve","reject","push","length","iconStoreProm","promiseTimeout","ms","promise","_resolve","race","store","iconName_","resolve_","reject_","promisifyRequest","catch","e","readIcons","mdiDeprecatedIcons","chunks","debouncedWriteCache","debounce","keys","Object","iconsSets","all","values","forEach","icons","idx","entries","path","put","writeCache","cachedIcons","HaIcon","_path","_secondaryPath","_viewBox","_loadIcon","_legacy","requestedIcon","iconPrefix","origIconName","databaseIcon","customIcon","_setCustomPath","deprecatedIcon","newName","removeIn","console","warn","level","mdiHomeAssistant","_err","chunk","lastChunk","start","file","findIconChunk","_setPath","iconPromise","fetch","response","json","secondaryPath","viewBox","iconPack","HaStateIcon","overrideIcon","entities","entityIcon","stateValue","air_quality","alert","automation","calendar","mdiCalendar","climate","configurator","conversation","counter","date","datetime","mdiCalendarClock","demo","device_tracker","mdiAccount","google_assistant","mdiGoogleAssistant","group","mdiGoogleCirclesCommunities","homeassistant","homekit","mdiHomeAutomation","image_processing","mdiImageFilterFrames","mdiImage","input_boolean","mdiToggleSwitch","input_button","mdiButtonPointer","input_datetime","input_number","mdiRayVertex","input_select","mdiFormatListBulleted","input_text","mdiFormTextbox","lawn_mower","mdiRobotMower","light","mdiLightbulb","notify","mdiCommentAlert","number","persistent_notification","mdiBell","person","plant","mdiFlower","proximity","mdiAppleSafari","remote","mdiRemote","scene","mdiPalette","schedule","script","mdiScriptText","select","sensor","mdiEye","simple_alarm","siren","mdiBullhorn","stt","mdiMicrophoneMessage","sun","mdiWhiteBalanceSunny","time","mdiClock","timer","mdiTimerOutline","todo","mdiClipboardList","tts","mdiSpeakerMessage","vacuum","mdiRobotVacuum","wake_word","mdiChatSleep","weather","mdiWeatherPartlyCloudy","zone","mdiMapMarkerRadius","resources","entity","entity_component","services","domains","getHassIcons","category","integration","callWS","getPlatformIcons","force","isComponentLoaded","connection","haVersion","result","res","getComponentIcons","config","components","sortedRangeCache","WeakMap","getIconFromRange","value","range","rangeValues","map","filter","k","isNaN","sort","a","b","selectedThreshold","threshold","toString","getIconFromTranslations","translations","default","entry","getEntityIcon","platform","translation_key","device_class","platformIcons","entityComponentIcons","_","in_progress","HaConfigSection","narrow","isWide","fullWidth","vertical","horizontal","HaFilterDomains","_expandedWillChange","_expandedChanged","lcn","localize","mdiFilterVariantRemove","_clearFilter","_shouldRender","_filter","_handleSearchChange","_handleItemClick","_addresses","deviceConfigs","address","_addressRepr","lcnAddress","stringToAddress","updated","changed","renderRoot","clientHeight","detail","listItem","target","closest","val","items","toLowerCase","haStyleScrollbar","addresses","deviceConfig","add","addressToString","Array","from","stringCompare","locale","language","loadLCNCreateEntityDialog","showLCNCreateEntityDialog","element","lcnEntityDialogParams","dialogTag","dialogImport","dialogParams","mdiPlus","mdiDelete","getResource","domainName","domainData","resource","output","source","motor","setpoint","register","createUniqueEntityId","includeDomain","uniqueId","domain_data","parseUniqueEntityId","splitted","pop","LCNEntitiesPage","_extEntityConfigs","memoize","entityConfigs","_entityConfigs","entityRegistryEntries","_entityRegistryEntries","entityConfig","unique_id","address_str","entityRegistryEntry","find","slice","join","extEntityConfigs","_filterExpanded","_expandedFilter","localName","_filterChanged","_filters","_filteredItems","_updateFilteredDevice","filteredEntities","_filteredEntities","_deviceConfig","_deviceConfigs","firstUpdated","changedProperties","updateEntityConfigs","_setFiltersFromUrl","_dataTable","renderBrandLogo","_searchParms","history","hasFab","route","lcnMainTabs","_columns","isArray","some","_selected","_activeSorting","_activeColumnOrder","_activeHiddenColumns","_handleColumnsChanged","_handleSortingChanged","_handleSelectionChanged","_openEditEntry","_deleteSelected","_addEntity","_getEntityConfigByUniqueId","el","id","mainWindow","createEntity","addEntity","config_entry","entityParams","_deleteEntities","_clearSelection","deleteEntity","clearSelection","replaceState","columnOrder","hiddenColumns","haStyle","URLSearchParams","title","label","showNarrow","moveable","template","states","ifDefined","main","sortable","filterable","direction","flex","original_name","delete","_ev","filters","filteredItems","filteredEntityConfigs","context","deviceConfigsContext","subscribe","entityConfigsContext","fullEntitiesContext","storage"],"mappings":"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"}