{"version":3,"file":"YJ9TZDFH.js","mappings":";;;;AAcA;;;;;;;;;;;;;;;;;;;;ACaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;ACpEA;;AAEA;AAlBA;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA;;;;;;ACjJA;;;;AAKA;;ACNA;AACA;AACA;;AAGA;;ACYA;AACA;AACA;AACA;;AAEA;;AAKA;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;;ACgBA;;AAEA;;AAEA;AAEA;;;;;;;;;;;;;;;;;AAqFA;;AClIA;;;;;;;AAOA;AAIA;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;ACmBA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;AC5LA;;;;;;;;;;;;;;;;;;;;;;;;;ACKA;;ACGA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;AAUA;;;AAIA;;;AAGA;;AAIA;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;;AAoBA;;AAEA;;;AAGA;;AAGA;;;;;;;;;;;;;AC5DA;;ACUA;AACA;AACA;;AAEA;AACA;;;;;;;;;;AAUA;;AAGA;AACA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;AAqCA;;ACgQA;AACA;;;AAIA;AACA;AACA;AACA;;;AAGA;;;AAIA;;AAIA;AACA;;;;;;AAUA;;;AAGA;;;;;;;AAQA;AACA;AAEA;;;;AAKA;AAEA;;AA0BA;AACA;AACA;;AAMA;AAOA;AACA;;AAEA;;AAGA;;AAIA;AAEA;;AAEA;;;AAIA;;;;AAeA;AACA;AASA;AA5IA;;AAmHA;;;;AAKA;;;;;;;AA2BA;;AAsBA;;AAEA;AACA;AACA;AAMA;AAGA;;AAEA;;;;;;;AAQA;AACA;AACA;AACA;;;;AAIA;AAEA;;AAYA;AACA;AACA;AACA;AAWA;;AAMA;;AAKA;;AAqBA;;AAOA;;AA3GA;;;AAyNA;AACA;;;;AAIA;;;AAKA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0iBA;;;;AC9uCA;ACEA;AACA;;;AAGA;AACA;;;;AAKA;;;;;;;;AAoCA;;;;ACrEA;;;;;;;;;;;;;ACyCA;;;;ACnCA;AACA;AACA;;AAEA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;ACNA;;AAEA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;;;AAIA;;;;AA4BA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;AAGA;AAEA;AACA;AAEA;;;;;;AAQA;;;AAKA;;;;;AAMA;;AAGA;AACA;;;;;AAKA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuLA;;AClJA;AACA;AACA;;AAEA;;AAEA;AAGA;;AAOA;AACA;AACA;;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;;AAOA;;;;AAIA;;;AAGA;;AAMA;;AAMA;;AAEA;;AAEA;;AAKA;AACA;;AAvSA;AA4SA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;AACA;AACA;;;;AAMA;;;;;AAOA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;;;AAIA;AACA;;;AAGA;;;;;AAOA;AACA;;;AAGA;;;;AAMA;AAEA;AAGA;;;;;AAMA;AAEA;;;AAMA;;AAIA;;;;AAIA;;;AAGA;AAEA;AACA;AACA;AAGA;;;;;AAMA;AAEA;AAEA;AACA;;;AAIA;;;AAIA;;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAcA;AAGA;AAjBA;;;;AAKA;;;;;;;;;AAkBA;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;;;;AArfA;;AA2fA;;;AAGA;AACA;;;;AA/fA;;AAqgBA;;;;AAIA;;AAIA;AACA;;AAEA;AACA;;AAEA;;;AAIA;;AAIA;AAEA;;AAEA;;AAIA;;AAGA;;;;;AAKA;AACA;AACA;;;AAKA;;AAEA;;AAGA;AACA;AACA;AAGA;;;;;;AAOA;AACA;;;AAKA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwTA;;;;;;;;;;;;ACt3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;;;;;;;;;;;;;;;;AAmBA","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-checkbox.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-dialog-header.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-dialog.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-fab.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-icon-button-arrow-prev.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-icon-button.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-md-menu-item.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-menu-button.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-svg-icon.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-textfield.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-outlined-field.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-outlined-text-field.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/search-input-outlined.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/chips/ha-assist-chip.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/chips/ha-filter-chip.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/search-input.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/data-table/ha-data-table.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-menu.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-md-button-menu.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-md-divider.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-ripple.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-tab.ts","webpack://lcn-frontend/./homeassistant-frontend/src/layouts/hass-tabs-subpage.ts","webpack://lcn-frontend/./homeassistant-frontend/src/layouts/hass-tabs-subpage-data-table.ts","webpack://lcn-frontend/./homeassistant-frontend/src/resources/styles.ts"],"sourcesContent":["import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-dialog-header\")\nexport class HaDialogHeader extends LitElement {\n  protected render() {\n    return html`\n      <header class=\"header\">\n        <div class=\"header-bar\">\n          <section class=\"header-navigation-icon\">\n            <slot name=\"navigationIcon\"></slot>\n          </section>\n          <section class=\"header-content\">\n            <div class=\"header-title\">\n              <slot name=\"title\"></slot>\n            </div>\n            <div class=\"header-subtitle\">\n              <slot name=\"subtitle\"></slot>\n            </div>\n          </section>\n          <section class=\"header-action-items\">\n            <slot name=\"actionItems\"></slot>\n          </section>\n        </div>\n        <slot></slot>\n      </header>\n    `;\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n        :host([show-border]) {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n        .header-bar {\n          display: flex;\n          flex-direction: row;\n          align-items: flex-start;\n          padding: 4px;\n          box-sizing: border-box;\n        }\n        .header-content {\n          flex: 1;\n          padding: 10px 4px;\n          min-width: 0;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n        .header-title {\n          font-size: 22px;\n          line-height: 28px;\n          font-weight: 400;\n        }\n        .header-subtitle {\n          font-size: 14px;\n          line-height: 20px;\n          color: var(--secondary-text-color);\n        }\n        @media all and (min-width: 450px) and (min-height: 500px) {\n          .header-bar {\n            padding: 12px;\n          }\n        }\n        .header-navigation-icon {\n          flex: none;\n          min-width: 8px;\n          height: 100%;\n          display: flex;\n          flex-direction: row;\n        }\n        .header-action-items {\n          flex: none;\n          min-width: 8px;\n          height: 100%;\n          display: flex;\n          flex-direction: row;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-header\": HaDialogHeader;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { css, html } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\", \"ha-list-item\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant | undefined,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">\n    <span>${title}</span>\n    <ha-icon-button\n      .label=${hass?.localize(\"ui.dialogs.generic.close\") ?? \"Close\"}\n      .path=${mdiClose}\n      dialogAction=\"close\"\n      class=\"header_button\"\n    ></ha-icon-button>\n  </div>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll, {\n      passive: true,\n    });\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host([scrolled]) ::slotted(ha-dialog-header) {\n        border-bottom: 1px solid\n          var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n      }\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 8);\n        -webkit-backdrop-filter: var(\n          --ha-dialog-scrim-backdrop-filter,\n          var(--dialog-backdrop-filter, none)\n        );\n        backdrop-filter: var(\n          --ha-dialog-scrim-backdrop-filter,\n          var(--dialog-backdrop-filter, none)\n        );\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 12px 24px 12px 24px;\n      }\n      .mdc-dialog__title::before {\n        content: unset;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n        -webkit-backdrop-filter: var(--ha-dialog-surface-backdrop-filter, none);\n        backdrop-filter: var(--ha-dialog-surface-backdrop-filter, none);\n        background: var(\n          --ha-dialog-surface-background,\n          var(--mdc-theme-surface, #fff)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_title {\n        position: relative;\n        padding-right: 40px;\n        padding-inline-end: 40px;\n        padding-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_title span {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        display: block;\n      }\n      .header_button {\n        position: absolute;\n        right: -12px;\n        top: -12px;\n        text-decoration: none;\n        color: inherit;\n        inset-inline-start: initial;\n        inset-inline-end: -12px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FabBase } from \"@material/mwc-fab/mwc-fab-base\";\nimport { styles } from \"@material/mwc-fab/mwc-fab.css\";\nimport { customElement } from \"lit/decorators\";\nimport { css } from \"lit\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\n\n@customElement(\"ha-fab\")\nexport class HaFab extends FabBase {\n  protected firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host .mdc-fab--extended .mdc-fab__icon {\n        margin-inline-start: -8px;\n        margin-inline-end: 12px;\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    mainWindow.document.dir === \"rtl\"\n      ? css`\n          :host .mdc-fab--extended .mdc-fab__icon {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { mdiArrowLeft, mdiArrowRight } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-icon-button-arrow-prev\")\nexport class HaIconButtonArrowPrev extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public label?: string;\n\n  @state() private _icon =\n    mainWindow.document.dir === \"rtl\" ? mdiArrowRight : mdiArrowLeft;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-icon-button\n        .disabled=${this.disabled}\n        .label=${this.label || this.hass?.localize(\"ui.common.back\") || \"Back\"}\n        .path=${this._icon}\n      ></ha-icon-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button-arrow-prev\": HaIconButtonArrowPrev;\n  }\n}\n","import \"@material/mwc-icon-button\";\nimport type { IconButton } from \"@material/mwc-icon-button\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  // SVG icon path (if you need a non SVG icon instead, use the provided slot to pass an <ha-icon> in)\n  @property({ type: String }) path?: string;\n\n  // Label that is used for ARIA support and as tooltip\n  @property({ type: String }) label?: string;\n\n  // These should always be set as properties, not attributes,\n  // so that only the <button> element gets the attribute\n  @property({ type: String, attribute: \"aria-haspopup\" })\n  override ariaHasPopup!: IconButton[\"ariaHasPopup\"];\n\n  @property({ type: Boolean }) hideTitle = false;\n\n  @query(\"mwc-icon-button\", true) private _button?: IconButton;\n\n  public override focus() {\n    this._button?.focus();\n  }\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button\n        aria-label=${ifDefined(this.label)}\n        title=${ifDefined(this.hideTitle ? undefined : this.label)}\n        aria-haspopup=${ifDefined(this.ariaHasPopup)}\n        .disabled=${this.disabled}\n      >\n        ${this.path\n          ? html`<ha-svg-icon .path=${this.path}></ha-svg-icon>`\n          : html`<slot></slot>`}\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import { MdMenuItem } from \"@material/web/menu/menu-item\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-md-menu-item\")\nexport class HaMdMenuItem extends MdMenuItem {\n  @property({ attribute: false }) clickAction?: (item?: HTMLElement) => void;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --ha-icon-display: block;\n        --md-sys-color-primary: var(--primary-text-color);\n        --md-sys-color-on-primary: var(--primary-text-color);\n        --md-sys-color-secondary: var(--secondary-text-color);\n        --md-sys-color-surface: var(--card-background-color);\n        --md-sys-color-on-surface: var(--primary-text-color);\n        --md-sys-color-on-surface-variant: var(--secondary-text-color);\n        --md-sys-color-secondary-container: rgba(\n          var(--rgb-primary-color),\n          0.15\n        );\n        --md-sys-color-on-secondary-container: var(--text-primary-color);\n        --mdc-icon-size: 16px;\n\n        --md-sys-color-on-primary-container: var(--primary-text-color);\n        --md-sys-color-on-secondary-container: var(--primary-text-color);\n        --md-menu-item-label-text-font: Roboto, sans-serif;\n      }\n      :host(.warning) {\n        --md-menu-item-label-text-color: var(--error-color);\n        --md-menu-item-leading-icon-color: var(--error-color);\n      }\n      ::slotted([slot=\"headline\"]) {\n        text-wrap: nowrap;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-md-menu-item\": HaMdMenuItem;\n  }\n}\n","import { mdiMenu } from \"@mdi/js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { subscribeNotifications } from \"../data/persistent_notification\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-menu-button\")\nclass HaMenuButton extends LitElement {\n  @property({ type: Boolean }) public hassio = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _hasNotifications = false;\n\n  @state() private _show = false;\n\n  private _alwaysVisible = false;\n\n  private _attachNotifOnConnect = false;\n\n  private _unsubNotifications?: UnsubscribeFunc;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this._attachNotifOnConnect) {\n      this._attachNotifOnConnect = false;\n      this._subscribeNotifications();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubNotifications) {\n      this._attachNotifOnConnect = true;\n      this._unsubNotifications();\n      this._unsubNotifications = undefined;\n    }\n  }\n\n  protected render() {\n    if (!this._show) {\n      return nothing;\n    }\n    const hasNotifications =\n      this._hasNotifications &&\n      (this.narrow || this.hass.dockedSidebar === \"always_hidden\");\n    return html`\n      <ha-icon-button\n        .label=${this.hass.localize(\"ui.sidebar.sidebar_toggle\")}\n        .path=${mdiMenu}\n        @click=${this._toggleMenu}\n      ></ha-icon-button>\n      ${hasNotifications ? html`<div class=\"dot\"></div>` : \"\"}\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (!this.hassio) {\n      return;\n    }\n    // This component is used on Hass.io too, but Hass.io might run the UI\n    // on older frontends too, that don't have an always visible menu button\n    // in the sidebar.\n    this._alwaysVisible =\n      (Number((window.parent as any).frontendVersion) || 0) < 20190710;\n  }\n\n  protected willUpdate(changedProps) {\n    super.willUpdate(changedProps);\n\n    if (!changedProps.has(\"narrow\") && !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.has(\"hass\")\n      ? (changedProps.get(\"hass\") as HomeAssistant | undefined)\n      : this.hass;\n    const oldNarrow = changedProps.has(\"narrow\")\n      ? (changedProps.get(\"narrow\") as boolean | undefined)\n      : this.narrow;\n\n    const oldShowButton =\n      oldNarrow || oldHass?.dockedSidebar === \"always_hidden\";\n    const showButton =\n      this.narrow || this.hass.dockedSidebar === \"always_hidden\";\n\n    if (this.hasUpdated && oldShowButton === showButton) {\n      return;\n    }\n\n    this._show = showButton || this._alwaysVisible;\n\n    if (!showButton) {\n      if (this._unsubNotifications) {\n        this._unsubNotifications();\n        this._unsubNotifications = undefined;\n      }\n      return;\n    }\n\n    this._subscribeNotifications();\n  }\n\n  private _subscribeNotifications() {\n    if (this._unsubNotifications) {\n      throw new Error(\"Already subscribed\");\n    }\n    this._unsubNotifications = subscribeNotifications(\n      this.hass.connection,\n      (notifications) => {\n        this._hasNotifications = notifications.length > 0;\n      }\n    );\n  }\n\n  private _toggleMenu(): void {\n    fireEvent(this, \"hass-toggle-menu\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        position: relative;\n      }\n      .dot {\n        pointer-events: none;\n        position: absolute;\n        background-color: var(--accent-color);\n        width: 12px;\n        height: 12px;\n        top: 9px;\n        right: 7px;\n        inset-inline-end: 7px;\n        inset-inline-start: initial;\n        border-radius: 50%;\n        border: 2px solid var(--app-header-background-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-menu-button\": HaMenuButton;\n  }\n}\n","import type { CSSResultGroup, SVGTemplateResult } from \"lit\";\nimport { css, LitElement, nothing, svg } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-svg-icon\")\nexport class HaSvgIcon extends LitElement {\n  @property() public path?: string;\n\n  @property() public secondaryPath?: string;\n\n  @property() public viewBox?: string;\n\n  protected render(): SVGTemplateResult {\n    return svg`\n    <svg\n      viewBox=${this.viewBox || \"0 0 24 24\"}\n      preserveAspectRatio=\"xMidYMid meet\"\n      focusable=\"false\"\n      role=\"img\"\n      aria-hidden=\"true\"\n    >\n      <g>\n        ${\n          this.path\n            ? svg`<path class=\"primary-path\" d=${this.path}></path>`\n            : nothing\n        }\n        ${\n          this.secondaryPath\n            ? svg`<path class=\"secondary-path\" d=${this.secondaryPath}></path>`\n            : nothing\n        }\n      </g>\n    </svg>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: var(--ha-icon-display, inline-flex);\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        vertical-align: middle;\n        fill: var(--icon-primary-color, currentcolor);\n        width: var(--mdc-icon-size, 24px);\n        height: var(--mdc-icon-size, 24px);\n      }\n      svg {\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        display: block;\n      }\n      path.primary-path {\n        opacity: var(--icon-primary-opactity, 1);\n      }\n      path.secondary-path {\n        fill: var(--icon-secondary-color, currentcolor);\n        opacity: var(--icon-secondary-opactity, 0.5);\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-svg-icon\": HaSvgIcon;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport type { TemplateResult, PropertyValues } from \"lit\";\nimport { html, css } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon = false;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing = false;\n\n  @property() public autocomplete?: string;\n\n  @property() public autocorrect?: string;\n\n  @property({ attribute: \"input-spellcheck\" })\n  public inputSpellcheck?: string;\n\n  @query(\"input\") public formElement!: HTMLInputElement;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      changedProperties.has(\"invalid\") ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid\n          ? this.errorMessage || this.validationMessage || \"Invalid\"\n          : \"\"\n      );\n      if (\n        this.invalid ||\n        this.validateOnInitialRender ||\n        (changedProperties.has(\"invalid\") &&\n          changedProperties.get(\"invalid\") !== undefined)\n      ) {\n        // Only report validity if the field is invalid or the invalid state has changed from\n        // true to false to prevent setting empty required fields to invalid on first render\n        this.reportValidity();\n      }\n    }\n    if (changedProperties.has(\"autocomplete\")) {\n      if (this.autocomplete) {\n        this.formElement.setAttribute(\"autocomplete\", this.autocomplete);\n      } else {\n        this.formElement.removeAttribute(\"autocomplete\");\n      }\n    }\n    if (changedProperties.has(\"autocorrect\")) {\n      if (this.autocorrect) {\n        this.formElement.setAttribute(\"autocorrect\", this.autocorrect);\n      } else {\n        this.formElement.removeAttribute(\"autocorrect\");\n      }\n    }\n    if (changedProperties.has(\"inputSpellcheck\")) {\n      if (this.inputSpellcheck) {\n        this.formElement.setAttribute(\"spellcheck\", this.inputSpellcheck);\n      } else {\n        this.formElement.removeAttribute(\"spellcheck\");\n      }\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: ltr;\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon {\n        padding-left: var(--text-field-suffix-padding-left, 0px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n      }\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__icon--trailing {\n        padding: var(--textfield-icon-trailing-padding, 12px);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Edge, hide reveal password icon */\n      ::-ms-reveal {\n        display: none;\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(\n          100% - 48px - var(--text-field-suffix-padding-left, 0px)\n        );\n        inset-inline-start: calc(\n          48px + var(--text-field-suffix-padding-left, 0px)\n        ) !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n      .mdc-text-field__affix--prefix {\n        padding-right: var(--text-field-prefix-padding-right, 2px);\n        padding-inline-end: var(--text-field-prefix-padding-right, 2px);\n        padding-inline-start: initial;\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--prefix {\n        color: var(--mdc-text-field-label-ink-color);\n      }\n    `,\n    // safari workaround - must be explicit\n    mainWindow.document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n            --direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import { MdOutlinedField } from \"@material/web/field/outlined-field\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { literal } from \"lit/static-html\";\n\n@customElement(\"ha-outlined-field\")\nexport class HaOutlinedField extends MdOutlinedField {\n  protected readonly fieldTag = literal`ha-outlined-field`;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      .container::before {\n        display: block;\n        content: \"\";\n        position: absolute;\n        inset: 0;\n        background-color: var(--ha-outlined-field-container-color, transparent);\n        opacity: var(--ha-outlined-field-container-opacity, 1);\n        border-start-start-radius: var(--_container-shape-start-start);\n        border-start-end-radius: var(--_container-shape-start-end);\n        border-end-start-radius: var(--_container-shape-end-start);\n        border-end-end-radius: var(--_container-shape-end-end);\n      }\n      .with-start .start {\n        margin-inline-end: var(--ha-outlined-field-start-margin, 4px);\n        margin-inline-start: initial;\n      }\n      .with-end .end {\n        margin-inline-start: var(--ha-outlined-field-end-margin, 4px);\n        margin-inline-end: initial;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-outlined-field\": HaOutlinedField;\n  }\n}\n","import { MdOutlinedTextField } from \"@material/web/textfield/outlined-text-field\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { literal } from \"lit/static-html\";\nimport \"./ha-outlined-field\";\n\n@customElement(\"ha-outlined-text-field\")\nexport class HaOutlinedTextField extends MdOutlinedTextField {\n  protected readonly fieldTag = literal`ha-outlined-field`;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-on-surface: var(--primary-text-color);\n        --md-sys-color-primary: var(--primary-text-color);\n        --md-outlined-text-field-input-text-color: var(--primary-text-color);\n        --md-sys-color-on-surface-variant: var(--secondary-text-color);\n        --md-outlined-field-outline-color: var(--outline-color);\n        --md-outlined-field-focus-outline-color: var(--primary-color);\n        --md-outlined-field-hover-outline-color: var(--outline-hover-color);\n      }\n      :host([dense]) {\n        --md-outlined-field-top-space: 5.5px;\n        --md-outlined-field-bottom-space: 5.5px;\n        --md-outlined-field-container-shape-start-start: 10px;\n        --md-outlined-field-container-shape-start-end: 10px;\n        --md-outlined-field-container-shape-end-end: 10px;\n        --md-outlined-field-container-shape-end-start: 10px;\n        --md-outlined-field-focus-outline-width: 1px;\n        --ha-outlined-field-start-margin: -4px;\n        --ha-outlined-field-end-margin: -4px;\n        --mdc-icon-size: var(--md-input-chip-icon-size, 18px);\n      }\n      .input {\n        font-family: Roboto, sans-serif;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-outlined-text-field\": HaOutlinedTextField;\n  }\n}\n","import { mdiClose, mdiMagnify } from \"@mdi/js\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\nimport \"./ha-outlined-text-field\";\nimport type { HaOutlinedTextField } from \"./ha-outlined-text-field\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"search-input-outlined\")\nclass SearchInputOutlined extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter?: string;\n\n  @property({ type: Boolean })\n  public suffix = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  @property({ type: String })\n  public label?: string;\n\n  @property({ type: String })\n  public placeholder?: string;\n\n  public focus() {\n    this._input?.focus();\n  }\n\n  @query(\"ha-outlined-text-field\", true) private _input!: HaOutlinedTextField;\n\n  protected render(): TemplateResult {\n    const placeholder =\n      this.placeholder || this.hass.localize(\"ui.common.search\");\n\n    return html`\n      <ha-outlined-text-field\n        .autofocus=${this.autofocus}\n        .aria-label=${this.label || this.hass.localize(\"ui.common.search\")}\n        .placeholder=${placeholder}\n        .value=${this.filter || \"\"}\n        icon\n        .iconTrailing=${this.filter || this.suffix}\n        @input=${this._filterInputChanged}\n        dense\n      >\n        <slot name=\"prefix\" slot=\"leading-icon\">\n          <ha-svg-icon\n            tabindex=\"-1\"\n            class=\"prefix\"\n            .path=${mdiMagnify}\n          ></ha-svg-icon>\n        </slot>\n        ${this.filter\n          ? html`<ha-icon-button\n              aria-label=\"Clear input\"\n              slot=\"trailing-icon\"\n              @click=${this._clearSearch}\n              .path=${mdiClose}\n            >\n            </ha-icon-button>`\n          : nothing}\n      </ha-outlined-text-field>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-flex;\n        /* For iOS */\n        z-index: 0;\n        --mdc-icon-button-size: 24px;\n      }\n      ha-outlined-text-field {\n        display: block;\n        width: 100%;\n        --ha-outlined-field-container-color: var(--card-background-color);\n      }\n      ha-svg-icon,\n      ha-icon-button {\n        display: flex;\n        color: var(--primary-text-color);\n      }\n      ha-svg-icon {\n        outline: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input-outlined\": SearchInputOutlined;\n  }\n}\n","import { MdAssistChip } from \"@material/web/chips/assist-chip\";\nimport { css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-assist-chip\")\n// @ts-ignore\nexport class HaAssistChip extends MdAssistChip {\n  @property({ type: Boolean, reflect: true }) filled = false;\n\n  @property({ type: Boolean }) active = false;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-primary: var(--primary-text-color);\n        --md-sys-color-on-surface: var(--primary-text-color);\n        --md-assist-chip-container-shape: var(\n          --ha-assist-chip-container-shape,\n          16px\n        );\n        --md-assist-chip-outline-color: var(--outline-color);\n        --md-assist-chip-label-text-weight: 400;\n      }\n      /** Material 3 doesn't have a filled chip, so we have to make our own **/\n      .filled {\n        display: flex;\n        pointer-events: none;\n        border-radius: inherit;\n        inset: 0;\n        position: absolute;\n        background-color: var(--ha-assist-chip-filled-container-color);\n      }\n      /** Set the size of mdc icons **/\n      ::slotted([slot=\"icon\"]),\n      ::slotted([slot=\"trailingIcon\"]) {\n        display: flex;\n        --mdc-icon-size: var(--md-input-chip-icon-size, 18px);\n      }\n\n      .trailing.icon ::slotted(*),\n      .trailing.icon svg {\n        margin-inline-end: unset;\n        margin-inline-start: var(--_icon-label-space);\n      }\n      ::before {\n        background: var(--ha-assist-chip-container-color, transparent);\n        opacity: var(--ha-assist-chip-container-opacity, 1);\n      }\n      :where(.active)::before {\n        background: var(--ha-assist-chip-active-container-color);\n        opacity: var(--ha-assist-chip-active-container-opacity);\n      }\n      .label {\n        font-family: Roboto, sans-serif;\n      }\n    `,\n  ];\n\n  protected override renderOutline() {\n    if (this.filled) {\n      return html`<span class=\"filled\"></span>`;\n    }\n\n    return super.renderOutline();\n  }\n\n  protected override getContainerClasses() {\n    return {\n      ...super.getContainerClasses(),\n      active: this.active,\n    };\n  }\n\n  protected override renderPrimaryContent() {\n    return html`\n      <span class=\"leading icon\" aria-hidden=\"true\">\n        ${this.renderLeadingIcon()}\n      </span>\n      <span class=\"label\">${this.label}</span>\n      <span class=\"touch\"></span>\n      <span class=\"trailing leading icon\" aria-hidden=\"true\">\n        ${this.renderTrailingIcon()}\n      </span>\n    `;\n  }\n\n  protected renderTrailingIcon() {\n    return html`<slot name=\"trailing-icon\"></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-assist-chip\": HaAssistChip;\n  }\n}\n","import { MdFilterChip } from \"@material/web/chips/filter-chip\";\nimport { css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-filter-chip\")\nexport class HaFilterChip extends MdFilterChip {\n  @property({ type: Boolean, reflect: true, attribute: \"no-leading-icon\" })\n  noLeadingIcon = false;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-primary: var(--primary-text-color);\n        --md-sys-color-on-surface: var(--primary-text-color);\n        --md-sys-color-on-surface-variant: var(--primary-text-color);\n        --md-sys-color-on-secondary-container: var(--primary-text-color);\n        --md-filter-chip-container-shape: 16px;\n        --md-filter-chip-outline-color: var(--outline-color);\n        --md-filter-chip-selected-container-color: rgba(\n          var(--rgb-primary-text-color),\n          0.15\n        );\n      }\n    `,\n  ];\n\n  protected renderLeadingIcon() {\n    if (this.noLeadingIcon) {\n      // eslint-disable-next-line lit/prefer-nothing\n      return html``;\n    }\n    return super.renderLeadingIcon();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-filter-chip\": HaFilterChip;\n  }\n}\n","import { mdiClose, mdiMagnify } from \"@mdi/js\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\nimport \"./ha-textfield\";\nimport type { HaTextField } from \"./ha-textfield\";\nimport type { HomeAssistant } from \"../types\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter?: string;\n\n  @property({ type: Boolean })\n  public suffix = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  @property({ type: String })\n  public label?: string;\n\n  public focus() {\n    this._input?.focus();\n  }\n\n  @query(\"ha-textfield\", true) private _input!: HaTextField;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-textfield\n        .autofocus=${this.autofocus}\n        .label=${this.label || this.hass.localize(\"ui.common.search\")}\n        .value=${this.filter || \"\"}\n        icon\n        .iconTrailing=${this.filter || this.suffix}\n        @input=${this._filterInputChanged}\n      >\n        <slot name=\"prefix\" slot=\"leadingIcon\">\n          <ha-svg-icon\n            tabindex=\"-1\"\n            class=\"prefix\"\n            .path=${mdiMagnify}\n          ></ha-svg-icon>\n        </slot>\n        <div class=\"trailing\" slot=\"trailingIcon\">\n          ${this.filter &&\n          html`\n            <ha-icon-button\n              @click=${this._clearSearch}\n              .label=${this.hass.localize(\"ui.common.clear\")}\n              .path=${mdiClose}\n              class=\"clear-button\"\n            ></ha-icon-button>\n          `}\n          <slot name=\"suffix\"></slot>\n        </div>\n      </ha-textfield>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-flex;\n      }\n      ha-svg-icon,\n      ha-icon-button {\n        color: var(--primary-text-color);\n      }\n      ha-svg-icon {\n        outline: none;\n      }\n      .clear-button {\n        --mdc-icon-size: 20px;\n      }\n      ha-textfield {\n        display: inherit;\n      }\n      .trailing {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","import { mdiArrowDown, mdiArrowUp, mdiChevronUp } from \"@mdi/js\";\nimport deepClone from \"deep-clone-simple\";\nimport type { CSSResultGroup, PropertyValues, TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport {\n  customElement,\n  eventOptions,\n  property,\n  query,\n  state,\n} from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { restoreScroll } from \"../../common/decorators/restore-scroll\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport { debounce } from \"../../common/util/debounce\";\nimport { groupBy } from \"../../common/util/group-by\";\nimport { haStyleScrollbar } from \"../../resources/styles\";\nimport { loadVirtualizer } from \"../../resources/virtualizer\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-checkbox\";\nimport type { HaCheckbox } from \"../ha-checkbox\";\nimport \"../ha-svg-icon\";\nimport \"../search-input\";\nimport { filterData, sortData } from \"./sort-filter\";\nimport type { LocalizeFunc } from \"../../common/translations/localize\";\nimport { nextRender } from \"../../common/util/render-status\";\n\nexport interface RowClickedEvent {\n  id: string;\n}\n\nexport interface SelectionChangedEvent {\n  value: string[];\n}\n\nexport interface CollapsedChangedEvent {\n  value: string[];\n}\n\nexport interface SortingChangedEvent {\n  column: string;\n  direction: SortingDirection;\n}\n\nexport type SortingDirection = \"desc\" | \"asc\" | null;\n\nexport interface DataTableColumnContainer<T = any> {\n  [key: string]: DataTableColumnData<T>;\n}\n\nexport interface DataTableSortColumnData {\n  sortable?: boolean;\n  filterable?: boolean;\n  filterKey?: string;\n  valueColumn?: string;\n  direction?: SortingDirection;\n  groupable?: boolean;\n  moveable?: boolean;\n  hideable?: boolean;\n  defaultHidden?: boolean;\n  showNarrow?: boolean;\n}\n\nexport interface DataTableColumnData<T = any> extends DataTableSortColumnData {\n  main?: boolean;\n  title: TemplateResult | string;\n  label?: TemplateResult | string;\n  type?:\n    | \"numeric\"\n    | \"icon\"\n    | \"icon-button\"\n    | \"overflow\"\n    | \"overflow-menu\"\n    | \"flex\";\n  template?: (row: T) => TemplateResult | string | typeof nothing;\n  extraTemplate?: (row: T) => TemplateResult | string | typeof nothing;\n  minWidth?: string;\n  maxWidth?: string;\n  flex?: number;\n  forceLTR?: boolean;\n  hidden?: boolean;\n}\n\nexport type ClonedDataTableColumnData = Omit<DataTableColumnData, \"title\"> & {\n  title?: TemplateResult | string;\n};\n\nexport interface DataTableRowData {\n  [key: string]: any;\n  selectable?: boolean;\n}\n\nexport interface SortableColumnContainer {\n  [key: string]: ClonedDataTableColumnData;\n}\n\nconst UNDEFINED_GROUP_KEY = \"zzzzz_undefined\";\n\n@customElement(\"ha-data-table\")\nexport class HaDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public localizeFunc?: LocalizeFunc;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  @property({ type: Boolean }) public selectable = false;\n\n  @property({ type: Boolean }) public clickable = false;\n\n  @property({ type: Boolean }) public hasFab = false;\n\n  /**\n   * Add an extra row at the bottom of the data table\n   * @type {TemplateResult}\n   */\n  @property({ attribute: false }) public appendRow?;\n\n  @property({ type: Boolean, attribute: \"auto-height\" })\n  public autoHeight = false;\n\n  @property({ type: String }) public id = \"id\";\n\n  @property({ type: String }) public noDataText?: string;\n\n  @property({ type: String }) public searchLabel?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: String }) public filter = \"\";\n\n  @property() public groupColumn?: string;\n\n  @property({ attribute: false }) public groupOrder?: string[];\n\n  @property() public sortColumn?: string;\n\n  @property() public sortDirection: SortingDirection = null;\n\n  @property({ attribute: false }) public initialCollapsedGroups?: string[];\n\n  @property({ attribute: false }) public hiddenColumns?: string[];\n\n  @property({ attribute: false }) public columnOrder?: string[];\n\n  @state() private _filterable = false;\n\n  @state() private _filter = \"\";\n\n  @state() private _filteredData: DataTableRowData[] = [];\n\n  @state() private _headerHeight = 0;\n\n  @query(\"slot[name='header']\") private _header!: HTMLSlotElement;\n\n  @state() private _collapsedGroups: string[] = [];\n\n  private _checkableRowsCount?: number;\n\n  private _checkedRows: string[] = [];\n\n  private _sortColumns: SortableColumnContainer = {};\n\n  private _curRequest = 0;\n\n  private _lastUpdate = 0;\n\n  // @ts-ignore\n  @restoreScroll(\".scroller\") private _savedScrollPos?: number;\n\n  private _debounceSearch = debounce(\n    (value: string) => {\n      this._filter = value;\n    },\n    100,\n    false\n  );\n\n  public clearSelection(): void {\n    this._checkedRows = [];\n    this._checkedRowsChanged();\n  }\n\n  public selectAll(): void {\n    this._checkedRows = this._filteredData\n      .filter((data) => data.selectable !== false)\n      .map((data) => data[this.id]);\n    this._checkedRowsChanged();\n  }\n\n  public select(ids: string[], clear?: boolean): void {\n    if (clear) {\n      this._checkedRows = [];\n    }\n    ids.forEach((id) => {\n      const row = this._filteredData.find((data) => data[this.id] === id);\n      if (row?.selectable !== false && !this._checkedRows.includes(id)) {\n        this._checkedRows.push(id);\n      }\n    });\n    this._checkedRowsChanged();\n  }\n\n  public unselect(ids: string[]): void {\n    ids.forEach((id) => {\n      const index = this._checkedRows.indexOf(id);\n      if (index > -1) {\n        this._checkedRows.splice(index, 1);\n      }\n    });\n    this._checkedRowsChanged();\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this._filteredData.length) {\n      // Force update of location of rows\n      this._filteredData = [...this._filteredData];\n    }\n  }\n\n  protected firstUpdated() {\n    this.updateComplete.then(() => this._calcTableHeight());\n  }\n\n  protected updated() {\n    const header = this.renderRoot.querySelector(\".mdc-data-table__header-row\");\n    if (!header) {\n      return;\n    }\n    if (header.scrollWidth > header.clientWidth) {\n      this.style.setProperty(\"--table-row-width\", `${header.scrollWidth}px`);\n    } else {\n      this.style.removeProperty(\"--table-row-width\");\n    }\n  }\n\n  public willUpdate(properties: PropertyValues) {\n    super.willUpdate(properties);\n\n    if (!this.hasUpdated) {\n      loadVirtualizer();\n    }\n\n    if (properties.has(\"columns\")) {\n      this._filterable = Object.values(this.columns).some(\n        (column) => column.filterable\n      );\n\n      if (!this.sortColumn) {\n        for (const columnId in this.columns) {\n          if (this.columns[columnId].direction) {\n            this.sortDirection = this.columns[columnId].direction!;\n            this.sortColumn = columnId;\n\n            fireEvent(this, \"sorting-changed\", {\n              column: columnId,\n              direction: this.sortDirection,\n            });\n\n            break;\n          }\n        }\n      }\n\n      const clonedColumns: DataTableColumnContainer = deepClone(this.columns);\n      Object.values(clonedColumns).forEach(\n        (column: ClonedDataTableColumnData) => {\n          delete column.title;\n          delete column.template;\n          delete column.extraTemplate;\n        }\n      );\n\n      this._sortColumns = clonedColumns;\n    }\n\n    if (properties.has(\"filter\")) {\n      this._debounceSearch(this.filter);\n    }\n\n    if (properties.has(\"data\")) {\n      this._checkableRowsCount = this.data.filter(\n        (row) => row.selectable !== false\n      ).length;\n    }\n\n    if (!this.hasUpdated && this.initialCollapsedGroups) {\n      this._collapsedGroups = this.initialCollapsedGroups;\n      fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n    } else if (properties.has(\"groupColumn\")) {\n      this._collapsedGroups = [];\n      fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n    }\n\n    if (\n      properties.has(\"data\") ||\n      properties.has(\"columns\") ||\n      properties.has(\"_filter\") ||\n      properties.has(\"sortColumn\") ||\n      properties.has(\"sortDirection\")\n    ) {\n      this._sortFilterData();\n    }\n\n    if (properties.has(\"selectable\") || properties.has(\"hiddenColumns\")) {\n      this._filteredData = [...this._filteredData];\n    }\n  }\n\n  private _sortedColumns = memoizeOne(\n    (columns: DataTableColumnContainer, columnOrder?: string[]) => {\n      if (!columnOrder || !columnOrder.length) {\n        return columns;\n      }\n\n      return Object.keys(columns)\n        .sort((a, b) => {\n          const orderA = columnOrder!.indexOf(a);\n          const orderB = columnOrder!.indexOf(b);\n          if (orderA !== orderB) {\n            if (orderA === -1) {\n              return 1;\n            }\n            if (orderB === -1) {\n              return -1;\n            }\n          }\n          return orderA - orderB;\n        })\n        .reduce((obj, key) => {\n          obj[key] = columns[key];\n          return obj;\n        }, {}) as DataTableColumnContainer;\n    }\n  );\n\n  protected render() {\n    const localize = this.localizeFunc || this.hass.localize;\n\n    const columns = this._sortedColumns(this.columns, this.columnOrder);\n\n    const renderRow = (row: DataTableRowData, index: number) =>\n      this._renderRow(columns, this.narrow, row, index);\n\n    return html`\n      <div class=\"mdc-data-table\">\n        <slot name=\"header\" @slotchange=${this._calcTableHeight}>\n          ${this._filterable\n            ? html`\n                <div class=\"table-header\">\n                  <search-input\n                    .hass=${this.hass}\n                    @value-changed=${this._handleSearchChange}\n                    .label=${this.searchLabel}\n                    .noLabelFloat=${this.noLabelFloat}\n                  ></search-input>\n                </div>\n              `\n            : \"\"}\n        </slot>\n        <div\n          class=\"mdc-data-table__table ${classMap({\n            \"auto-height\": this.autoHeight,\n          })}\"\n          role=\"table\"\n          aria-rowcount=${this._filteredData.length + 1}\n          style=${styleMap({\n            height: this.autoHeight\n              ? `${(this._filteredData.length || 1) * 53 + 53}px`\n              : `calc(100% - ${this._headerHeight}px)`,\n          })}\n        >\n          <div\n            class=\"mdc-data-table__header-row\"\n            role=\"row\"\n            aria-rowindex=\"1\"\n            @scroll=${this._scrollContent}\n          >\n            <slot name=\"header-row\">\n              ${this.selectable\n                ? html`\n                    <div\n                      class=\"mdc-data-table__header-cell mdc-data-table__header-cell--checkbox\"\n                      role=\"columnheader\"\n                    >\n                      <ha-checkbox\n                        class=\"mdc-data-table__row-checkbox\"\n                        @change=${this._handleHeaderRowCheckboxClick}\n                        .indeterminate=${this._checkedRows.length &&\n                        this._checkedRows.length !== this._checkableRowsCount}\n                        .checked=${this._checkedRows.length &&\n                        this._checkedRows.length === this._checkableRowsCount}\n                      >\n                      </ha-checkbox>\n                    </div>\n                  `\n                : \"\"}\n              ${Object.entries(columns).map(([key, column]) => {\n                if (\n                  column.hidden ||\n                  (this.columnOrder && this.columnOrder.includes(key)\n                    ? (this.hiddenColumns?.includes(key) ??\n                      column.defaultHidden)\n                    : column.defaultHidden)\n                ) {\n                  return nothing;\n                }\n                const sorted = key === this.sortColumn;\n                const classes = {\n                  \"mdc-data-table__header-cell--numeric\":\n                    column.type === \"numeric\",\n                  \"mdc-data-table__header-cell--icon\": column.type === \"icon\",\n                  \"mdc-data-table__header-cell--icon-button\":\n                    column.type === \"icon-button\",\n                  \"mdc-data-table__header-cell--overflow-menu\":\n                    column.type === \"overflow-menu\",\n                  \"mdc-data-table__header-cell--overflow\":\n                    column.type === \"overflow\",\n                  sortable: Boolean(column.sortable),\n                  \"not-sorted\": Boolean(column.sortable && !sorted),\n                };\n                return html`\n                  <div\n                    aria-label=${ifDefined(column.label)}\n                    class=\"mdc-data-table__header-cell ${classMap(classes)}\"\n                    style=${styleMap({\n                      minWidth: column.minWidth,\n                      maxWidth: column.maxWidth,\n                      flex: column.flex || 1,\n                    })}\n                    role=\"columnheader\"\n                    aria-sort=${ifDefined(\n                      sorted\n                        ? this.sortDirection === \"desc\"\n                          ? \"descending\"\n                          : \"ascending\"\n                        : undefined\n                    )}\n                    @click=${this._handleHeaderClick}\n                    .columnId=${key}\n                  >\n                    ${column.sortable\n                      ? html`\n                          <ha-svg-icon\n                            .path=${sorted && this.sortDirection === \"desc\"\n                              ? mdiArrowDown\n                              : mdiArrowUp}\n                          ></ha-svg-icon>\n                        `\n                      : \"\"}\n                    <span>${column.title}</span>\n                  </div>\n                `;\n              })}\n            </slot>\n          </div>\n          ${!this._filteredData.length\n            ? html`\n                <div class=\"mdc-data-table__content\">\n                  <div class=\"mdc-data-table__row\" role=\"row\">\n                    <div class=\"mdc-data-table__cell grows center\" role=\"cell\">\n                      ${this.noDataText ||\n                      localize(\"ui.components.data-table.no-data\")}\n                    </div>\n                  </div>\n                </div>\n              `\n            : html`\n                <lit-virtualizer\n                  scroller\n                  class=\"mdc-data-table__content scroller ha-scrollbar\"\n                  @scroll=${this._saveScrollPos}\n                  .items=${this._groupData(\n                    this._filteredData,\n                    localize,\n                    this.appendRow,\n                    this.hasFab,\n                    this.groupColumn,\n                    this.groupOrder,\n                    this._collapsedGroups\n                  )}\n                  .keyFunction=${this._keyFunction}\n                  .renderItem=${renderRow}\n                ></lit-virtualizer>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  private _keyFunction = (row: DataTableRowData) => row?.[this.id] || row;\n\n  private _renderRow = (\n    columns: DataTableColumnContainer,\n    narrow: boolean,\n    row: DataTableRowData,\n    index: number\n  ) => {\n    // not sure how this happens...\n    if (!row) {\n      return nothing;\n    }\n    if (row.append) {\n      return html`<div class=\"mdc-data-table__row\">${row.content}</div>`;\n    }\n    if (row.empty) {\n      return html`<div class=\"mdc-data-table__row\"></div>`;\n    }\n    return html`\n      <div\n        aria-rowindex=${index + 2}\n        role=\"row\"\n        .rowId=${row[this.id]}\n        @click=${this._handleRowClick}\n        class=\"mdc-data-table__row ${classMap({\n          \"mdc-data-table__row--selected\": this._checkedRows.includes(\n            String(row[this.id])\n          ),\n          clickable: this.clickable,\n        })}\"\n        aria-selected=${ifDefined(\n          this._checkedRows.includes(String(row[this.id])) ? true : undefined\n        )}\n        .selectable=${row.selectable !== false}\n      >\n        ${this.selectable\n          ? html`\n              <div\n                class=\"mdc-data-table__cell mdc-data-table__cell--checkbox\"\n                role=\"cell\"\n              >\n                <ha-checkbox\n                  class=\"mdc-data-table__row-checkbox\"\n                  @change=${this._handleRowCheckboxClick}\n                  .rowId=${row[this.id]}\n                  .disabled=${row.selectable === false}\n                  .checked=${this._checkedRows.includes(String(row[this.id]))}\n                >\n                </ha-checkbox>\n              </div>\n            `\n          : \"\"}\n        ${Object.entries(columns).map(([key, column]) => {\n          if (\n            (narrow && !column.main && !column.showNarrow) ||\n            column.hidden ||\n            (this.columnOrder && this.columnOrder.includes(key)\n              ? (this.hiddenColumns?.includes(key) ?? column.defaultHidden)\n              : column.defaultHidden)\n          ) {\n            return nothing;\n          }\n          return html`\n            <div\n              @mouseover=${this._setTitle}\n              @focus=${this._setTitle}\n              role=${column.main ? \"rowheader\" : \"cell\"}\n              class=\"mdc-data-table__cell ${classMap({\n                \"mdc-data-table__cell--flex\": column.type === \"flex\",\n                \"mdc-data-table__cell--numeric\": column.type === \"numeric\",\n                \"mdc-data-table__cell--icon\": column.type === \"icon\",\n                \"mdc-data-table__cell--icon-button\":\n                  column.type === \"icon-button\",\n                \"mdc-data-table__cell--overflow-menu\":\n                  column.type === \"overflow-menu\",\n                \"mdc-data-table__cell--overflow\": column.type === \"overflow\",\n                forceLTR: Boolean(column.forceLTR),\n              })}\"\n              style=${styleMap({\n                minWidth: column.minWidth,\n                maxWidth: column.maxWidth,\n                flex: column.flex || 1,\n              })}\n            >\n              ${column.template\n                ? column.template(row)\n                : narrow && column.main\n                  ? html`<div class=\"primary\">${row[key]}</div>\n                      <div class=\"secondary\">\n                        ${Object.entries(columns)\n                          .filter(\n                            ([key2, column2]) =>\n                              !column2.hidden &&\n                              !column2.main &&\n                              !column2.showNarrow &&\n                              !(this.columnOrder &&\n                              this.columnOrder.includes(key2)\n                                ? (this.hiddenColumns?.includes(key2) ??\n                                  column2.defaultHidden)\n                                : column2.defaultHidden)\n                          )\n                          .map(\n                            ([key2, column2], i) =>\n                              html`${i !== 0\n                                ? \" ⸱ \"\n                                : nothing}${column2.template\n                                ? column2.template(row)\n                                : row[key2]}`\n                          )}\n                      </div>\n                      ${column.extraTemplate\n                        ? column.extraTemplate(row)\n                        : nothing}`\n                  : html`${row[key]}${column.extraTemplate\n                      ? column.extraTemplate(row)\n                      : nothing}`}\n            </div>\n          `;\n        })}\n      </div>\n    `;\n  };\n\n  private async _sortFilterData() {\n    const startTime = new Date().getTime();\n    const timeBetweenUpdate = startTime - this._lastUpdate;\n    const timeBetweenRequest = startTime - this._curRequest;\n    this._curRequest = startTime;\n\n    const forceUpdate =\n      !this._lastUpdate ||\n      (timeBetweenUpdate > 500 && timeBetweenRequest < 500);\n\n    let filteredData = this.data;\n    if (this._filter) {\n      filteredData = await this._memFilterData(\n        this.data,\n        this._sortColumns,\n        this._filter.trim()\n      );\n    }\n\n    if (!forceUpdate && this._curRequest !== startTime) {\n      return;\n    }\n\n    const prom = this.sortColumn\n      ? sortData(\n          filteredData,\n          this._sortColumns[this.sortColumn],\n          this.sortDirection,\n          this.sortColumn,\n          this.hass.locale.language\n        )\n      : filteredData;\n\n    const [data] = await Promise.all([prom, nextRender]);\n\n    const curTime = new Date().getTime();\n    const elapsed = curTime - startTime;\n\n    if (elapsed < 100) {\n      await new Promise((resolve) => {\n        setTimeout(resolve, 100 - elapsed);\n      });\n    }\n\n    if (!forceUpdate && this._curRequest !== startTime) {\n      return;\n    }\n\n    this._lastUpdate = startTime;\n    this._filteredData = data;\n  }\n\n  private _groupData = memoizeOne(\n    (\n      data: DataTableRowData[],\n      localize: LocalizeFunc,\n      appendRow,\n      hasFab: boolean,\n      groupColumn: string | undefined,\n      groupOrder: string[] | undefined,\n      collapsedGroups: string[]\n    ) => {\n      if (appendRow || hasFab || groupColumn) {\n        let items = [...data];\n\n        if (groupColumn) {\n          const grouped = groupBy(items, (item) => item[groupColumn]);\n          if (grouped.undefined) {\n            // make sure ungrouped items are at the bottom\n            grouped[UNDEFINED_GROUP_KEY] = grouped.undefined;\n            delete grouped.undefined;\n          }\n          const sorted: {\n            [key: string]: DataTableRowData[];\n          } = Object.keys(grouped)\n            .sort((a, b) => {\n              const orderA = groupOrder?.indexOf(a) ?? -1;\n              const orderB = groupOrder?.indexOf(b) ?? -1;\n              if (orderA !== orderB) {\n                if (orderA === -1) {\n                  return 1;\n                }\n                if (orderB === -1) {\n                  return -1;\n                }\n                return orderA - orderB;\n              }\n              return stringCompare(\n                [\"\", \"-\", \"—\"].includes(a) ? \"zzz\" : a,\n                [\"\", \"-\", \"—\"].includes(b) ? \"zzz\" : b,\n                this.hass.locale.language\n              );\n            })\n            .reduce((obj, key) => {\n              obj[key] = grouped[key];\n              return obj;\n            }, {});\n          const groupedItems: DataTableRowData[] = [];\n          Object.entries(sorted).forEach(([groupName, rows]) => {\n            groupedItems.push({\n              append: true,\n              content: html`<div\n                class=\"mdc-data-table__cell group-header\"\n                role=\"cell\"\n                .group=${groupName}\n                @click=${this._collapseGroup}\n              >\n                <ha-icon-button\n                  .path=${mdiChevronUp}\n                  class=${collapsedGroups.includes(groupName)\n                    ? \"collapsed\"\n                    : \"\"}\n                >\n                </ha-icon-button>\n                ${groupName === UNDEFINED_GROUP_KEY\n                  ? localize(\"ui.components.data-table.ungrouped\")\n                  : groupName || \"\"}\n              </div>`,\n            });\n            if (!collapsedGroups.includes(groupName)) {\n              groupedItems.push(...rows);\n            }\n          });\n          items = groupedItems;\n        }\n\n        if (appendRow) {\n          items.push({ append: true, content: appendRow });\n        }\n\n        if (hasFab) {\n          items.push({ empty: true });\n        }\n\n        return items;\n      }\n      return data;\n    }\n  );\n\n  private _memFilterData = memoizeOne(\n    (\n      data: DataTableRowData[],\n      columns: SortableColumnContainer,\n      filter: string\n    ): Promise<DataTableRowData[]> => filterData(data, columns, filter)\n  );\n\n  private _handleHeaderClick(ev: Event) {\n    const columnId = (ev.currentTarget as any).columnId;\n    if (!this.columns[columnId].sortable) {\n      return;\n    }\n    if (!this.sortDirection || this.sortColumn !== columnId) {\n      this.sortDirection = \"asc\";\n    } else if (this.sortDirection === \"asc\") {\n      this.sortDirection = \"desc\";\n    } else {\n      this.sortDirection = null;\n    }\n\n    this.sortColumn = this.sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this.sortDirection,\n    });\n  }\n\n  private _handleHeaderRowCheckboxClick(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    if (checkbox.checked) {\n      this.selectAll();\n    } else {\n      this._checkedRows = [];\n      this._checkedRowsChanged();\n    }\n  }\n\n  private _handleRowCheckboxClick = (ev: Event) => {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    const rowId = (checkbox as any).rowId;\n\n    if (checkbox.checked) {\n      if (this._checkedRows.includes(rowId)) {\n        return;\n      }\n      this._checkedRows = [...this._checkedRows, rowId];\n    } else {\n      this._checkedRows = this._checkedRows.filter((row) => row !== rowId);\n    }\n    this._checkedRowsChanged();\n  };\n\n  private _handleRowClick = (ev: Event) => {\n    if (\n      ev\n        .composedPath()\n        .find((el) =>\n          [\n            \"ha-checkbox\",\n            \"mwc-button\",\n            \"ha-button\",\n            \"ha-icon-button\",\n            \"ha-assist-chip\",\n          ].includes((el as HTMLElement).localName)\n        )\n    ) {\n      return;\n    }\n    const rowId = (ev.currentTarget as any).rowId;\n    fireEvent(this, \"row-click\", { id: rowId }, { bubbles: false });\n  };\n\n  private _setTitle(ev: Event) {\n    const target = ev.currentTarget as HTMLElement;\n    if (target.scrollWidth > target.offsetWidth) {\n      target.setAttribute(\"title\", target.innerText);\n    }\n  }\n\n  private _checkedRowsChanged() {\n    // force scroller to update, change it's items\n    if (this._filteredData.length) {\n      this._filteredData = [...this._filteredData];\n    }\n    fireEvent(this, \"selection-changed\", {\n      value: this._checkedRows,\n    });\n  }\n\n  private _handleSearchChange(ev: CustomEvent): void {\n    if (this.filter) {\n      return;\n    }\n    this._debounceSearch(ev.detail.value);\n  }\n\n  private async _calcTableHeight() {\n    if (this.autoHeight) {\n      return;\n    }\n    await this.updateComplete;\n    this._headerHeight = this._header.clientHeight;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n\n    this.renderRoot.querySelector(\".mdc-data-table__header-row\")!.scrollLeft = (\n      e.target as HTMLDivElement\n    ).scrollLeft;\n  }\n\n  @eventOptions({ passive: true })\n  private _scrollContent(e: Event) {\n    this.renderRoot.querySelector(\"lit-virtualizer\")!.scrollLeft = (\n      e.target as HTMLDivElement\n    ).scrollLeft;\n  }\n\n  private _collapseGroup = (ev: Event) => {\n    const groupName = (ev.currentTarget as any).group;\n    if (this._collapsedGroups.includes(groupName)) {\n      this._collapsedGroups = this._collapsedGroups.filter(\n        (grp) => grp !== groupName\n      );\n    } else {\n      this._collapsedGroups = [...this._collapsedGroups, groupName];\n    }\n    fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n  };\n\n  public expandAllGroups() {\n    this._collapsedGroups = [];\n    fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n  }\n\n  public collapseAllGroups() {\n    if (\n      !this.groupColumn ||\n      !this.data.some((item) => item[this.groupColumn!])\n    ) {\n      return;\n    }\n    const grouped = groupBy(this.data, (item) => item[this.groupColumn!]);\n    if (grouped.undefined) {\n      // undefined is a reserved group name\n      grouped[UNDEFINED_GROUP_KEY] = grouped.undefined;\n      delete grouped.undefined;\n    }\n    this._collapsedGroups = Object.keys(grouped);\n    fireEvent(this, \"collapsed-changed\", { value: this._collapsedGroups });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleScrollbar,\n      css`\n        /* default mdc styles, colors changed, without checkbox styles */\n        :host {\n          height: 100%;\n        }\n        .mdc-data-table__content {\n          font-family: Roboto, sans-serif;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 400;\n          letter-spacing: 0.0178571429em;\n          text-decoration: inherit;\n          text-transform: inherit;\n        }\n\n        .mdc-data-table {\n          background-color: var(--data-table-background-color);\n          border-radius: 4px;\n          border-width: 1px;\n          border-style: solid;\n          border-color: var(--divider-color);\n          display: inline-flex;\n          flex-direction: column;\n          box-sizing: border-box;\n          overflow: hidden;\n        }\n\n        .mdc-data-table__row--selected {\n          background-color: rgba(var(--rgb-primary-color), 0.04);\n        }\n\n        .mdc-data-table__row {\n          display: flex;\n          height: var(--data-table-row-height, 52px);\n          width: var(--table-row-width, 100%);\n        }\n\n        .mdc-data-table__row ~ .mdc-data-table__row {\n          border-top: 1px solid var(--divider-color);\n        }\n\n        .mdc-data-table__row.clickable:not(\n            .mdc-data-table__row--selected\n          ):hover {\n          background-color: rgba(var(--rgb-primary-text-color), 0.04);\n        }\n\n        .mdc-data-table__header-cell {\n          color: var(--primary-text-color);\n        }\n\n        .mdc-data-table__cell {\n          color: var(--primary-text-color);\n        }\n\n        .mdc-data-table__header-row {\n          height: 56px;\n          display: flex;\n          border-bottom: 1px solid var(--divider-color);\n          overflow: auto;\n        }\n\n        /* Hide scrollbar for Chrome, Safari and Opera */\n        .mdc-data-table__header-row::-webkit-scrollbar {\n          display: none;\n        }\n\n        /* Hide scrollbar for IE, Edge and Firefox */\n        .mdc-data-table__header-row {\n          -ms-overflow-style: none; /* IE and Edge */\n          scrollbar-width: none; /* Firefox */\n        }\n\n        .mdc-data-table__cell,\n        .mdc-data-table__header-cell {\n          padding-right: 16px;\n          padding-left: 16px;\n          min-width: 150px;\n          align-self: center;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          flex-shrink: 0;\n          box-sizing: border-box;\n        }\n\n        .mdc-data-table__cell.mdc-data-table__cell--flex {\n          display: flex;\n          overflow: initial;\n        }\n\n        .mdc-data-table__cell.mdc-data-table__cell--icon {\n          overflow: initial;\n        }\n\n        .mdc-data-table__header-cell--checkbox,\n        .mdc-data-table__cell--checkbox {\n          /* @noflip */\n          padding-left: 16px;\n          /* @noflip */\n          padding-right: 0;\n          /* @noflip */\n          padding-inline-start: 16px;\n          /* @noflip */\n          padding-inline-end: initial;\n          width: 60px;\n          min-width: 60px;\n        }\n\n        .mdc-data-table__table {\n          height: 100%;\n          width: 100%;\n          border: 0;\n          white-space: nowrap;\n          position: relative;\n        }\n\n        .mdc-data-table__cell {\n          font-family: Roboto, sans-serif;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 400;\n          letter-spacing: 0.0178571429em;\n          text-decoration: inherit;\n          text-transform: inherit;\n          flex-grow: 0;\n          flex-shrink: 0;\n        }\n\n        .mdc-data-table__cell a {\n          color: inherit;\n          text-decoration: none;\n        }\n\n        .mdc-data-table__cell--numeric {\n          text-align: var(--float-end);\n        }\n\n        .mdc-data-table__cell--icon {\n          color: var(--secondary-text-color);\n          text-align: center;\n        }\n\n        .mdc-data-table__header-cell--icon,\n        .mdc-data-table__cell--icon {\n          min-width: 64px;\n          flex: 0 0 64px !important;\n        }\n\n        .mdc-data-table__cell--icon img {\n          width: 24px;\n          height: 24px;\n        }\n\n        .mdc-data-table__header-cell.mdc-data-table__header-cell--icon {\n          text-align: center;\n        }\n\n        .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:hover,\n        .mdc-data-table__header-cell.sortable.mdc-data-table__header-cell--icon:not(\n            .not-sorted\n          ) {\n          text-align: var(--float-start);\n        }\n\n        .mdc-data-table__cell--icon:first-child img,\n        .mdc-data-table__cell--icon:first-child ha-icon,\n        .mdc-data-table__cell--icon:first-child ha-svg-icon,\n        .mdc-data-table__cell--icon:first-child ha-state-icon,\n        .mdc-data-table__cell--icon:first-child ha-domain-icon,\n        .mdc-data-table__cell--icon:first-child ha-service-icon {\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n        }\n\n        .mdc-data-table__cell--icon:first-child state-badge {\n          margin-right: -8px;\n          margin-inline-end: -8px;\n          margin-inline-start: initial;\n        }\n\n        .mdc-data-table__cell--overflow-menu,\n        .mdc-data-table__header-cell--overflow-menu,\n        .mdc-data-table__header-cell--icon-button,\n        .mdc-data-table__cell--icon-button {\n          min-width: 64px;\n          flex: 0 0 64px !important;\n          padding: 8px;\n        }\n\n        .mdc-data-table__header-cell--icon-button,\n        .mdc-data-table__cell--icon-button {\n          min-width: 56px;\n          width: 56px;\n        }\n\n        .mdc-data-table__cell--overflow-menu,\n        .mdc-data-table__cell--icon-button {\n          color: var(--secondary-text-color);\n          text-overflow: clip;\n        }\n\n        .mdc-data-table__header-cell--icon-button:first-child,\n        .mdc-data-table__cell--icon-button:first-child,\n        .mdc-data-table__header-cell--icon-button:last-child,\n        .mdc-data-table__cell--icon-button:last-child {\n          width: 64px;\n        }\n\n        .mdc-data-table__cell--overflow-menu:first-child,\n        .mdc-data-table__header-cell--overflow-menu:first-child,\n        .mdc-data-table__header-cell--icon-button:first-child,\n        .mdc-data-table__cell--icon-button:first-child {\n          padding-left: 16px;\n          padding-inline-start: 16px;\n          padding-inline-end: initial;\n        }\n\n        .mdc-data-table__cell--overflow-menu:last-child,\n        .mdc-data-table__header-cell--overflow-menu:last-child,\n        .mdc-data-table__header-cell--icon-button:last-child,\n        .mdc-data-table__cell--icon-button:last-child {\n          padding-right: 16px;\n          padding-inline-end: 16px;\n          padding-inline-start: initial;\n        }\n        .mdc-data-table__cell--overflow-menu,\n        .mdc-data-table__cell--overflow,\n        .mdc-data-table__header-cell--overflow-menu,\n        .mdc-data-table__header-cell--overflow {\n          overflow: initial;\n        }\n        .mdc-data-table__cell--icon-button a {\n          color: var(--secondary-text-color);\n        }\n\n        .mdc-data-table__header-cell {\n          font-family: Roboto, sans-serif;\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          font-size: 0.875rem;\n          line-height: 1.375rem;\n          font-weight: 500;\n          letter-spacing: 0.0071428571em;\n          text-decoration: inherit;\n          text-transform: inherit;\n          text-align: var(--float-start);\n        }\n\n        .mdc-data-table__header-cell--numeric {\n          text-align: var(--float-end);\n        }\n        .mdc-data-table__header-cell--numeric.sortable:hover,\n        .mdc-data-table__header-cell--numeric.sortable:not(.not-sorted) {\n          text-align: var(--float-start);\n        }\n\n        /* custom from here */\n\n        .group-header {\n          padding-top: 12px;\n          height: var(--data-table-row-height, 52px);\n          padding-left: 12px;\n          padding-inline-start: 12px;\n          padding-inline-end: initial;\n          width: 100%;\n          font-weight: 500;\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n          background-color: var(--primary-background-color);\n        }\n\n        .group-header ha-icon-button {\n          transition: transform 0.2s ease;\n        }\n\n        .group-header ha-icon-button.collapsed {\n          transform: rotate(180deg);\n        }\n\n        :host {\n          display: block;\n        }\n\n        .mdc-data-table {\n          display: block;\n          border-width: var(--data-table-border-width, 1px);\n          height: 100%;\n        }\n        .mdc-data-table__header-cell {\n          overflow: hidden;\n          position: relative;\n        }\n        .mdc-data-table__header-cell span {\n          position: relative;\n          left: 0px;\n          inset-inline-start: 0px;\n          inset-inline-end: initial;\n        }\n\n        .mdc-data-table__header-cell.sortable {\n          cursor: pointer;\n        }\n        .mdc-data-table__header-cell > * {\n          transition: var(--float-start) 0.2s ease;\n        }\n        .mdc-data-table__header-cell ha-svg-icon {\n          top: -3px;\n          position: absolute;\n        }\n        .mdc-data-table__header-cell.not-sorted ha-svg-icon {\n          left: -20px;\n          inset-inline-start: -20px;\n          inset-inline-end: initial;\n        }\n        .mdc-data-table__header-cell.sortable:not(.not-sorted) span,\n        .mdc-data-table__header-cell.sortable.not-sorted:hover span {\n          left: 24px;\n          inset-inline-start: 24px;\n          inset-inline-end: initial;\n        }\n        .mdc-data-table__header-cell.sortable:not(.not-sorted) ha-svg-icon,\n        .mdc-data-table__header-cell.sortable:hover.not-sorted ha-svg-icon {\n          left: 12px;\n          inset-inline-start: 12px;\n          inset-inline-end: initial;\n        }\n        .table-header {\n          border-bottom: 1px solid var(--divider-color);\n        }\n        search-input {\n          display: block;\n          flex: 1;\n          --mdc-text-field-fill-color: var(--sidebar-background-color);\n          --mdc-text-field-idle-line-color: transparent;\n        }\n        slot[name=\"header\"] {\n          display: block;\n        }\n        .center {\n          text-align: center;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n        .scroller {\n          height: calc(100% - 57px);\n          overflow: overlay !important;\n        }\n\n        .mdc-data-table__table.auto-height .scroller {\n          overflow-y: hidden !important;\n        }\n        .grows {\n          flex-grow: 1;\n          flex-shrink: 1;\n        }\n        .forceLTR {\n          direction: ltr;\n        }\n        .clickable {\n          cursor: pointer;\n        }\n        lit-virtualizer {\n          contain: size layout !important;\n          overscroll-behavior: contain;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-data-table\": HaDataTable;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"selection-changed\": SelectionChangedEvent;\n    \"row-click\": RowClickedEvent;\n    \"sorting-changed\": SortingChangedEvent;\n    \"collapsed-changed\": CollapsedChangedEvent;\n  }\n}\n","import { MdMenu } from \"@material/web/menu/menu\";\nimport type { CloseMenuEvent } from \"@material/web/menu/menu\";\nimport {\n  CloseReason,\n  KeydownCloseKey,\n} from \"@material/web/menu/internal/controllers/shared\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HaMdMenuItem } from \"./ha-md-menu-item\";\n\n@customElement(\"ha-menu\")\nexport class HaMenu extends MdMenu {\n  connectedCallback(): void {\n    super.connectedCallback();\n    this.addEventListener(\"close-menu\", this._handleCloseMenu);\n  }\n\n  private _handleCloseMenu(ev: CloseMenuEvent) {\n    if (\n      ev.detail.reason.kind === CloseReason.KEYDOWN &&\n      ev.detail.reason.key === KeydownCloseKey.ESCAPE\n    ) {\n      return;\n    }\n    (ev.detail.initiator as HaMdMenuItem).clickAction?.(ev.detail.initiator);\n  }\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-surface-container: var(--card-background-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-menu\": HaMenu;\n  }\n\n  interface HTMLElementEventMap {\n    \"close-menu\": CloseMenuEvent;\n  }\n}\n","import type { Button } from \"@material/mwc-button\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\nimport \"./ha-menu\";\nimport type { HaMenu } from \"./ha-menu\";\n\n@customElement(\"ha-md-button-menu\")\nexport class HaMdButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public positioning?: \"fixed\" | \"absolute\" | \"popover\";\n\n  @property({ type: Boolean, attribute: \"has-overflow\" }) public hasOverflow =\n    false;\n\n  @query(\"ha-menu\", true) private _menu!: HaMenu;\n\n  public get items() {\n    return this._menu.items;\n  }\n\n  public override focus() {\n    if (this._menu.open) {\n      this._menu.focus();\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <ha-menu\n        .positioning=${this.positioning}\n        .hasOverflow=${this.hasOverflow}\n      >\n        <slot></slot>\n      </ha-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu.anchorElement = this;\n    if (this._menu.open) {\n      this._menu.close();\n    } else {\n      this._menu.show();\n    }\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"], ha-assist-chip[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-md-button-menu\": HaMdButtonMenu;\n  }\n}\n","import { MdDivider } from \"@material/web/divider/divider\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-md-divider\")\nexport class HaMdDivider extends MdDivider {\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-divider-color: var(--divider-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-md-divider\": HaMdDivider;\n  }\n}\n","import { AttachableController } from \"@material/web/internal/controller/attachable-controller\";\nimport { MdRipple } from \"@material/web/ripple/ripple\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-ripple\")\nexport class HaRipple extends MdRipple {\n  private readonly attachableTouchController = new AttachableController(\n    this,\n    this.onTouchControlChange.bind(this)\n  );\n\n  attach(control: HTMLElement) {\n    super.attach(control);\n    this.attachableTouchController.attach(control);\n  }\n\n  detach() {\n    super.detach();\n    this.attachableTouchController.detach();\n  }\n\n  private _handleTouchEnd = () => {\n    if (!this.disabled) {\n      // @ts-ignore\n      super.endPressAnimation();\n    }\n  };\n\n  private onTouchControlChange(\n    prev: HTMLElement | null,\n    next: HTMLElement | null\n  ) {\n    // Add touchend event to clean ripple on touch devices using action handler\n    prev?.removeEventListener(\"touchend\", this._handleTouchEnd);\n    next?.addEventListener(\"touchend\", this._handleTouchEnd);\n  }\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-ripple-hover-opacity: var(--ha-ripple-hover-opacity, 0.08);\n        --md-ripple-pressed-opacity: var(--ha-ripple-pressed-opacity, 0.12);\n        --md-ripple-hover-color: var(\n          --ha-ripple-hover-color,\n          var(--ha-ripple-color, var(--secondary-text-color))\n        );\n        --md-ripple-pressed-color: var(\n          --ha-ripple-pressed-color,\n          var(--ha-ripple-color, var(--secondary-text-color))\n        );\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-ripple\": HaRipple;\n  }\n}\n","import type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"./ha-ripple\";\n\n@customElement(\"ha-tab\")\nexport class HaTab extends LitElement {\n  @property({ type: Boolean, reflect: true }) public active = false;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property() public name?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        tabindex=\"0\"\n        role=\"tab\"\n        aria-selected=${this.active}\n        aria-label=${ifDefined(this.name)}\n        @keydown=${this._handleKeyDown}\n      >\n        ${this.narrow ? html`<slot name=\"icon\"></slot>` : \"\"}\n        <span class=\"name\">${this.name}</span>\n        <ha-ripple></ha-ripple>\n      </div>\n    `;\n  }\n\n  private _handleKeyDown(ev: KeyboardEvent): void {\n    if (ev.key === \"Enter\") {\n      (ev.target as HTMLElement).click();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      div {\n        padding: 0 32px;\n        display: flex;\n        flex-direction: column;\n        text-align: center;\n        box-sizing: border-box;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: var(--header-height);\n        cursor: pointer;\n        position: relative;\n        outline: none;\n      }\n\n      .name {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        max-width: 100%;\n      }\n\n      :host([active]) {\n        color: var(--primary-color);\n      }\n\n      :host(:not([narrow])[active]) div {\n        border-bottom: 2px solid var(--primary-color);\n      }\n\n      :host([narrow]) {\n        min-width: 0;\n        display: flex;\n        justify-content: center;\n        overflow: hidden;\n      }\n\n      :host([narrow]) div {\n        padding: 0 4px;\n      }\n\n      div:focus-visible:before {\n        position: absolute;\n        display: block;\n        content: \"\";\n        inset: 0;\n        background-color: var(--secondary-text-color);\n        opacity: 0.08;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tab\": HaTab;\n  }\n}\n","import type { CSSResultGroup, PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, eventOptions, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport \"../components/ha-svg-icon\";\nimport \"../components/ha-tab\";\nimport type { HomeAssistant, Route } from \"../types\";\nimport { haStyleScrollbar } from \"../resources/styles\";\nimport { canShowPage } from \"../common/config/can_show_page\";\n\nexport interface PageNavigation {\n  path: string;\n  translationKey?: string;\n  component?: string | string[];\n  name?: string;\n  not_component?: string | string[];\n  core?: boolean;\n  advancedOnly?: boolean;\n  iconPath?: string;\n  description?: string;\n  iconColor?: string;\n  info?: any;\n}\n\n@customElement(\"hass-tabs-subpage\")\nclass HassTabsSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  @property({ attribute: false }) public localizeFunc?: LocalizeFunc;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ attribute: false }) public backCallback?: () => void;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public tabs!: PageNavigation[];\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean, reflect: true, attribute: \"is-wide\" })\n  public isWide = false;\n\n  @property({ type: Boolean }) public pane = false;\n\n  @state() private _activeTab?: PageNavigation;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  private _getTabs = memoizeOne(\n    (\n      tabs: PageNavigation[],\n      activeTab: PageNavigation | undefined,\n      _components,\n      _language,\n      _narrow,\n      localizeFunc\n    ) => {\n      const shownTabs = tabs.filter((page) => canShowPage(this.hass, page));\n\n      if (shownTabs.length < 2) {\n        if (shownTabs.length === 1) {\n          const page = shownTabs[0];\n          return [\n            page.translationKey ? localizeFunc(page.translationKey) : page.name,\n          ];\n        }\n        return [\"\"];\n      }\n\n      return shownTabs.map(\n        (page) => html`\n          <a href=${page.path}>\n            <ha-tab\n              .hass=${this.hass}\n              .active=${page.path === activeTab?.path}\n              .narrow=${this.narrow}\n              .name=${page.translationKey\n                ? localizeFunc(page.translationKey)\n                : page.name}\n            >\n              ${page.iconPath\n                ? html`<ha-svg-icon\n                    slot=\"icon\"\n                    .path=${page.iconPath}\n                  ></ha-svg-icon>`\n                : \"\"}\n            </ha-tab>\n          </a>\n        `\n      );\n    }\n  );\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"route\")) {\n      this._activeTab = this.tabs.find((tab) =>\n        `${this.route.prefix}${this.route.path}`.includes(tab.path)\n      );\n    }\n    super.willUpdate(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    const tabs = this._getTabs(\n      this.tabs,\n      this._activeTab,\n      this.hass.config.components,\n      this.hass.language,\n      this.narrow,\n      this.localizeFunc || this.hass.localize\n    );\n    const showTabs = tabs.length > 1;\n    return html`\n      <div class=\"toolbar\">\n        <slot name=\"toolbar\">\n          <div class=\"toolbar-content\">\n            ${this.mainPage || (!this.backPath && history.state?.root)\n              ? html`\n                  <ha-menu-button\n                    .hassio=${this.supervisor}\n                    .hass=${this.hass}\n                    .narrow=${this.narrow}\n                  ></ha-menu-button>\n                `\n              : this.backPath\n                ? html`\n                    <a href=${this.backPath}>\n                      <ha-icon-button-arrow-prev\n                        .hass=${this.hass}\n                      ></ha-icon-button-arrow-prev>\n                    </a>\n                  `\n                : html`\n                    <ha-icon-button-arrow-prev\n                      .hass=${this.hass}\n                      @click=${this._backTapped}\n                    ></ha-icon-button-arrow-prev>\n                  `}\n            ${this.narrow || !showTabs\n              ? html`<div class=\"main-title\">\n                  <slot name=\"header\">${!showTabs ? tabs[0] : \"\"}</slot>\n                </div>`\n              : \"\"}\n            ${showTabs && !this.narrow\n              ? html`<div id=\"tabbar\">${tabs}</div>`\n              : \"\"}\n            <div id=\"toolbar-icon\">\n              <slot name=\"toolbar-icon\"></slot>\n            </div>\n          </div>\n        </slot>\n        ${showTabs && this.narrow\n          ? html`<div id=\"tabbar\" class=\"bottom-bar\">${tabs}</div>`\n          : \"\"}\n      </div>\n      <div class=\"container\">\n        ${this.pane\n          ? html`<div class=\"pane\">\n              <div class=\"shadow-container\"></div>\n              <div class=\"ha-scrollbar\">\n                <slot name=\"pane\"></slot>\n              </div>\n            </div>`\n          : nothing}\n        <div\n          class=\"content ha-scrollbar ${classMap({ tabs: showTabs })}\"\n          @scroll=${this._saveScrollPos}\n        >\n          <slot></slot>\n        </div>\n      </div>\n      <div id=\"fab\" class=${classMap({ tabs: showTabs })}>\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleScrollbar,\n      css`\n        :host {\n          display: block;\n          height: 100%;\n          background-color: var(--primary-background-color);\n        }\n\n        :host([narrow]) {\n          width: 100%;\n          position: fixed;\n        }\n\n        .container {\n          display: flex;\n          height: calc(100% - var(--header-height));\n        }\n\n        :host([narrow]) .container {\n          height: 100%;\n        }\n\n        ha-menu-button {\n          margin-right: 24px;\n          margin-inline-end: 24px;\n          margin-inline-start: initial;\n        }\n\n        .toolbar {\n          font-size: 20px;\n          height: var(--header-height);\n          background-color: var(--sidebar-background-color);\n          font-weight: 400;\n          border-bottom: 1px solid var(--divider-color);\n          box-sizing: border-box;\n        }\n        .toolbar-content {\n          padding: 8px 12px;\n          display: flex;\n          align-items: center;\n          height: 100%;\n          box-sizing: border-box;\n        }\n        @media (max-width: 599px) {\n          .toolbar-content {\n            padding: 4px;\n          }\n        }\n        .toolbar a {\n          color: var(--sidebar-text-color);\n          text-decoration: none;\n        }\n        .bottom-bar a {\n          width: 25%;\n        }\n\n        #tabbar {\n          display: flex;\n          font-size: 14px;\n          overflow: hidden;\n        }\n\n        #tabbar > a {\n          overflow: hidden;\n          max-width: 45%;\n        }\n\n        #tabbar.bottom-bar {\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          padding: 0 16px;\n          box-sizing: border-box;\n          background-color: var(--sidebar-background-color);\n          border-top: 1px solid var(--divider-color);\n          justify-content: space-around;\n          z-index: 2;\n          font-size: 12px;\n          width: 100%;\n          padding-bottom: env(safe-area-inset-bottom);\n        }\n\n        #tabbar:not(.bottom-bar) {\n          flex: 1;\n          justify-content: center;\n        }\n\n        :host(:not([narrow])) #toolbar-icon {\n          min-width: 40px;\n        }\n\n        ha-menu-button,\n        ha-icon-button-arrow-prev,\n        ::slotted([slot=\"toolbar-icon\"]) {\n          display: flex;\n          flex-shrink: 0;\n          pointer-events: auto;\n          color: var(--sidebar-icon-color);\n        }\n\n        .main-title {\n          flex: 1;\n          max-height: var(--header-height);\n          line-height: 20px;\n          color: var(--sidebar-text-color);\n          margin: var(--main-title-margin, var(--margin-title));\n        }\n\n        .content {\n          position: relative;\n          width: calc(\n            100% - env(safe-area-inset-left) - env(safe-area-inset-right)\n          );\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n          margin-inline-start: env(safe-area-inset-left);\n          margin-inline-end: env(safe-area-inset-right);\n          overflow: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([narrow]) .content.tabs {\n          height: calc(100% - 2 * var(--header-height));\n          height: calc(\n            100% - 2 * var(--header-height) - env(safe-area-inset-bottom)\n          );\n        }\n\n        #fab {\n          position: fixed;\n          right: calc(16px + env(safe-area-inset-right));\n          inset-inline-end: calc(16px + env(safe-area-inset-right));\n          inset-inline-start: initial;\n          bottom: calc(16px + env(safe-area-inset-bottom));\n          z-index: 1;\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: flex-end;\n          gap: 8px;\n        }\n        :host([narrow]) #fab.tabs {\n          bottom: calc(84px + env(safe-area-inset-bottom));\n        }\n        #fab[is-wide] {\n          bottom: 24px;\n          right: 24px;\n          inset-inline-end: 24px;\n          inset-inline-start: initial;\n        }\n\n        .pane {\n          border-right: 1px solid var(--divider-color);\n          border-inline-end: 1px solid var(--divider-color);\n          border-inline-start: initial;\n          box-sizing: border-box;\n          display: flex;\n          flex: 0 0 var(--sidepane-width, 250px);\n          width: var(--sidepane-width, 250px);\n          flex-direction: column;\n          position: relative;\n        }\n        .pane .ha-scrollbar {\n          flex: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-tabs-subpage\": HassTabsSubpage;\n  }\n}\n","import { ResizeController } from \"@lit-labs/observers/resize-controller\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport \"@material/mwc-button/mwc-button\";\nimport {\n  mdiArrowDown,\n  mdiArrowUp,\n  mdiClose,\n  mdiCog,\n  mdiFilterVariant,\n  mdiFilterVariantRemove,\n  mdiFormatListChecks,\n  mdiMenuDown,\n  mdiUnfoldLessHorizontal,\n  mdiUnfoldMoreHorizontal,\n} from \"@mdi/js\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport \"../components/chips/ha-assist-chip\";\nimport \"../components/chips/ha-filter-chip\";\nimport \"../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n  HaDataTable,\n  SortingDirection,\n} from \"../components/data-table/ha-data-table\";\nimport \"../components/ha-md-button-menu\";\nimport \"../components/ha-dialog\";\nimport \"../components/ha-dialog-header\";\nimport \"../components/ha-md-divider\";\nimport type { HaMenu } from \"../components/ha-menu\";\nimport \"../components/ha-md-menu-item\";\nimport \"../components/search-input-outlined\";\nimport type { HomeAssistant, Route } from \"../types\";\nimport \"./hass-tabs-subpage\";\nimport type { PageNavigation } from \"./hass-tabs-subpage\";\nimport { showDataTableSettingsDialog } from \"../components/data-table/show-dialog-data-table-settings\";\n\n@customElement(\"hass-tabs-subpage-data-table\")\nexport class HaTabsSubpageDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public localizeFunc?: LocalizeFunc;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ attribute: false }) public initialCollapsedGroups: string[] = [];\n\n  /**\n   * Object with the columns.\n   * @type {Object}\n   */\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  /**\n   * Data to show in the table.\n   * @type {Array}\n   */\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  /**\n   * Should rows be selectable.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public selectable = false;\n\n  /**\n   * Should rows be clickable.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public clickable = false;\n\n  /**\n   * Do we need to add padding for a fab.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public hasFab = false;\n\n  /**\n   * Add an extra row at the bottom of the data table\n   * @type {TemplateResult}\n   */\n  @property({ attribute: false }) public appendRow?: TemplateResult;\n\n  /**\n   * Field with a unique id per entry in data.\n   * @type {String}\n   */\n  @property({ type: String }) public id = \"id\";\n\n  /**\n   * String to filter the data in the data table on.\n   * @type {String}\n   */\n  @property({ type: String }) public filter = \"\";\n\n  @property() public searchLabel?: string;\n\n  /**\n   * Number of active filters.\n   * @type {Number}\n   */\n  @property({ type: Number }) public filters?;\n\n  /**\n   * Number of current selections.\n   * @type {Number}\n   */\n  @property({ type: Number }) public selected?;\n\n  /**\n   * What path to use when the back button is pressed.\n   * @type {String}\n   * @attr back-path\n   */\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  /**\n   * Function to call when the back button is pressed.\n   * @type {() => void}\n   */\n  @property({ attribute: false }) public backCallback?: () => void;\n\n  /**\n   * String to show when there are no records in the data table.\n   * @type {String}\n   */\n  @property({ type: String }) public noDataText?: string;\n\n  /**\n   * Hides the data table and show an empty message.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public empty = false;\n\n  @property({ attribute: false }) public route!: Route;\n\n  /**\n   * Array of tabs to show on the page.\n   * @type {Array}\n   */\n  @property({ attribute: false }) public tabs: PageNavigation[] = [];\n\n  /**\n   * Show the filter menu.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public hasFilters = false;\n\n  @property({ type: Boolean }) public showFilters = false;\n\n  @property({ attribute: false }) public initialSorting?: {\n    column: string;\n    direction: SortingDirection;\n  };\n\n  @property() public initialGroupColumn?: string;\n\n  @property({ attribute: false }) public groupOrder?: string[];\n\n  @property({ attribute: false }) public columnOrder?: string[];\n\n  @property({ attribute: false }) public hiddenColumns?: string[];\n\n  @state() private _sortColumn?: string;\n\n  @state() private _sortDirection: SortingDirection = null;\n\n  @state() private _groupColumn?: string;\n\n  @state() private _selectMode = false;\n\n  @query(\"ha-data-table\", true) private _dataTable!: HaDataTable;\n\n  @query(\"#group-by-menu\") private _groupByMenu!: HaMenu;\n\n  @query(\"#sort-by-menu\") private _sortByMenu!: HaMenu;\n\n  private _showPaneController = new ResizeController(this, {\n    callback: (entries) => entries[0]?.contentRect.width > 750,\n  });\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected willUpdate() {\n    if (this.hasUpdated) {\n      return;\n    }\n    if (this.initialGroupColumn) {\n      this._setGroupColumn(this.initialGroupColumn);\n    }\n    if (this.initialSorting) {\n      this._sortColumn = this.initialSorting.column;\n      this._sortDirection = this.initialSorting.direction;\n    }\n  }\n\n  private _toggleGroupBy() {\n    this._groupByMenu.open = !this._groupByMenu.open;\n  }\n\n  private _toggleSortBy() {\n    this._sortByMenu.open = !this._sortByMenu.open;\n  }\n\n  protected render(): TemplateResult {\n    const localize = this.localizeFunc || this.hass.localize;\n    const showPane = this._showPaneController.value ?? !this.narrow;\n    const filterButton = this.hasFilters\n      ? html`<div class=\"relative\">\n          <ha-assist-chip\n            .label=${localize(\"ui.components.subpage-data-table.filters\")}\n            .active=${this.filters}\n            @click=${this._toggleFilters}\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiFilterVariant}></ha-svg-icon>\n          </ha-assist-chip>\n          ${this.filters\n            ? html`<div class=\"badge\">${this.filters}</div>`\n            : nothing}\n        </div>`\n      : nothing;\n\n    const selectModeBtn =\n      this.selectable && !this._selectMode\n        ? html`<ha-assist-chip\n            class=\"has-dropdown select-mode-chip\"\n            .active=${this._selectMode}\n            @click=${this._enableSelectMode}\n            .title=${localize(\n              \"ui.components.subpage-data-table.enter_selection_mode\"\n            )}\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiFormatListChecks}></ha-svg-icon>\n          </ha-assist-chip>`\n        : nothing;\n\n    const searchBar = html`<search-input-outlined\n      .hass=${this.hass}\n      .filter=${this.filter}\n      @value-changed=${this._handleSearchChange}\n      .label=${this.searchLabel}\n      .placeholder=${this.searchLabel}\n    >\n    </search-input-outlined>`;\n\n    const sortByMenu = Object.values(this.columns).find((col) => col.sortable)\n      ? html`\n          <ha-assist-chip\n            .label=${localize(\"ui.components.subpage-data-table.sort_by\", {\n              sortColumn: this._sortColumn\n                ? ` ${this.columns[this._sortColumn]?.title || this.columns[this._sortColumn]?.label}` ||\n                  \"\"\n                : \"\",\n            })}\n            id=\"sort-by-anchor\"\n            @click=${this._toggleSortBy}\n          >\n            <ha-svg-icon\n              slot=\"trailing-icon\"\n              .path=${mdiMenuDown}\n            ></ha-svg-icon>\n          </ha-assist-chip>\n        `\n      : nothing;\n\n    const groupByMenu = Object.values(this.columns).find((col) => col.groupable)\n      ? html`\n          <ha-assist-chip\n            .label=${localize(\"ui.components.subpage-data-table.group_by\", {\n              groupColumn: this._groupColumn\n                ? ` ${this.columns[this._groupColumn].title || this.columns[this._groupColumn].label}`\n                : \"\",\n            })}\n            id=\"group-by-anchor\"\n            @click=${this._toggleGroupBy}\n          >\n            <ha-svg-icon slot=\"trailing-icon\" .path=${mdiMenuDown}></ha-svg-icon\n          ></ha-assist-chip>\n        `\n      : nothing;\n\n    const settingsButton = html`<ha-assist-chip\n      class=\"has-dropdown select-mode-chip\"\n      @click=${this._openSettings}\n      .title=${localize(\"ui.components.subpage-data-table.settings\")}\n    >\n      <ha-svg-icon slot=\"icon\" .path=${mdiCog}></ha-svg-icon>\n    </ha-assist-chip>`;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .localizeFunc=${this.localizeFunc}\n        .narrow=${this.narrow}\n        .isWide=${this.isWide}\n        .backPath=${this.backPath}\n        .backCallback=${this.backCallback}\n        .route=${this.route}\n        .tabs=${this.tabs}\n        .mainPage=${this.mainPage}\n        .supervisor=${this.supervisor}\n        .pane=${showPane && this.showFilters}\n        @sorting-changed=${this._sortingChanged}\n      >\n        ${this._selectMode\n          ? html`<div class=\"selection-bar\" slot=\"toolbar\">\n              <div class=\"selection-controls\">\n                <ha-icon-button\n                  .path=${mdiClose}\n                  @click=${this._disableSelectMode}\n                  .label=${localize(\n                    \"ui.components.subpage-data-table.exit_selection_mode\"\n                  )}\n                ></ha-icon-button>\n                <ha-md-button-menu positioning=\"absolute\">\n                  <ha-assist-chip\n                    .label=${localize(\n                      \"ui.components.subpage-data-table.select\"\n                    )}\n                    slot=\"trigger\"\n                  >\n                    <ha-svg-icon\n                      slot=\"icon\"\n                      .path=${mdiFormatListChecks}\n                    ></ha-svg-icon>\n                    <ha-svg-icon\n                      slot=\"trailing-icon\"\n                      .path=${mdiMenuDown}\n                    ></ha-svg-icon\n                  ></ha-assist-chip>\n                  <ha-md-menu-item\n                    .value=${undefined}\n                    @click=${this._selectAll}\n                  >\n                    <div slot=\"headline\">\n                      ${localize(\"ui.components.subpage-data-table.select_all\")}\n                    </div>\n                  </ha-md-menu-item>\n                  <ha-md-menu-item\n                    .value=${undefined}\n                    @click=${this._selectNone}\n                  >\n                    <div slot=\"headline\">\n                      ${localize(\n                        \"ui.components.subpage-data-table.select_none\"\n                      )}\n                    </div>\n                  </ha-md-menu-item>\n                  <ha-md-divider role=\"separator\" tabindex=\"-1\"></ha-md-divider>\n                  <ha-md-menu-item\n                    .value=${undefined}\n                    @click=${this._disableSelectMode}\n                  >\n                    <div slot=\"headline\">\n                      ${localize(\n                        \"ui.components.subpage-data-table.exit_selection_mode\"\n                      )}\n                    </div>\n                  </ha-md-menu-item>\n                </ha-md-button-menu>\n                ${this.selected !== undefined\n                  ? html`<p>\n                      ${localize(\"ui.components.subpage-data-table.selected\", {\n                        selected: this.selected || \"0\",\n                      })}\n                    </p>`\n                  : nothing}\n              </div>\n              <div class=\"center-vertical\">\n                <slot name=\"selection-bar\"></slot>\n              </div>\n            </div>`\n          : nothing}\n        ${this.showFilters\n          ? !showPane\n            ? nothing\n            : html`<div class=\"pane\" slot=\"pane\">\n                <div class=\"table-header\">\n                  <ha-assist-chip\n                    .label=${localize(\n                      \"ui.components.subpage-data-table.filters\"\n                    )}\n                    active\n                    @click=${this._toggleFilters}\n                  >\n                    <ha-svg-icon\n                      slot=\"icon\"\n                      .path=${mdiFilterVariant}\n                    ></ha-svg-icon>\n                  </ha-assist-chip>\n                  ${this.filters\n                    ? html`<ha-icon-button\n                        .path=${mdiFilterVariantRemove}\n                        @click=${this._clearFilters}\n                        .label=${localize(\n                          \"ui.components.subpage-data-table.clear_filter\"\n                        )}\n                      ></ha-icon-button>`\n                    : nothing}\n                </div>\n                <div class=\"pane-content\">\n                  <slot name=\"filter-pane\"></slot>\n                </div>\n              </div>`\n          : nothing}\n        ${this.empty\n          ? html`<div class=\"center\">\n              <slot name=\"empty\">${this.noDataText}</slot>\n            </div>`\n          : html`<div slot=\"toolbar-icon\">\n                <slot name=\"toolbar-icon\"></slot>\n              </div>\n              ${this.narrow\n                ? html`\n                    <div slot=\"header\">\n                      <slot name=\"header\">\n                        <div class=\"search-toolbar\">${searchBar}</div>\n                      </slot>\n                    </div>\n                  `\n                : \"\"}\n              <ha-data-table\n                .hass=${this.hass}\n                .localize=${localize}\n                .narrow=${this.narrow}\n                .columns=${this.columns}\n                .data=${this.data}\n                .noDataText=${this.noDataText}\n                .filter=${this.filter}\n                .selectable=${this._selectMode}\n                .hasFab=${this.hasFab}\n                .id=${this.id}\n                .clickable=${this.clickable}\n                .appendRow=${this.appendRow}\n                .sortColumn=${this._sortColumn}\n                .sortDirection=${this._sortDirection}\n                .groupColumn=${this._groupColumn}\n                .groupOrder=${this.groupOrder}\n                .initialCollapsedGroups=${this.initialCollapsedGroups}\n                .columnOrder=${this.columnOrder}\n                .hiddenColumns=${this.hiddenColumns}\n              >\n                ${!this.narrow\n                  ? html`\n                      <div slot=\"header\">\n                        <slot name=\"header\">\n                          <div class=\"table-header\">\n                            ${this.hasFilters && !this.showFilters\n                              ? html`${filterButton}`\n                              : nothing}${selectModeBtn}${searchBar}${groupByMenu}${sortByMenu}${settingsButton}\n                          </div>\n                        </slot>\n                      </div>\n                    `\n                  : html`<div slot=\"header\"></div>\n                      <div slot=\"header-row\" class=\"narrow-header-row\">\n                        ${this.hasFilters && !this.showFilters\n                          ? html`${filterButton}`\n                          : nothing}\n                        ${selectModeBtn}${groupByMenu}${sortByMenu}${settingsButton}\n                      </div>`}\n              </ha-data-table>`}\n        <div slot=\"fab\"><slot name=\"fab\"></slot></div>\n      </hass-tabs-subpage>\n      <ha-menu anchor=\"group-by-anchor\" id=\"group-by-menu\" positioning=\"fixed\">\n        ${Object.entries(this.columns).map(([id, column]) =>\n          column.groupable\n            ? html`\n                <ha-md-menu-item\n                  .value=${id}\n                  @click=${this._handleGroupBy}\n                  .selected=${id === this._groupColumn}\n                  class=${classMap({ selected: id === this._groupColumn })}\n                >\n                  ${column.title || column.label}\n                </ha-md-menu-item>\n              `\n            : nothing\n        )}\n        <ha-md-menu-item\n          .value=${undefined}\n          @click=${this._handleGroupBy}\n          .selected=${this._groupColumn === undefined}\n          class=${classMap({ selected: this._groupColumn === undefined })}\n        >\n          ${localize(\"ui.components.subpage-data-table.dont_group_by\")}\n        </ha-md-menu-item>\n        <ha-md-divider role=\"separator\" tabindex=\"-1\"></ha-md-divider>\n        <ha-md-menu-item\n          @click=${this._collapseAllGroups}\n          .disabled=${this._groupColumn === undefined}\n        >\n          <ha-svg-icon\n            slot=\"start\"\n            .path=${mdiUnfoldLessHorizontal}\n          ></ha-svg-icon>\n          ${localize(\"ui.components.subpage-data-table.collapse_all_groups\")}\n        </ha-md-menu-item>\n        <ha-md-menu-item\n          @click=${this._expandAllGroups}\n          .disabled=${this._groupColumn === undefined}\n        >\n          <ha-svg-icon\n            slot=\"start\"\n            .path=${mdiUnfoldMoreHorizontal}\n          ></ha-svg-icon>\n          ${localize(\"ui.components.subpage-data-table.expand_all_groups\")}\n        </ha-md-menu-item>\n      </ha-menu>\n      <ha-menu anchor=\"sort-by-anchor\" id=\"sort-by-menu\" positioning=\"fixed\">\n        ${Object.entries(this.columns).map(([id, column]) =>\n          column.sortable\n            ? html`\n                <ha-md-menu-item\n                  .value=${id}\n                  @click=${this._handleSortBy}\n                  keep-open\n                  .selected=${id === this._sortColumn}\n                  class=${classMap({ selected: id === this._sortColumn })}\n                >\n                  ${this._sortColumn === id\n                    ? html`\n                        <ha-svg-icon\n                          slot=\"end\"\n                          .path=${this._sortDirection === \"desc\"\n                            ? mdiArrowDown\n                            : mdiArrowUp}\n                        ></ha-svg-icon>\n                      `\n                    : nothing}\n                  ${column.title || column.label}\n                </ha-md-menu-item>\n              `\n            : nothing\n        )}\n      </ha-menu>\n      ${this.showFilters && !showPane\n        ? html`<ha-dialog\n            open\n            .heading=${localize(\"ui.components.subpage-data-table.filters\")}\n          >\n            <ha-dialog-header slot=\"heading\">\n              <ha-icon-button\n                slot=\"navigationIcon\"\n                .path=${mdiClose}\n                @click=${this._toggleFilters}\n                .label=${localize(\n                  \"ui.components.subpage-data-table.close_filter\"\n                )}\n              ></ha-icon-button>\n              <span slot=\"title\"\n                >${localize(\"ui.components.subpage-data-table.filters\")}</span\n              >\n              ${this.filters\n                ? html`<ha-icon-button\n                    slot=\"actionItems\"\n                    @click=${this._clearFilters}\n                    .path=${mdiFilterVariantRemove}\n                    .label=${localize(\n                      \"ui.components.subpage-data-table.clear_filter\"\n                    )}\n                  ></ha-icon-button>`\n                : nothing}\n            </ha-dialog-header>\n            <div class=\"filter-dialog-content\">\n              <slot name=\"filter-pane\"></slot>\n            </div>\n            <div slot=\"primaryAction\">\n              <ha-button @click=${this._toggleFilters}>\n                ${localize(\"ui.components.subpage-data-table.show_results\", {\n                  number: this.data.length,\n                })}\n              </ha-button>\n            </div>\n          </ha-dialog>`\n        : nothing}\n    `;\n  }\n\n  private _clearFilters() {\n    fireEvent(this, \"clear-filter\");\n  }\n\n  private _toggleFilters() {\n    this.showFilters = !this.showFilters;\n  }\n\n  private _sortingChanged(ev) {\n    this._sortDirection = ev.detail.direction;\n    this._sortColumn = this._sortDirection ? ev.detail.column : undefined;\n  }\n\n  private _handleSortBy(ev) {\n    const columnId = ev.currentTarget.value;\n    if (!this._sortDirection || this._sortColumn !== columnId) {\n      this._sortDirection = \"asc\";\n    } else if (this._sortDirection === \"asc\") {\n      this._sortDirection = \"desc\";\n    } else {\n      this._sortDirection = null;\n    }\n    this._sortColumn = this._sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this._sortDirection,\n    });\n  }\n\n  private _handleGroupBy(ev) {\n    this._setGroupColumn(ev.currentTarget.value);\n  }\n\n  private _setGroupColumn(columnId: string) {\n    this._groupColumn = columnId;\n    fireEvent(this, \"grouping-changed\", { value: columnId });\n  }\n\n  private _openSettings() {\n    showDataTableSettingsDialog(this, {\n      columns: this.columns,\n      hiddenColumns: this.hiddenColumns,\n      columnOrder: this.columnOrder,\n      onUpdate: (\n        columnOrder: string[] | undefined,\n        hiddenColumns: string[] | undefined\n      ) => {\n        this.columnOrder = columnOrder;\n        this.hiddenColumns = hiddenColumns;\n        fireEvent(this, \"columns-changed\", { columnOrder, hiddenColumns });\n      },\n      localizeFunc: this.localizeFunc,\n    });\n  }\n\n  private _collapseAllGroups() {\n    this._dataTable.collapseAllGroups();\n  }\n\n  private _expandAllGroups() {\n    this._dataTable.expandAllGroups();\n  }\n\n  private _enableSelectMode() {\n    this._selectMode = true;\n  }\n\n  private _disableSelectMode() {\n    this._selectMode = false;\n    this._dataTable.clearSelection();\n  }\n\n  private _selectAll() {\n    this._dataTable.selectAll();\n  }\n\n  private _selectNone() {\n    this._dataTable.clearSelection();\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    if (this.filter === ev.detail.value) {\n      return;\n    }\n    this.filter = ev.detail.value;\n    fireEvent(this, \"search-changed\", { value: this.filter });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n      }\n\n      ha-data-table {\n        width: 100%;\n        height: 100%;\n        --data-table-border-width: 0;\n      }\n      :host(:not([narrow])) ha-data-table,\n      .pane {\n        height: calc(100vh - 1px - var(--header-height));\n        display: block;\n      }\n\n      .pane-content {\n        height: calc(100vh - 1px - var(--header-height) - var(--header-height));\n        display: flex;\n        flex-direction: column;\n      }\n\n      :host([narrow]) hass-tabs-subpage {\n        --main-title-margin: 0;\n      }\n      :host([narrow]) {\n        --expansion-panel-summary-padding: 0 16px;\n      }\n      .table-header {\n        display: flex;\n        align-items: center;\n        --mdc-shape-small: 0;\n        height: 56px;\n        width: 100%;\n        justify-content: space-between;\n        padding: 0 16px;\n        gap: 16px;\n        box-sizing: border-box;\n        background: var(--primary-background-color);\n        border-bottom: 1px solid var(--divider-color);\n      }\n      search-input-outlined {\n        flex: 1;\n      }\n      .search-toolbar {\n        display: flex;\n        align-items: center;\n        color: var(--secondary-text-color);\n      }\n      .filters {\n        --mdc-text-field-fill-color: var(--input-fill-color);\n        --mdc-text-field-idle-line-color: var(--input-idle-line-color);\n        --mdc-shape-small: 4px;\n        --text-field-overflow: initial;\n        display: flex;\n        justify-content: flex-end;\n        color: var(--primary-text-color);\n      }\n      .active-filters {\n        color: var(--primary-text-color);\n        position: relative;\n        display: flex;\n        align-items: center;\n        padding: 2px 2px 2px 8px;\n        margin-left: 4px;\n        margin-inline-start: 4px;\n        margin-inline-end: initial;\n        font-size: 14px;\n        width: max-content;\n        cursor: initial;\n        direction: var(--direction);\n      }\n      .active-filters ha-svg-icon {\n        color: var(--primary-color);\n      }\n      .active-filters mwc-button {\n        margin-left: 8px;\n        margin-inline-start: 8px;\n        margin-inline-end: initial;\n        direction: var(--direction);\n      }\n      .active-filters::before {\n        background-color: var(--primary-color);\n        opacity: 0.12;\n        border-radius: 4px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        content: \"\";\n      }\n      .badge {\n        min-width: 20px;\n        box-sizing: border-box;\n        border-radius: 50%;\n        font-weight: 400;\n        background-color: var(--primary-color);\n        line-height: 20px;\n        text-align: center;\n        padding: 0px 4px;\n        color: var(--text-primary-color);\n        position: absolute;\n        right: 0;\n        inset-inline-end: 0;\n        inset-inline-start: initial;\n        top: 4px;\n        font-size: 0.65em;\n      }\n      .center {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        box-sizing: border-box;\n        height: 100%;\n        width: 100%;\n        padding: 16px;\n      }\n\n      .badge {\n        position: absolute;\n        top: -4px;\n        right: -4px;\n        inset-inline-end: -4px;\n        inset-inline-start: initial;\n        min-width: 16px;\n        box-sizing: border-box;\n        border-radius: 50%;\n        font-weight: 400;\n        font-size: 11px;\n        background-color: var(--primary-color);\n        line-height: 16px;\n        text-align: center;\n        padding: 0px 2px;\n        color: var(--text-primary-color);\n      }\n\n      .narrow-header-row {\n        display: flex;\n        align-items: center;\n        gap: 16px;\n        padding: 0 16px;\n        overflow-x: scroll;\n        -ms-overflow-style: none;\n        scrollbar-width: none;\n      }\n\n      .selection-bar {\n        background: rgba(var(--rgb-primary-color), 0.1);\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 8px 12px;\n        box-sizing: border-box;\n        font-size: 14px;\n        --ha-assist-chip-container-color: var(--card-background-color);\n      }\n\n      .selection-controls {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      }\n\n      .selection-controls p {\n        margin-left: 8px;\n        margin-inline-start: 8px;\n        margin-inline-end: initial;\n      }\n\n      .center-vertical {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      }\n\n      .relative {\n        position: relative;\n      }\n\n      ha-assist-chip {\n        --ha-assist-chip-container-shape: 10px;\n        --ha-assist-chip-container-color: var(--card-background-color);\n      }\n\n      .select-mode-chip {\n        --md-assist-chip-icon-label-space: 0;\n        --md-assist-chip-trailing-space: 8px;\n      }\n\n      ha-dialog {\n        --mdc-dialog-min-width: calc(\n          100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n        );\n        --mdc-dialog-max-width: calc(\n          100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n        );\n        --mdc-dialog-min-height: 100%;\n        --mdc-dialog-max-height: 100%;\n        --vertical-align-dialog: flex-end;\n        --ha-dialog-border-radius: 0;\n        --dialog-content-padding: 0;\n      }\n\n      .filter-dialog-content {\n        height: calc(100vh - 1px - 61px - var(--header-height));\n        display: flex;\n        flex-direction: column;\n      }\n\n      #sort-by-anchor,\n      #group-by-anchor,\n      ha-md-button-menu ha-assist-chip {\n        --md-assist-chip-trailing-space: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-tabs-subpage-data-table\": HaTabsSubpageDataTable;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"search-changed\": { value: string };\n    \"grouping-changed\": { value: string };\n    \"columns-changed\": {\n      columnOrder: string[] | undefined;\n      hiddenColumns: string[] | undefined;\n    };\n    \"clear-filter\": undefined;\n  }\n}\n","import { css } from \"lit\";\n\nexport const buttonLinkStyle = css`\n  button.link {\n    background: none;\n    color: inherit;\n    border: none;\n    padding: 0;\n    font: inherit;\n    text-align: left;\n    text-decoration: underline;\n    cursor: pointer;\n    outline: none;\n  }\n`;\n\nexport const haStyle = css`\n  :host {\n    font-family: var(--paper-font-body1_-_font-family);\n    -webkit-font-smoothing: var(--paper-font-body1_-_-webkit-font-smoothing);\n    font-size: var(--paper-font-body1_-_font-size);\n    font-weight: var(--paper-font-body1_-_font-weight);\n    line-height: var(--paper-font-body1_-_line-height);\n  }\n\n  app-header div[sticky] {\n    height: 48px;\n  }\n\n  app-toolbar [main-title] {\n    margin-left: 20px;\n    margin-inline-start: 20px;\n    margin-inline-end: initial;\n  }\n\n  h1 {\n    font-family: var(--paper-font-headline_-_font-family);\n    -webkit-font-smoothing: var(--paper-font-headline_-_-webkit-font-smoothing);\n    white-space: var(--paper-font-headline_-_white-space);\n    overflow: var(--paper-font-headline_-_overflow);\n    text-overflow: var(--paper-font-headline_-_text-overflow);\n    font-size: var(--paper-font-headline_-_font-size);\n    font-weight: var(--paper-font-headline_-_font-weight);\n    line-height: var(--paper-font-headline_-_line-height);\n  }\n\n  h2 {\n    font-family: var(--paper-font-title_-_font-family);\n    -webkit-font-smoothing: var(--paper-font-title_-_-webkit-font-smoothing);\n    white-space: var(--paper-font-title_-_white-space);\n    overflow: var(--paper-font-title_-_overflow);\n    text-overflow: var(--paper-font-title_-_text-overflow);\n    font-size: var(--paper-font-title_-_font-size);\n    font-weight: var(--paper-font-title_-_font-weight);\n    line-height: var(--paper-font-title_-_line-height);\n  }\n\n  h3 {\n    font-family: var(--paper-font-subhead_-_font-family);\n    -webkit-font-smoothing: var(--paper-font-subhead_-_-webkit-font-smoothing);\n    white-space: var(--paper-font-subhead_-_white-space);\n    overflow: var(--paper-font-subhead_-_overflow);\n    text-overflow: var(--paper-font-subhead_-_text-overflow);\n    font-size: var(--paper-font-subhead_-_font-size);\n    font-weight: var(--paper-font-subhead_-_font-weight);\n    line-height: var(--paper-font-subhead_-_line-height);\n  }\n\n  a {\n    color: var(--primary-color);\n  }\n\n  .secondary {\n    color: var(--secondary-text-color);\n  }\n\n  .error {\n    color: var(--error-color);\n  }\n\n  .warning {\n    color: var(--error-color);\n  }\n\n  ha-button.warning,\n  mwc-button.warning {\n    --mdc-theme-primary: var(--error-color);\n  }\n\n  ${buttonLinkStyle}\n\n  .card-actions a {\n    text-decoration: none;\n  }\n\n  .card-actions .warning {\n    --mdc-theme-primary: var(--error-color);\n  }\n\n  .layout.horizontal,\n  .layout.vertical {\n    display: flex;\n  }\n  .layout.inline {\n    display: inline-flex;\n  }\n  .layout.horizontal {\n    flex-direction: row;\n  }\n  .layout.vertical {\n    flex-direction: column;\n  }\n  .layout.wrap {\n    flex-wrap: wrap;\n  }\n  .layout.no-wrap {\n    flex-wrap: nowrap;\n  }\n  .layout.center,\n  .layout.center-center {\n    align-items: center;\n  }\n  .layout.bottom {\n    align-items: flex-end;\n  }\n  .layout.center-justified,\n  .layout.center-center {\n    justify-content: center;\n  }\n  .flex {\n    flex: 1;\n    flex-basis: 0.000000001px;\n  }\n  .flex-auto {\n    flex: 1 1 auto;\n  }\n  .flex-none {\n    flex: none;\n  }\n  .layout.justified {\n    justify-content: space-between;\n  }\n`;\n\nexport const haStyleDialog = css`\n  /* mwc-dialog (ha-dialog) styles */\n  ha-dialog {\n    --mdc-dialog-min-width: 400px;\n    --mdc-dialog-max-width: 600px;\n    --mdc-dialog-max-width: min(600px, 95vw);\n    --justify-action-buttons: space-between;\n  }\n\n  ha-dialog .form {\n    color: var(--primary-text-color);\n  }\n\n  a {\n    color: var(--primary-color);\n  }\n\n  /* make dialog fullscreen on small screens */\n  @media all and (max-width: 450px), all and (max-height: 500px) {\n    ha-dialog {\n      --mdc-dialog-min-width: calc(\n        100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n      );\n      --mdc-dialog-max-width: calc(\n        100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n      );\n      --mdc-dialog-min-height: 100%;\n      --mdc-dialog-max-height: 100%;\n      --vertical-align-dialog: flex-end;\n      --ha-dialog-border-radius: 0;\n    }\n  }\n  mwc-button.warning,\n  ha-button.warning {\n    --mdc-theme-primary: var(--error-color);\n  }\n  .error {\n    color: var(--error-color);\n  }\n`;\n\nexport const haStyleScrollbar = css`\n  .ha-scrollbar::-webkit-scrollbar {\n    width: 0.4rem;\n    height: 0.4rem;\n  }\n\n  .ha-scrollbar::-webkit-scrollbar-thumb {\n    -webkit-border-radius: 4px;\n    border-radius: 4px;\n    background: var(--scrollbar-thumb-color);\n  }\n\n  .ha-scrollbar {\n    overflow-y: auto;\n    scrollbar-color: var(--scrollbar-thumb-color) transparent;\n    scrollbar-width: thin;\n  }\n`;\n\nexport const baseEntrypointStyles = css`\n  body {\n    background-color: var(--primary-background-color);\n    color: var(--primary-text-color);\n    height: calc(100vh - 32px);\n    width: 100vw;\n  }\n`;\n"],"names":[],"sourceRoot":""}