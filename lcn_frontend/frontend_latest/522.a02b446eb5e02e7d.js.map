{"version":3,"file":"522.a02b446eb5e02e7d.js","sources":["webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/index.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/polyfill-force.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/BasicFormatMatcher.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/BestFitFormatMatcher.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/DateTimeStyleFormat.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/FormatDateTime.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/FormatDateTimePattern.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/FormatDateTimeRange.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/FormatDateTimeRangeToParts.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/FormatDateTimeToParts.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/InitializeDateTimeFormat.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/PartitionDateTimePattern.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/PartitionDateTimeRangePattern.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/ToDateTimeOptions.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/ToLocalTime.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/skeleton.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/abstract/utils.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/core.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/data/links.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/get_internal_slots.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/packer.js","webpack://lcn-frontend/./node_modules/@formatjs/intl-datetimeformat/src/to_locale_string.js","webpack://lcn-frontend/./node_modules/decimal.js/decimal.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./src/core\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar _1 = require(\"./\");\nvar to_locale_string_1 = require(\"./src/to_locale_string\");\n(0, ecma402_abstract_1.defineProperty)(Intl, 'DateTimeFormat', { value: _1.DateTimeFormat });\n(0, ecma402_abstract_1.defineProperty)(Date.prototype, 'toLocaleString', {\n    value: function toLocaleString(locales, options) {\n        if (options === void 0) { options = {\n            dateStyle: 'short',\n            timeStyle: 'medium',\n        }; }\n        try {\n            return (0, to_locale_string_1.toLocaleString)(this, locales, options);\n        }\n        catch (error) {\n            return 'Invalid Date';\n        }\n    },\n});\n(0, ecma402_abstract_1.defineProperty)(Date.prototype, 'toLocaleDateString', {\n    value: function toLocaleDateString(locales, options) {\n        if (options === void 0) { options = {\n            dateStyle: 'short',\n        }; }\n        try {\n            return (0, to_locale_string_1.toLocaleDateString)(this, locales, options);\n        }\n        catch (error) {\n            return 'Invalid Date';\n        }\n    },\n});\n(0, ecma402_abstract_1.defineProperty)(Date.prototype, 'toLocaleTimeString', {\n    value: function toLocaleTimeString(locales, options) {\n        if (options === void 0) { options = {\n            timeStyle: 'medium',\n        }; }\n        try {\n            return (0, to_locale_string_1.toLocaleTimeString)(this, locales, options);\n        }\n        catch (error) {\n            return 'Invalid Date';\n        }\n    },\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasicFormatMatcher = BasicFormatMatcher;\nvar tslib_1 = require(\"tslib\");\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar utils_1 = require(\"./utils\");\n/**\n * https://tc39.es/ecma402/#sec-basicformatmatcher\n * @param options\n * @param formats\n */\nfunction BasicFormatMatcher(options, formats) {\n    var bestScore = -Infinity;\n    var bestFormat = formats[0];\n    (0, ecma402_abstract_1.invariant)(Array.isArray(formats), 'formats should be a list of things');\n    for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {\n        var format = formats_1[_i];\n        var score = 0;\n        for (var _a = 0, DATE_TIME_PROPS_1 = utils_1.DATE_TIME_PROPS; _a < DATE_TIME_PROPS_1.length; _a++) {\n            var prop = DATE_TIME_PROPS_1[_a];\n            var optionsProp = options[prop];\n            var formatProp = format[prop];\n            if (optionsProp === undefined && formatProp !== undefined) {\n                score -= utils_1.additionPenalty;\n            }\n            else if (optionsProp !== undefined && formatProp === undefined) {\n                score -= utils_1.removalPenalty;\n            }\n            else if (prop === 'timeZoneName') {\n                if (optionsProp === 'short' || optionsProp === 'shortGeneric') {\n                    if (formatProp === 'shortOffset') {\n                        score -= utils_1.offsetPenalty;\n                    }\n                    else if (formatProp === 'longOffset') {\n                        score -= utils_1.offsetPenalty + utils_1.shortMorePenalty;\n                    }\n                    else if (optionsProp === 'short' && formatProp === 'long') {\n                        score -= utils_1.shortMorePenalty;\n                    }\n                    else if (optionsProp === 'shortGeneric' &&\n                        formatProp === 'longGeneric') {\n                        score -= utils_1.shortMorePenalty;\n                    }\n                    else if (optionsProp !== formatProp) {\n                        score -= utils_1.removalPenalty;\n                    }\n                }\n                else if (optionsProp === 'shortOffset' &&\n                    formatProp === 'longOffset') {\n                    score -= utils_1.shortMorePenalty;\n                }\n                else if (optionsProp === 'long' || optionsProp === 'longGeneric') {\n                    if (formatProp === 'longOffset') {\n                        score -= utils_1.offsetPenalty;\n                    }\n                    else if (formatProp === 'shortOffset') {\n                        score -= utils_1.offsetPenalty + utils_1.longLessPenalty;\n                    }\n                    else if (optionsProp === 'long' && formatProp === 'short') {\n                        score -= utils_1.longLessPenalty;\n                    }\n                    else if (optionsProp === 'longGeneric' &&\n                        formatProp === 'shortGeneric') {\n                        score -= utils_1.longLessPenalty;\n                    }\n                    else if (optionsProp !== formatProp) {\n                        score -= utils_1.removalPenalty;\n                    }\n                }\n                else if (optionsProp === 'longOffset' &&\n                    formatProp === 'shortOffset') {\n                    score -= utils_1.longLessPenalty;\n                }\n                else if (optionsProp !== formatProp) {\n                    score -= utils_1.removalPenalty;\n                }\n            }\n            else if (optionsProp !== formatProp) {\n                var values = void 0;\n                if (prop === 'fractionalSecondDigits') {\n                    values = [1, 2, 3];\n                }\n                else {\n                    values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n                }\n                var optionsPropIndex = values.indexOf(optionsProp);\n                var formatPropIndex = values.indexOf(formatProp);\n                var delta = Math.max(-2, Math.min(formatPropIndex - optionsPropIndex, 2));\n                if (delta === 2) {\n                    score -= utils_1.longMorePenalty;\n                }\n                else if (delta === 1) {\n                    score -= utils_1.shortMorePenalty;\n                }\n                else if (delta === -1) {\n                    score -= utils_1.shortLessPenalty;\n                }\n                else if (delta === -2) {\n                    score -= utils_1.longLessPenalty;\n                }\n            }\n        }\n        if (score > bestScore) {\n            bestScore = score;\n            bestFormat = format;\n        }\n    }\n    return tslib_1.__assign({}, bestFormat);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bestFitFormatMatcherScore = bestFitFormatMatcherScore;\nexports.BestFitFormatMatcher = BestFitFormatMatcher;\nvar tslib_1 = require(\"tslib\");\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar skeleton_1 = require(\"./skeleton\");\nvar utils_1 = require(\"./utils\");\nfunction isNumericType(t) {\n    return t === 'numeric' || t === '2-digit';\n}\n/**\n * Credit: https://github.com/andyearnshaw/Intl.js/blob/0958dc1ad8153f1056653ea22b8208f0df289a4e/src/12.datetimeformat.js#L611\n * with some modifications\n * @param options\n * @param format\n */\nfunction bestFitFormatMatcherScore(options, format) {\n    var score = 0;\n    if (options.hour12 && !format.hour12) {\n        score -= utils_1.removalPenalty;\n    }\n    else if (!options.hour12 && format.hour12) {\n        score -= utils_1.additionPenalty;\n    }\n    for (var _i = 0, DATE_TIME_PROPS_1 = utils_1.DATE_TIME_PROPS; _i < DATE_TIME_PROPS_1.length; _i++) {\n        var prop = DATE_TIME_PROPS_1[_i];\n        var optionsProp = options[prop];\n        var formatProp = format[prop];\n        if (optionsProp === undefined && formatProp !== undefined) {\n            score -= utils_1.additionPenalty;\n        }\n        else if (optionsProp !== undefined && formatProp === undefined) {\n            score -= utils_1.removalPenalty;\n        }\n        else if (optionsProp !== formatProp) {\n            // extra penalty for numeric vs non-numeric\n            if (isNumericType(optionsProp) !==\n                isNumericType(formatProp)) {\n                score -= utils_1.differentNumericTypePenalty;\n            }\n            else {\n                var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n                var optionsPropIndex = values.indexOf(optionsProp);\n                var formatPropIndex = values.indexOf(formatProp);\n                var delta = Math.max(-2, Math.min(formatPropIndex - optionsPropIndex, 2));\n                if (delta === 2) {\n                    score -= utils_1.longMorePenalty;\n                }\n                else if (delta === 1) {\n                    score -= utils_1.shortMorePenalty;\n                }\n                else if (delta === -1) {\n                    score -= utils_1.shortLessPenalty;\n                }\n                else if (delta === -2) {\n                    score -= utils_1.longLessPenalty;\n                }\n            }\n        }\n    }\n    return score;\n}\n/**\n * https://tc39.es/ecma402/#sec-bestfitformatmatcher\n * Just alias to basic for now\n * @param options\n * @param formats\n * @param implDetails Implementation details\n */\nfunction BestFitFormatMatcher(options, formats) {\n    var bestScore = -Infinity;\n    var bestFormat = formats[0];\n    (0, ecma402_abstract_1.invariant)(Array.isArray(formats), 'formats should be a list of things');\n    for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {\n        var format = formats_1[_i];\n        var score = bestFitFormatMatcherScore(options, format);\n        if (score > bestScore) {\n            bestScore = score;\n            bestFormat = format;\n        }\n    }\n    var skeletonFormat = tslib_1.__assign({}, bestFormat);\n    var patternFormat = { rawPattern: bestFormat.rawPattern };\n    (0, skeleton_1.processDateTimePattern)(bestFormat.rawPattern, patternFormat);\n    // Kinda following https://github.com/unicode-org/icu/blob/dd50e38f459d84e9bf1b0c618be8483d318458ad/icu4j/main/classes/core/src/com/ibm/icu/text/DateTimePatternGenerator.java\n    // Method adjustFieldTypes\n    for (var prop in skeletonFormat) {\n        var skeletonValue = skeletonFormat[prop];\n        var patternValue = patternFormat[prop];\n        var requestedValue = options[prop];\n        // Don't mess with minute/second or we can get in the situation of\n        // 7:0:0 which is weird\n        if (prop === 'minute' || prop === 'second') {\n            continue;\n        }\n        // Nothing to do here\n        if (!requestedValue) {\n            continue;\n        }\n        // https://unicode.org/reports/tr35/tr35-dates.html#Matching_Skeletons\n        // Looks like we should not convert numeric to alphabetic but the other way\n        // around is ok\n        if (isNumericType(patternValue) &&\n            !isNumericType(requestedValue)) {\n            continue;\n        }\n        if (skeletonValue === requestedValue) {\n            continue;\n        }\n        patternFormat[prop] = requestedValue;\n    }\n    // Copy those over\n    patternFormat.pattern = skeletonFormat.pattern;\n    patternFormat.pattern12 = skeletonFormat.pattern12;\n    patternFormat.skeleton = skeletonFormat.skeleton;\n    patternFormat.rangePatterns = skeletonFormat.rangePatterns;\n    patternFormat.rangePatterns12 = skeletonFormat.rangePatterns12;\n    return patternFormat;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DateTimeStyleFormat = DateTimeStyleFormat;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nfunction DateTimeStyleFormat(dateStyle, timeStyle, dataLocaleData) {\n    var dateFormat, timeFormat;\n    if (timeStyle !== undefined) {\n        (0, ecma402_abstract_1.invariant)(timeStyle === 'full' ||\n            timeStyle === 'long' ||\n            timeStyle === 'medium' ||\n            timeStyle === 'short', 'invalid timeStyle');\n        timeFormat = dataLocaleData.timeFormat[timeStyle];\n    }\n    if (dateStyle !== undefined) {\n        (0, ecma402_abstract_1.invariant)(dateStyle === 'full' ||\n            dateStyle === 'long' ||\n            dateStyle === 'medium' ||\n            dateStyle === 'short', 'invalid dateStyle');\n        dateFormat = dataLocaleData.dateFormat[dateStyle];\n    }\n    if (dateStyle !== undefined && timeStyle !== undefined) {\n        var format = {};\n        for (var field in dateFormat) {\n            if (field !== 'pattern') {\n                // @ts-ignore\n                format[field] = dateFormat[field];\n            }\n        }\n        for (var field in timeFormat) {\n            if (field !== 'pattern' && field !== 'pattern12') {\n                // @ts-ignore\n                format[field] = timeFormat[field];\n            }\n        }\n        var connector = dataLocaleData.dateTimeFormat[dateStyle];\n        var pattern = connector\n            .replace('{0}', timeFormat.pattern)\n            .replace('{1}', dateFormat.pattern);\n        format.pattern = pattern;\n        if ('pattern12' in timeFormat) {\n            var pattern12 = connector\n                .replace('{0}', timeFormat.pattern12)\n                .replace('{1}', dateFormat.pattern);\n            format.pattern12 = pattern12;\n        }\n        return format;\n    }\n    if (timeStyle !== undefined) {\n        return timeFormat;\n    }\n    (0, ecma402_abstract_1.invariant)(dateStyle !== undefined, 'dateStyle should not be undefined');\n    return dateFormat;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatDateTime = FormatDateTime;\nvar PartitionDateTimePattern_1 = require(\"./PartitionDateTimePattern\");\n/**\n * https://tc39.es/ecma402/#sec-formatdatetime\n * @param dtf DateTimeFormat\n * @param x\n */\nfunction FormatDateTime(dtf, x, implDetails) {\n    var parts = (0, PartitionDateTimePattern_1.PartitionDateTimePattern)(dtf, x, implDetails);\n    var result = '';\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n        var part = parts_1[_i];\n        result += part.value;\n    }\n    return result;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatDateTimePattern = FormatDateTimePattern;\nvar tslib_1 = require(\"tslib\");\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar decimal_js_1 = tslib_1.__importDefault(require(\"decimal.js\"));\nvar ToLocalTime_1 = require(\"./ToLocalTime\");\nvar utils_1 = require(\"./utils\");\nfunction pad(n) {\n    if (n < 10) {\n        return \"0\".concat(n);\n    }\n    return String(n);\n}\nfunction offsetToGmtString(gmtFormat, hourFormat, offsetInMs, style) {\n    var offsetInMinutes = Math.floor(offsetInMs / 60000);\n    var mins = Math.abs(offsetInMinutes) % 60;\n    var hours = Math.floor(Math.abs(offsetInMinutes) / 60);\n    var _a = hourFormat.split(';'), positivePattern = _a[0], negativePattern = _a[1];\n    var offsetStr = '';\n    var pattern = offsetInMs < 0 ? negativePattern : positivePattern;\n    if (style === 'long') {\n        offsetStr = pattern\n            .replace('HH', pad(hours))\n            .replace('H', String(hours))\n            .replace('mm', pad(mins))\n            .replace('m', String(mins));\n    }\n    else if (mins || hours) {\n        if (!mins) {\n            pattern = pattern.replace(/:?m+/, '');\n        }\n        offsetStr = pattern.replace(/H+/, String(hours)).replace(/m+/, String(mins));\n    }\n    return gmtFormat.replace('{0}', offsetStr);\n}\n/**\n * https://tc39.es/ecma402/#sec-partitiondatetimepattern\n * @param dtf\n * @param x\n */\nfunction FormatDateTimePattern(dtf, patternParts, x, _a) {\n    var getInternalSlots = _a.getInternalSlots, localeData = _a.localeData, getDefaultTimeZone = _a.getDefaultTimeZone, tzData = _a.tzData;\n    x = (0, ecma402_abstract_1.TimeClip)(x);\n    /** IMPL START */\n    var internalSlots = getInternalSlots(dtf);\n    var dataLocale = internalSlots.dataLocale;\n    var dataLocaleData = localeData[dataLocale];\n    /** IMPL END */\n    var locale = internalSlots.locale;\n    var nfOptions = Object.create(null);\n    nfOptions.useGrouping = false;\n    var nf = (0, ecma402_abstract_1.createMemoizedNumberFormat)(locale, nfOptions);\n    var nf2Options = Object.create(null);\n    nf2Options.minimumIntegerDigits = 2;\n    nf2Options.useGrouping = false;\n    var nf2 = (0, ecma402_abstract_1.createMemoizedNumberFormat)(locale, nf2Options);\n    var fractionalSecondDigits = internalSlots.fractionalSecondDigits;\n    var nf3;\n    if (fractionalSecondDigits !== undefined) {\n        var nf3Options = Object.create(null);\n        nf3Options.minimumIntegerDigits = fractionalSecondDigits;\n        nf3Options.useGrouping = false;\n        nf3 = (0, ecma402_abstract_1.createMemoizedNumberFormat)(locale, nf3Options);\n    }\n    var tm = (0, ToLocalTime_1.ToLocalTime)(x, \n    // @ts-ignore\n    internalSlots.calendar, internalSlots.timeZone, { tzData: tzData });\n    var result = [];\n    for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {\n        var patternPart = patternParts_1[_i];\n        var p = patternPart.type;\n        if (p === 'literal') {\n            result.push({\n                type: 'literal',\n                value: patternPart.value,\n            });\n        }\n        else if (p === 'fractionalSecondDigits') {\n            var v = new decimal_js_1.default(tm.millisecond)\n                .times(10)\n                .pow((fractionalSecondDigits || 0) - 3)\n                .floor()\n                .toNumber();\n            result.push({\n                type: 'fractionalSecond',\n                value: nf3.format(v),\n            });\n        }\n        else if (p === 'dayPeriod') {\n            var f = internalSlots.dayPeriod;\n            // @ts-ignore\n            var fv = tm[f];\n            result.push({ type: p, value: fv });\n        }\n        else if (p === 'timeZoneName') {\n            var f = internalSlots.timeZoneName;\n            var fv = void 0;\n            var timeZoneName = dataLocaleData.timeZoneName, gmtFormat = dataLocaleData.gmtFormat, hourFormat = dataLocaleData.hourFormat;\n            var timeZone = internalSlots.timeZone || getDefaultTimeZone();\n            var timeZoneData = timeZoneName[timeZone];\n            if (timeZoneData && timeZoneData[f]) {\n                fv = timeZoneData[f][+tm.inDST];\n            }\n            else {\n                // Fallback to gmtFormat\n                fv = offsetToGmtString(gmtFormat, hourFormat, tm.timeZoneOffset, f);\n            }\n            result.push({ type: p, value: fv });\n        }\n        else if (utils_1.DATE_TIME_PROPS.indexOf(p) > -1) {\n            var fv = '';\n            var f = internalSlots[p];\n            // @ts-ignore\n            var v = tm[p];\n            if (p === 'year' && v <= 0) {\n                v = 1 - v;\n            }\n            if (p === 'month') {\n                v++;\n            }\n            var hourCycle = internalSlots.hourCycle;\n            if (p === 'hour' && (hourCycle === 'h11' || hourCycle === 'h12')) {\n                v = v % 12;\n                if (v === 0 && hourCycle === 'h12') {\n                    v = 12;\n                }\n            }\n            if (p === 'hour' && hourCycle === 'h24') {\n                if (v === 0) {\n                    v = 24;\n                }\n            }\n            if (f === 'numeric') {\n                fv = nf.format(v);\n            }\n            else if (f === '2-digit') {\n                fv = nf2.format(v);\n                if (fv.length > 2) {\n                    fv = fv.slice(fv.length - 2, fv.length);\n                }\n            }\n            else if (f === 'narrow' || f === 'short' || f === 'long') {\n                if (p === 'era') {\n                    fv = dataLocaleData[p][f][v];\n                }\n                else if (p === 'month') {\n                    fv = dataLocaleData.month[f][v - 1];\n                }\n                else {\n                    fv = dataLocaleData[p][f][v];\n                }\n            }\n            result.push({\n                type: p,\n                value: fv,\n            });\n        }\n        else if (p === 'ampm') {\n            var v = tm.hour;\n            var fv = void 0;\n            if (v > 11) {\n                fv = dataLocaleData.pm;\n            }\n            else {\n                fv = dataLocaleData.am;\n            }\n            result.push({\n                type: 'dayPeriod',\n                value: fv,\n            });\n        }\n        else if (p === 'relatedYear') {\n            var v = tm.relatedYear;\n            // @ts-ignore\n            var fv = nf.format(v);\n            result.push({\n                // @ts-ignore TODO: Fix TS type\n                type: 'relatedYear',\n                value: fv,\n            });\n        }\n        else if (p === 'yearName') {\n            var v = tm.yearName;\n            // @ts-ignore\n            var fv = nf.format(v);\n            result.push({\n                // @ts-ignore TODO: Fix TS type\n                type: 'yearName',\n                value: fv,\n            });\n        }\n    }\n    return result;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatDateTimeRange = FormatDateTimeRange;\nvar PartitionDateTimeRangePattern_1 = require(\"./PartitionDateTimeRangePattern\");\nfunction FormatDateTimeRange(dtf, x, y, implDetails) {\n    var parts = (0, PartitionDateTimeRangePattern_1.PartitionDateTimeRangePattern)(dtf, x, y, implDetails);\n    var result = '';\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n        var part = parts_1[_i];\n        result += part.value;\n    }\n    return result;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatDateTimeRangeToParts = FormatDateTimeRangeToParts;\nvar PartitionDateTimeRangePattern_1 = require(\"./PartitionDateTimeRangePattern\");\nfunction FormatDateTimeRangeToParts(dtf, x, y, implDetails) {\n    var parts = (0, PartitionDateTimeRangePattern_1.PartitionDateTimeRangePattern)(dtf, x, y, implDetails);\n    var result = new Array(0);\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n        var part = parts_1[_i];\n        result.push({\n            type: part.type,\n            value: part.value,\n            source: part.source,\n        });\n    }\n    return result;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatDateTimeToParts = FormatDateTimeToParts;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar PartitionDateTimePattern_1 = require(\"./PartitionDateTimePattern\");\n/**\n * https://tc39.es/ecma402/#sec-formatdatetimetoparts\n *\n * @param dtf\n * @param x\n * @param implDetails\n */\nfunction FormatDateTimeToParts(dtf, x, implDetails) {\n    var parts = (0, PartitionDateTimePattern_1.PartitionDateTimePattern)(dtf, x, implDetails);\n    var result = (0, ecma402_abstract_1.ArrayCreate)(0);\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n        var part = parts_1[_i];\n        result.push({\n            type: part.type,\n            value: part.value,\n        });\n    }\n    return result;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitializeDateTimeFormat = InitializeDateTimeFormat;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar intl_localematcher_1 = require(\"@formatjs/intl-localematcher\");\nvar BasicFormatMatcher_1 = require(\"./BasicFormatMatcher\");\nvar BestFitFormatMatcher_1 = require(\"./BestFitFormatMatcher\");\nvar DateTimeStyleFormat_1 = require(\"./DateTimeStyleFormat\");\nvar ToDateTimeOptions_1 = require(\"./ToDateTimeOptions\");\nvar utils_1 = require(\"./utils\");\nfunction isTimeRelated(opt) {\n    for (var _i = 0, _a = ['hour', 'minute', 'second']; _i < _a.length; _i++) {\n        var prop = _a[_i];\n        var value = opt[prop];\n        if (value !== undefined) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction resolveHourCycle(hc, hcDefault, hour12) {\n    if (hc == null) {\n        hc = hcDefault;\n    }\n    if (hour12 !== undefined) {\n        if (hour12) {\n            if (hcDefault === 'h11' || hcDefault === 'h23') {\n                hc = 'h11';\n            }\n            else {\n                hc = 'h12';\n            }\n        }\n        else {\n            (0, ecma402_abstract_1.invariant)(!hour12, 'hour12 must not be set');\n            if (hcDefault === 'h11' || hcDefault === 'h23') {\n                hc = 'h23';\n            }\n            else {\n                hc = 'h24';\n            }\n        }\n    }\n    return hc;\n}\nvar TYPE_REGEX = /^[a-z0-9]{3,8}$/i;\n/**\n * https://tc39.es/ecma402/#sec-initializedatetimeformat\n * @param dtf DateTimeFormat\n * @param locales locales\n * @param opts options\n */\nfunction InitializeDateTimeFormat(dtf, locales, opts, _a) {\n    var getInternalSlots = _a.getInternalSlots, availableLocales = _a.availableLocales, localeData = _a.localeData, getDefaultLocale = _a.getDefaultLocale, getDefaultTimeZone = _a.getDefaultTimeZone, relevantExtensionKeys = _a.relevantExtensionKeys, tzData = _a.tzData, uppercaseLinks = _a.uppercaseLinks;\n    // @ts-ignore\n    var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);\n    var options = (0, ToDateTimeOptions_1.ToDateTimeOptions)(opts, 'any', 'date');\n    var opt = Object.create(null);\n    var matcher = (0, ecma402_abstract_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');\n    opt.localeMatcher = matcher;\n    var calendar = (0, ecma402_abstract_1.GetOption)(options, 'calendar', 'string', undefined, undefined);\n    if (calendar !== undefined && !TYPE_REGEX.test(calendar)) {\n        throw new RangeError('Malformed calendar');\n    }\n    var internalSlots = getInternalSlots(dtf);\n    opt.ca = calendar;\n    var numberingSystem = (0, ecma402_abstract_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);\n    if (numberingSystem !== undefined && !TYPE_REGEX.test(numberingSystem)) {\n        throw new RangeError('Malformed numbering system');\n    }\n    opt.nu = numberingSystem;\n    var hour12 = (0, ecma402_abstract_1.GetOption)(options, 'hour12', 'boolean', undefined, undefined);\n    var hourCycle = (0, ecma402_abstract_1.GetOption)(options, 'hourCycle', 'string', ['h11', 'h12', 'h23', 'h24'], undefined);\n    if (hour12 !== undefined) {\n        // @ts-ignore\n        hourCycle = null;\n    }\n    opt.hc = hourCycle;\n    var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, relevantExtensionKeys, localeData, getDefaultLocale);\n    internalSlots.locale = r.locale;\n    calendar = r.ca;\n    internalSlots.calendar = calendar;\n    internalSlots.hourCycle = r.hc;\n    internalSlots.numberingSystem = r.nu;\n    var dataLocale = r.dataLocale;\n    internalSlots.dataLocale = dataLocale;\n    var timeZone = options.timeZone;\n    if (timeZone !== undefined) {\n        timeZone = String(timeZone);\n        if (!(0, ecma402_abstract_1.IsValidTimeZoneName)(timeZone, {\n            zoneNamesFromData: Object.keys(tzData),\n            uppercaseLinks: uppercaseLinks,\n        })) {\n            throw new RangeError('Invalid timeZoneName');\n        }\n        timeZone = (0, ecma402_abstract_1.CanonicalizeTimeZoneName)(timeZone, {\n            zoneNames: Object.keys(tzData),\n            uppercaseLinks: uppercaseLinks,\n        });\n    }\n    else {\n        timeZone = getDefaultTimeZone();\n    }\n    internalSlots.timeZone = timeZone;\n    opt = Object.create(null);\n    opt.weekday = (0, ecma402_abstract_1.GetOption)(options, 'weekday', 'string', ['narrow', 'short', 'long'], undefined);\n    opt.era = (0, ecma402_abstract_1.GetOption)(options, 'era', 'string', ['narrow', 'short', 'long'], undefined);\n    opt.year = (0, ecma402_abstract_1.GetOption)(options, 'year', 'string', ['2-digit', 'numeric'], undefined);\n    opt.month = (0, ecma402_abstract_1.GetOption)(options, 'month', 'string', ['2-digit', 'numeric', 'narrow', 'short', 'long'], undefined);\n    opt.day = (0, ecma402_abstract_1.GetOption)(options, 'day', 'string', ['2-digit', 'numeric'], undefined);\n    opt.hour = (0, ecma402_abstract_1.GetOption)(options, 'hour', 'string', ['2-digit', 'numeric'], undefined);\n    opt.minute = (0, ecma402_abstract_1.GetOption)(options, 'minute', 'string', ['2-digit', 'numeric'], undefined);\n    opt.second = (0, ecma402_abstract_1.GetOption)(options, 'second', 'string', ['2-digit', 'numeric'], undefined);\n    opt.timeZoneName = (0, ecma402_abstract_1.GetOption)(options, 'timeZoneName', 'string', [\n        'long',\n        'short',\n        'longOffset',\n        'shortOffset',\n        'longGeneric',\n        'shortGeneric',\n    ], undefined);\n    opt.fractionalSecondDigits = (0, ecma402_abstract_1.GetNumberOption)(options, 'fractionalSecondDigits', 1, 3, undefined);\n    var dataLocaleData = localeData[dataLocale];\n    (0, ecma402_abstract_1.invariant)(!!dataLocaleData, \"Missing locale data for \".concat(dataLocale));\n    var formats = dataLocaleData.formats[calendar];\n    // UNSPECCED: IMPLEMENTATION DETAILS\n    if (!formats) {\n        throw new RangeError(\"Calendar \\\"\".concat(calendar, \"\\\" is not supported. Try setting \\\"calendar\\\" to 1 of the following: \").concat(Object.keys(dataLocaleData.formats).join(', ')));\n    }\n    var formatMatcher = (0, ecma402_abstract_1.GetOption)(options, 'formatMatcher', 'string', ['basic', 'best fit'], 'best fit');\n    var dateStyle = (0, ecma402_abstract_1.GetOption)(options, 'dateStyle', 'string', ['full', 'long', 'medium', 'short'], undefined);\n    internalSlots.dateStyle = dateStyle;\n    var timeStyle = (0, ecma402_abstract_1.GetOption)(options, 'timeStyle', 'string', ['full', 'long', 'medium', 'short'], undefined);\n    internalSlots.timeStyle = timeStyle;\n    var bestFormat;\n    if (dateStyle === undefined && timeStyle === undefined) {\n        if (formatMatcher === 'basic') {\n            bestFormat = (0, BasicFormatMatcher_1.BasicFormatMatcher)(opt, formats);\n        }\n        else {\n            // IMPL DETAILS START\n            if (isTimeRelated(opt)) {\n                var hc = resolveHourCycle(internalSlots.hourCycle, dataLocaleData.hourCycle, hour12);\n                opt.hour12 = hc === 'h11' || hc === 'h12';\n            }\n            // IMPL DETAILS END\n            bestFormat = (0, BestFitFormatMatcher_1.BestFitFormatMatcher)(opt, formats);\n        }\n    }\n    else {\n        for (var _i = 0, DATE_TIME_PROPS_1 = utils_1.DATE_TIME_PROPS; _i < DATE_TIME_PROPS_1.length; _i++) {\n            var prop = DATE_TIME_PROPS_1[_i];\n            var p = opt[prop];\n            if (p !== undefined) {\n                throw new TypeError(\"Intl.DateTimeFormat can't set option \".concat(prop, \" when \").concat(dateStyle ? 'dateStyle' : 'timeStyle', \" is used\"));\n            }\n        }\n        bestFormat = (0, DateTimeStyleFormat_1.DateTimeStyleFormat)(dateStyle, timeStyle, dataLocaleData);\n    }\n    // IMPL DETAIL START\n    // For debugging\n    internalSlots.format = bestFormat;\n    // IMPL DETAIL END\n    for (var prop in opt) {\n        var p = bestFormat[prop];\n        if (p !== undefined) {\n            internalSlots[prop] = p;\n        }\n    }\n    var pattern;\n    var rangePatterns;\n    if (internalSlots.hour !== undefined) {\n        var hc = resolveHourCycle(internalSlots.hourCycle, dataLocaleData.hourCycle, hour12);\n        internalSlots.hourCycle = hc;\n        if (hc === 'h11' || hc === 'h12') {\n            pattern = bestFormat.pattern12;\n            rangePatterns = bestFormat.rangePatterns12;\n        }\n        else {\n            pattern = bestFormat.pattern;\n            rangePatterns = bestFormat.rangePatterns;\n        }\n    }\n    else {\n        // @ts-ignore\n        internalSlots.hourCycle = undefined;\n        pattern = bestFormat.pattern;\n        rangePatterns = bestFormat.rangePatterns;\n    }\n    internalSlots.pattern = pattern;\n    internalSlots.rangePatterns = rangePatterns;\n    return dtf; // TODO: remove this when https://github.com/microsoft/TypeScript/pull/50402 is merged\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionDateTimePattern = PartitionDateTimePattern;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar FormatDateTimePattern_1 = require(\"./FormatDateTimePattern\");\n/**\n * https://tc39.es/ecma402/#sec-partitiondatetimepattern\n * @param dtf\n * @param x\n */\nfunction PartitionDateTimePattern(dtf, x, implDetails) {\n    x = (0, ecma402_abstract_1.TimeClip)(x);\n    (0, ecma402_abstract_1.invariant)(!x.isNaN(), 'Invalid time', RangeError);\n    /** IMPL START */\n    var getInternalSlots = implDetails.getInternalSlots;\n    var internalSlots = getInternalSlots(dtf);\n    /** IMPL END */\n    var pattern = internalSlots.pattern;\n    return (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, (0, ecma402_abstract_1.PartitionPattern)(pattern), x, implDetails);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionDateTimeRangePattern = PartitionDateTimeRangePattern;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar FormatDateTimePattern_1 = require(\"./FormatDateTimePattern\");\nvar ToLocalTime_1 = require(\"./ToLocalTime\");\nvar TABLE_2_FIELDS = [\n    'era',\n    'year',\n    'month',\n    'day',\n    'dayPeriod',\n    'ampm',\n    'hour',\n    'minute',\n    'second',\n    'fractionalSecondDigits',\n];\nfunction PartitionDateTimeRangePattern(dtf, x, y, implDetails) {\n    x = (0, ecma402_abstract_1.TimeClip)(x);\n    if (x.isNaN()) {\n        throw new RangeError('Invalid start time');\n    }\n    y = (0, ecma402_abstract_1.TimeClip)(y);\n    if (y.isNaN()) {\n        throw new RangeError('Invalid end time');\n    }\n    /** IMPL START */\n    var getInternalSlots = implDetails.getInternalSlots, tzData = implDetails.tzData;\n    var internalSlots = getInternalSlots(dtf);\n    /** IMPL END */\n    var tm1 = (0, ToLocalTime_1.ToLocalTime)(x, \n    // @ts-ignore\n    internalSlots.calendar, internalSlots.timeZone, { tzData: tzData });\n    var tm2 = (0, ToLocalTime_1.ToLocalTime)(y, \n    // @ts-ignore\n    internalSlots.calendar, internalSlots.timeZone, { tzData: tzData });\n    var pattern = internalSlots.pattern, rangePatterns = internalSlots.rangePatterns;\n    var rangePattern;\n    var dateFieldsPracticallyEqual = true;\n    var patternContainsLargerDateField = false;\n    for (var _i = 0, TABLE_2_FIELDS_1 = TABLE_2_FIELDS; _i < TABLE_2_FIELDS_1.length; _i++) {\n        var fieldName = TABLE_2_FIELDS_1[_i];\n        if (dateFieldsPracticallyEqual && !patternContainsLargerDateField) {\n            var rp = fieldName in rangePatterns ? rangePatterns[fieldName] : undefined;\n            if (rangePattern !== undefined && rp === undefined) {\n                patternContainsLargerDateField = true;\n            }\n            else {\n                rangePattern = rp;\n                if (fieldName === 'ampm') {\n                    var v1 = tm1.hour;\n                    var v2 = tm2.hour;\n                    if ((v1 > 11 && v2 < 11) || (v1 < 11 && v2 > 11)) {\n                        dateFieldsPracticallyEqual = false;\n                    }\n                }\n                else if (fieldName === 'dayPeriod') {\n                    // TODO\n                }\n                else if (fieldName === 'fractionalSecondDigits') {\n                    var fractionalSecondDigits = internalSlots.fractionalSecondDigits;\n                    if (fractionalSecondDigits === undefined) {\n                        fractionalSecondDigits = 3;\n                    }\n                    var v1 = Math.floor(tm1.millisecond * Math.pow(10, (fractionalSecondDigits - 3)));\n                    var v2 = Math.floor(tm2.millisecond * Math.pow(10, (fractionalSecondDigits - 3)));\n                    if (!(0, ecma402_abstract_1.SameValue)(v1, v2)) {\n                        dateFieldsPracticallyEqual = false;\n                    }\n                }\n                else {\n                    var v1 = tm1[fieldName];\n                    var v2 = tm2[fieldName];\n                    if (!(0, ecma402_abstract_1.SameValue)(v1, v2)) {\n                        dateFieldsPracticallyEqual = false;\n                    }\n                }\n            }\n        }\n    }\n    if (dateFieldsPracticallyEqual) {\n        var result_2 = (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, (0, ecma402_abstract_1.PartitionPattern)(pattern), x, implDetails);\n        for (var _a = 0, result_1 = result_2; _a < result_1.length; _a++) {\n            var r = result_1[_a];\n            r.source = ecma402_abstract_1.RangePatternType.shared;\n        }\n        return result_2;\n    }\n    var result = [];\n    if (rangePattern === undefined) {\n        rangePattern = rangePatterns.default;\n        /** IMPL DETAILS */\n        // Now we have to replace {0} & {1} with actual pattern\n        for (var _b = 0, _c = rangePattern.patternParts; _b < _c.length; _b++) {\n            var patternPart = _c[_b];\n            if (patternPart.pattern === '{0}' || patternPart.pattern === '{1}') {\n                patternPart.pattern = pattern;\n            }\n        }\n    }\n    for (var _d = 0, _e = rangePattern.patternParts; _d < _e.length; _d++) {\n        var rangePatternPart = _e[_d];\n        var source = rangePatternPart.source, pattern_1 = rangePatternPart.pattern;\n        var z = void 0;\n        if (source === ecma402_abstract_1.RangePatternType.startRange ||\n            source === ecma402_abstract_1.RangePatternType.shared) {\n            z = x;\n        }\n        else {\n            z = y;\n        }\n        var patternParts = (0, ecma402_abstract_1.PartitionPattern)(pattern_1);\n        var partResult = (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, patternParts, z, implDetails);\n        for (var _f = 0, partResult_1 = partResult; _f < partResult_1.length; _f++) {\n            var r = partResult_1[_f];\n            r.source = source;\n        }\n        result = result.concat(partResult);\n    }\n    return result;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ToDateTimeOptions = ToDateTimeOptions;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\n/**\n * https://tc39.es/ecma402/#sec-todatetimeoptions\n * @param options\n * @param required\n * @param defaults\n */\nfunction ToDateTimeOptions(options, required, defaults) {\n    if (options === undefined) {\n        options = null;\n    }\n    else {\n        options = (0, ecma402_abstract_1.ToObject)(options);\n    }\n    options = Object.create(options);\n    var needDefaults = true;\n    if (required === 'date' || required === 'any') {\n        for (var _i = 0, _a = ['weekday', 'year', 'month', 'day']; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            var value = options[prop];\n            if (value !== undefined) {\n                needDefaults = false;\n            }\n        }\n    }\n    if (required === 'time' || required === 'any') {\n        for (var _b = 0, _c = [\n            'dayPeriod',\n            'hour',\n            'minute',\n            'second',\n            'fractionalSecondDigits',\n        ]; _b < _c.length; _b++) {\n            var prop = _c[_b];\n            var value = options[prop];\n            if (value !== undefined) {\n                needDefaults = false;\n            }\n        }\n    }\n    if (options.dateStyle !== undefined || options.timeStyle !== undefined) {\n        needDefaults = false;\n    }\n    if (required === 'date' && options.timeStyle) {\n        throw new TypeError('Intl.DateTimeFormat date was required but timeStyle was included');\n    }\n    if (required === 'time' && options.dateStyle) {\n        throw new TypeError('Intl.DateTimeFormat time was required but dateStyle was included');\n    }\n    if (needDefaults && (defaults === 'date' || defaults === 'all')) {\n        for (var _d = 0, _e = ['year', 'month', 'day']; _d < _e.length; _d++) {\n            var prop = _e[_d];\n            options[prop] = 'numeric';\n        }\n    }\n    if (needDefaults && (defaults === 'time' || defaults === 'all')) {\n        for (var _f = 0, _g = ['hour', 'minute', 'second']; _f < _g.length; _f++) {\n            var prop = _g[_f];\n            options[prop] = 'numeric';\n        }\n    }\n    return options;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ToLocalTime = ToLocalTime;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nfunction getApplicableZoneData(t, timeZone, tzData) {\n    var _a;\n    var zoneData = tzData[timeZone];\n    // We don't have data for this so just say it's UTC\n    if (!zoneData) {\n        return [0, false];\n    }\n    var i = 0;\n    var offset = 0;\n    var dst = false;\n    for (; i <= zoneData.length; i++) {\n        if (i === zoneData.length || zoneData[i][0] * 1e3 > t) {\n            ;\n            _a = zoneData[i - 1], offset = _a[2], dst = _a[3];\n            break;\n        }\n    }\n    return [offset * 1e3, dst];\n}\n/**\n * https://tc39.es/ecma402/#sec-tolocaltime\n * @param t\n * @param calendar\n * @param timeZone\n */\nfunction ToLocalTime(t, calendar, timeZone, _a) {\n    var tzData = _a.tzData;\n    (0, ecma402_abstract_1.invariant)(calendar === 'gregory', 'We only support Gregory calendar right now');\n    var _b = getApplicableZoneData(t.toNumber(), timeZone, tzData), timeZoneOffset = _b[0], inDST = _b[1];\n    var tz = t.plus(timeZoneOffset).toNumber();\n    var year = (0, ecma402_abstract_1.YearFromTime)(tz);\n    return {\n        weekday: (0, ecma402_abstract_1.WeekDay)(tz),\n        era: year < 0 ? 'BC' : 'AD',\n        year: year,\n        relatedYear: undefined,\n        yearName: undefined,\n        month: (0, ecma402_abstract_1.MonthFromTime)(tz),\n        day: (0, ecma402_abstract_1.DateFromTime)(tz),\n        hour: (0, ecma402_abstract_1.HourFromTime)(tz),\n        minute: (0, ecma402_abstract_1.MinFromTime)(tz),\n        second: (0, ecma402_abstract_1.SecFromTime)(tz),\n        millisecond: (0, ecma402_abstract_1.msFromTime)(tz),\n        inDST: inDST,\n        // IMPORTANT: Not in spec\n        timeZoneOffset: timeZoneOffset,\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.processDateTimePattern = processDateTimePattern;\nexports.parseDateTimeSkeleton = parseDateTimeSkeleton;\nexports.splitFallbackRangePattern = splitFallbackRangePattern;\nexports.splitRangePattern = splitRangePattern;\nvar tslib_1 = require(\"tslib\");\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n// trim patterns after transformations\nvar expPatternTrimmer = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\nfunction matchSkeletonPattern(match, result) {\n    var len = match.length;\n    switch (match[0]) {\n        // Era\n        case 'G':\n            result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n            return '{era}';\n        // Year\n        case 'y':\n        case 'Y':\n        case 'u':\n        case 'U':\n        case 'r':\n            result.year = len === 2 ? '2-digit' : 'numeric';\n            return '{year}';\n        // Quarter\n        case 'q':\n        case 'Q':\n            throw new RangeError('`w/Q` (quarter) patterns are not supported');\n        // Month\n        case 'M':\n        case 'L':\n            result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n            return '{month}';\n        // Week\n        case 'w':\n        case 'W':\n            throw new RangeError('`w/W` (week of year) patterns are not supported');\n        case 'd':\n            result.day = ['numeric', '2-digit'][len - 1];\n            return '{day}';\n        case 'D':\n        case 'F':\n        case 'g':\n            result.day = 'numeric';\n            return '{day}';\n        // Weekday\n        case 'E':\n            result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n            return '{weekday}';\n        case 'e':\n            result.weekday = [\n                undefined,\n                undefined,\n                'short',\n                'long',\n                'narrow',\n                'short',\n            ][len - 1];\n            return '{weekday}';\n        case 'c':\n            result.weekday = [\n                undefined,\n                undefined,\n                'short',\n                'long',\n                'narrow',\n                'short',\n            ][len - 1];\n            return '{weekday}';\n        // Period\n        case 'a': // AM, PM\n        case 'b': // am, pm, noon, midnight\n        case 'B': // flexible day periods\n            result.hour12 = true;\n            return '{ampm}';\n        // Hour\n        case 'h':\n            result.hour = ['numeric', '2-digit'][len - 1];\n            result.hour12 = true;\n            return '{hour}';\n        case 'H':\n            result.hour = ['numeric', '2-digit'][len - 1];\n            return '{hour}';\n        case 'K':\n            result.hour = ['numeric', '2-digit'][len - 1];\n            result.hour12 = true;\n            return '{hour}';\n        case 'k':\n            result.hour = ['numeric', '2-digit'][len - 1];\n            return '{hour}';\n        case 'j':\n        case 'J':\n        case 'C':\n            throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n        // Minute\n        case 'm':\n            result.minute = ['numeric', '2-digit'][len - 1];\n            return '{minute}';\n        // Second\n        case 's':\n            result.second = ['numeric', '2-digit'][len - 1];\n            return '{second}';\n        case 'S':\n        case 'A':\n            result.second = 'numeric';\n            return '{second}';\n        // Zone\n        case 'z': // 1..3, 4: specific non-location format\n        case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n        case 'O': // 1, 4: milliseconds in day short, long\n        case 'v': // 1, 4: generic non-location format\n        case 'V': // 1, 2, 3, 4: time zone ID or city\n        case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n        case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\n            result.timeZoneName = len < 4 ? 'short' : 'long';\n            return '{timeZoneName}';\n    }\n    return '';\n}\nfunction skeletonTokenToTable2(c) {\n    switch (c) {\n        // Era\n        case 'G':\n            return 'era';\n        // Year\n        case 'y':\n        case 'Y':\n        case 'u':\n        case 'U':\n        case 'r':\n            return 'year';\n        // Month\n        case 'M':\n        case 'L':\n            return 'month';\n        // Day\n        case 'd':\n        case 'D':\n        case 'F':\n        case 'g':\n            return 'day';\n        // Period\n        case 'a': // AM, PM\n        case 'b': // am, pm, noon, midnight\n        case 'B': // flexible day periods\n            return 'ampm';\n        // Hour\n        case 'h':\n        case 'H':\n        case 'K':\n        case 'k':\n            return 'hour';\n        // Minute\n        case 'm':\n            return 'minute';\n        // Second\n        case 's':\n        case 'S':\n        case 'A':\n            return 'second';\n        default:\n            throw new RangeError('Invalid range pattern token');\n    }\n}\nfunction processDateTimePattern(pattern, result) {\n    var literals = [];\n    // Use skeleton to populate result, but use mapped pattern to populate pattern\n    var pattern12 = pattern\n        // Double apostrophe\n        .replace(/'{2}/g, '{apostrophe}')\n        // Apostrophe-escaped\n        .replace(/'(.*?)'/g, function (_, literal) {\n        literals.push(literal);\n        return \"$$\".concat(literals.length - 1, \"$$\");\n    })\n        .replace(DATE_TIME_REGEX, function (m) { return matchSkeletonPattern(m, result || {}); });\n    //Restore literals\n    if (literals.length) {\n        pattern12 = pattern12\n            .replace(/\\$\\$(\\d+)\\$\\$/g, function (_, i) {\n            return literals[+i];\n        })\n            .replace(/\\{apostrophe\\}/g, \"'\");\n    }\n    // Handle apostrophe-escaped things\n    return [\n        pattern12\n            .replace(/([\\s\\uFEFF\\xA0])\\{ampm\\}([\\s\\uFEFF\\xA0])/, '$1')\n            .replace('{ampm}', '')\n            .replace(expPatternTrimmer, ''),\n        pattern12,\n    ];\n}\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nfunction parseDateTimeSkeleton(skeleton, rawPattern, rangePatterns, intervalFormatFallback) {\n    if (rawPattern === void 0) { rawPattern = skeleton; }\n    var result = {\n        pattern: '',\n        pattern12: '',\n        skeleton: skeleton,\n        rawPattern: rawPattern,\n        rangePatterns: {},\n        rangePatterns12: {},\n    };\n    if (rangePatterns) {\n        for (var k in rangePatterns) {\n            var key = skeletonTokenToTable2(k);\n            var rawPattern_1 = rangePatterns[k];\n            var intervalResult = {\n                patternParts: [],\n            };\n            var _a = processDateTimePattern(rawPattern_1, intervalResult), pattern_1 = _a[0], pattern12_1 = _a[1];\n            result.rangePatterns[key] = tslib_1.__assign(tslib_1.__assign({}, intervalResult), { patternParts: splitRangePattern(pattern_1) });\n            result.rangePatterns12[key] = tslib_1.__assign(tslib_1.__assign({}, intervalResult), { patternParts: splitRangePattern(pattern12_1) });\n        }\n    }\n    if (intervalFormatFallback) {\n        var patternParts = splitFallbackRangePattern(intervalFormatFallback);\n        result.rangePatterns.default = {\n            patternParts: patternParts,\n        };\n        result.rangePatterns12.default = {\n            patternParts: patternParts,\n        };\n    }\n    // Process skeleton\n    skeleton.replace(DATE_TIME_REGEX, function (m) { return matchSkeletonPattern(m, result); });\n    var _b = processDateTimePattern(rawPattern), pattern = _b[0], pattern12 = _b[1];\n    result.pattern = pattern;\n    result.pattern12 = pattern12;\n    return result;\n}\nfunction splitFallbackRangePattern(pattern) {\n    var parts = pattern.split(/(\\{[0|1]\\})/g).filter(Boolean);\n    return parts.map(function (pattern) {\n        switch (pattern) {\n            case '{0}':\n                return {\n                    source: ecma402_abstract_1.RangePatternType.startRange,\n                    pattern: pattern,\n                };\n            case '{1}':\n                return {\n                    source: ecma402_abstract_1.RangePatternType.endRange,\n                    pattern: pattern,\n                };\n            default:\n                return {\n                    source: ecma402_abstract_1.RangePatternType.shared,\n                    pattern: pattern,\n                };\n        }\n    });\n}\nfunction splitRangePattern(pattern) {\n    var PART_REGEX = /\\{(.*?)\\}/g;\n    // Map of part and index within the string\n    var parts = {};\n    var match;\n    var splitIndex = 0;\n    while ((match = PART_REGEX.exec(pattern))) {\n        if (!(match[0] in parts)) {\n            parts[match[0]] = match.index;\n        }\n        else {\n            splitIndex = match.index;\n            break;\n        }\n    }\n    if (!splitIndex) {\n        return [\n            {\n                source: ecma402_abstract_1.RangePatternType.startRange,\n                pattern: pattern,\n            },\n        ];\n    }\n    return [\n        {\n            source: ecma402_abstract_1.RangePatternType.startRange,\n            pattern: pattern.slice(0, splitIndex),\n        },\n        {\n            source: ecma402_abstract_1.RangePatternType.endRange,\n            pattern: pattern.slice(splitIndex),\n        },\n    ];\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.offsetPenalty = exports.shortMorePenalty = exports.shortLessPenalty = exports.longMorePenalty = exports.longLessPenalty = exports.differentNumericTypePenalty = exports.additionPenalty = exports.removalPenalty = exports.DATE_TIME_PROPS = void 0;\nexports.DATE_TIME_PROPS = [\n    'weekday',\n    'era',\n    'year',\n    'month',\n    'day',\n    'dayPeriod',\n    'hour',\n    'minute',\n    'second',\n    'fractionalSecondDigits',\n    'timeZoneName',\n];\nexports.removalPenalty = 120;\nexports.additionPenalty = 20;\nexports.differentNumericTypePenalty = 15;\nexports.longLessPenalty = 8;\nexports.longMorePenalty = 6;\nexports.shortLessPenalty = 6;\nexports.shortMorePenalty = 3;\nexports.offsetPenalty = 1;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DateTimeFormat = void 0;\nvar tslib_1 = require(\"tslib\");\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar decimal_js_1 = tslib_1.__importDefault(require(\"decimal.js\"));\nvar FormatDateTime_1 = require(\"./abstract/FormatDateTime\");\nvar FormatDateTimeRange_1 = require(\"./abstract/FormatDateTimeRange\");\nvar FormatDateTimeRangeToParts_1 = require(\"./abstract/FormatDateTimeRangeToParts\");\nvar FormatDateTimeToParts_1 = require(\"./abstract/FormatDateTimeToParts\");\nvar InitializeDateTimeFormat_1 = require(\"./abstract/InitializeDateTimeFormat\");\nvar skeleton_1 = require(\"./abstract/skeleton\");\nvar utils_1 = require(\"./abstract/utils\");\nvar links_1 = tslib_1.__importDefault(require(\"./data/links\"));\nvar get_internal_slots_1 = tslib_1.__importDefault(require(\"./get_internal_slots\"));\nvar packer_1 = require(\"./packer\");\nvar UPPERCASED_LINKS = Object.keys(links_1.default).reduce(function (all, l) {\n    all[l.toUpperCase()] = links_1.default[l];\n    return all;\n}, {});\nvar RESOLVED_OPTIONS_KEYS = [\n    'locale',\n    'calendar',\n    'numberingSystem',\n    'dateStyle',\n    'timeStyle',\n    'timeZone',\n    'hourCycle',\n    'weekday',\n    'era',\n    'year',\n    'month',\n    'day',\n    'hour',\n    'minute',\n    'second',\n    'timeZoneName',\n];\nvar formatDescriptor = {\n    enumerable: false,\n    configurable: true,\n    get: function () {\n        if (typeof this !== 'object' ||\n            !(0, ecma402_abstract_1.OrdinaryHasInstance)(exports.DateTimeFormat, this)) {\n            throw TypeError('Intl.DateTimeFormat format property accessor called on incompatible receiver');\n        }\n        var internalSlots = (0, get_internal_slots_1.default)(this);\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var dtf = this;\n        var boundFormat = internalSlots.boundFormat;\n        if (boundFormat === undefined) {\n            // https://tc39.es/proposal-unified-intl-numberformat/section11/numberformat_diff_out.html#sec-number-format-functions\n            boundFormat = function (date) {\n                var x;\n                if (date === undefined) {\n                    x = new decimal_js_1.default(Date.now());\n                }\n                else {\n                    x = (0, ecma402_abstract_1.ToNumber)(date);\n                }\n                return (0, FormatDateTime_1.FormatDateTime)(dtf, x, {\n                    getInternalSlots: get_internal_slots_1.default,\n                    localeData: exports.DateTimeFormat.localeData,\n                    tzData: exports.DateTimeFormat.tzData,\n                    getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,\n                });\n            };\n            try {\n                // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/prototype/format/format-function-name.js\n                Object.defineProperty(boundFormat, 'name', {\n                    configurable: true,\n                    enumerable: false,\n                    writable: false,\n                    value: '',\n                });\n            }\n            catch (e) {\n                // In older browser (e.g Chrome 36 like polyfill-fastly.io)\n                // TypeError: Cannot redefine property: name\n            }\n            internalSlots.boundFormat = boundFormat;\n        }\n        return boundFormat;\n    },\n};\ntry {\n    // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/prototype/format/name.js\n    Object.defineProperty(formatDescriptor.get, 'name', {\n        configurable: true,\n        enumerable: false,\n        writable: false,\n        value: 'get format',\n    });\n}\ncatch (e) {\n    // In older browser (e.g Chrome 36 like polyfill-fastly.io)\n    // TypeError: Cannot redefine property: name\n}\nexports.DateTimeFormat = function (locales, options) {\n    // Cannot use `new.target` bc of IE11 & TS transpiles it to something else\n    if (!this || !(0, ecma402_abstract_1.OrdinaryHasInstance)(exports.DateTimeFormat, this)) {\n        return new exports.DateTimeFormat(locales, options);\n    }\n    (0, InitializeDateTimeFormat_1.InitializeDateTimeFormat)(this, locales, options, {\n        tzData: exports.DateTimeFormat.tzData,\n        uppercaseLinks: UPPERCASED_LINKS,\n        availableLocales: exports.DateTimeFormat.availableLocales,\n        relevantExtensionKeys: exports.DateTimeFormat.relevantExtensionKeys,\n        getDefaultLocale: exports.DateTimeFormat.getDefaultLocale,\n        getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,\n        getInternalSlots: get_internal_slots_1.default,\n        localeData: exports.DateTimeFormat.localeData,\n    });\n    /** IMPL START */\n    var internalSlots = (0, get_internal_slots_1.default)(this);\n    var dataLocale = internalSlots.dataLocale;\n    var dataLocaleData = exports.DateTimeFormat.localeData[dataLocale];\n    (0, ecma402_abstract_1.invariant)(dataLocaleData !== undefined, \"Cannot load locale-dependent data for \".concat(dataLocale, \".\"));\n    /** IMPL END */\n};\n// Static properties\n(0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat, 'supportedLocalesOf', {\n    value: function supportedLocalesOf(locales, options) {\n        return (0, ecma402_abstract_1.SupportedLocales)(exports.DateTimeFormat.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);\n    },\n});\n(0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat.prototype, 'resolvedOptions', {\n    value: function resolvedOptions() {\n        if (typeof this !== 'object' ||\n            !(0, ecma402_abstract_1.OrdinaryHasInstance)(exports.DateTimeFormat, this)) {\n            throw TypeError('Method Intl.DateTimeFormat.prototype.resolvedOptions called on incompatible receiver');\n        }\n        var internalSlots = (0, get_internal_slots_1.default)(this);\n        var ro = {};\n        for (var _i = 0, RESOLVED_OPTIONS_KEYS_1 = RESOLVED_OPTIONS_KEYS; _i < RESOLVED_OPTIONS_KEYS_1.length; _i++) {\n            var key = RESOLVED_OPTIONS_KEYS_1[_i];\n            var value = internalSlots[key];\n            if (key === 'hourCycle') {\n                var hour12 = value === 'h11' || value === 'h12'\n                    ? true\n                    : value === 'h23' || value === 'h24'\n                        ? false\n                        : undefined;\n                if (hour12 !== undefined) {\n                    ro.hour12 = hour12;\n                }\n            }\n            if (utils_1.DATE_TIME_PROPS.indexOf(key) > -1) {\n                if (internalSlots.dateStyle !== undefined ||\n                    internalSlots.timeStyle !== undefined) {\n                    value = undefined;\n                }\n            }\n            if (value !== undefined) {\n                ro[key] = value;\n            }\n        }\n        return ro;\n    },\n});\n(0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat.prototype, 'formatToParts', {\n    value: function formatToParts(date) {\n        var x;\n        if (date === undefined) {\n            x = new decimal_js_1.default(Date.now());\n        }\n        else {\n            x = (0, ecma402_abstract_1.ToNumber)(date);\n        }\n        return (0, FormatDateTimeToParts_1.FormatDateTimeToParts)(this, x, {\n            getInternalSlots: get_internal_slots_1.default,\n            localeData: exports.DateTimeFormat.localeData,\n            tzData: exports.DateTimeFormat.tzData,\n            getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,\n        });\n    },\n});\n(0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat.prototype, 'formatRangeToParts', {\n    value: function formatRangeToParts(startDate, endDate) {\n        var dtf = this;\n        (0, ecma402_abstract_1.invariant)(typeof dtf === 'object', 'receiver is not an object', TypeError);\n        (0, ecma402_abstract_1.invariant)(startDate !== undefined && endDate !== undefined, 'startDate/endDate cannot be undefined', TypeError);\n        return (0, FormatDateTimeRangeToParts_1.FormatDateTimeRangeToParts)(dtf, (0, ecma402_abstract_1.ToNumber)(startDate), (0, ecma402_abstract_1.ToNumber)(endDate), {\n            getInternalSlots: get_internal_slots_1.default,\n            localeData: exports.DateTimeFormat.localeData,\n            tzData: exports.DateTimeFormat.tzData,\n            getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,\n        });\n    },\n});\n(0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat.prototype, 'formatRange', {\n    value: function formatRange(startDate, endDate) {\n        var dtf = this;\n        (0, ecma402_abstract_1.invariant)(typeof dtf === 'object', 'receiver is not an object', TypeError);\n        (0, ecma402_abstract_1.invariant)(startDate !== undefined && endDate !== undefined, 'startDate/endDate cannot be undefined', TypeError);\n        return (0, FormatDateTimeRange_1.FormatDateTimeRange)(dtf, (0, ecma402_abstract_1.ToNumber)(startDate), (0, ecma402_abstract_1.ToNumber)(endDate), {\n            getInternalSlots: get_internal_slots_1.default,\n            localeData: exports.DateTimeFormat.localeData,\n            tzData: exports.DateTimeFormat.tzData,\n            getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,\n        });\n    },\n});\nvar DEFAULT_TIMEZONE = 'UTC';\nexports.DateTimeFormat.__setDefaultTimeZone = function (timeZone) {\n    if (timeZone !== undefined) {\n        timeZone = String(timeZone);\n        if (!(0, ecma402_abstract_1.IsValidTimeZoneName)(timeZone, {\n            zoneNamesFromData: Object.keys(exports.DateTimeFormat.tzData),\n            uppercaseLinks: UPPERCASED_LINKS,\n        })) {\n            throw new RangeError('Invalid timeZoneName');\n        }\n        timeZone = (0, ecma402_abstract_1.CanonicalizeTimeZoneName)(timeZone, {\n            zoneNames: Object.keys(exports.DateTimeFormat.tzData),\n            uppercaseLinks: UPPERCASED_LINKS,\n        });\n    }\n    else {\n        timeZone = DEFAULT_TIMEZONE;\n    }\n    exports.DateTimeFormat.__defaultTimeZone = timeZone;\n};\nexports.DateTimeFormat.relevantExtensionKeys = ['nu', 'ca', 'hc'];\nexports.DateTimeFormat.__defaultTimeZone = DEFAULT_TIMEZONE;\nexports.DateTimeFormat.getDefaultTimeZone = function () { return exports.DateTimeFormat.__defaultTimeZone; };\nexports.DateTimeFormat.__addLocaleData = function __addLocaleData() {\n    var data = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        data[_i] = arguments[_i];\n    }\n    var _loop_1 = function (d, locale) {\n        var dateFormat = d.dateFormat, timeFormat = d.timeFormat, dateTimeFormat = d.dateTimeFormat, formats = d.formats, intervalFormats = d.intervalFormats, rawData = tslib_1.__rest(d, [\"dateFormat\", \"timeFormat\", \"dateTimeFormat\", \"formats\", \"intervalFormats\"]);\n        var processedData = tslib_1.__assign(tslib_1.__assign({}, rawData), { dateFormat: {\n                full: (0, skeleton_1.parseDateTimeSkeleton)(dateFormat.full),\n                long: (0, skeleton_1.parseDateTimeSkeleton)(dateFormat.long),\n                medium: (0, skeleton_1.parseDateTimeSkeleton)(dateFormat.medium),\n                short: (0, skeleton_1.parseDateTimeSkeleton)(dateFormat.short),\n            }, timeFormat: {\n                full: (0, skeleton_1.parseDateTimeSkeleton)(timeFormat.full),\n                long: (0, skeleton_1.parseDateTimeSkeleton)(timeFormat.long),\n                medium: (0, skeleton_1.parseDateTimeSkeleton)(timeFormat.medium),\n                short: (0, skeleton_1.parseDateTimeSkeleton)(timeFormat.short),\n            }, dateTimeFormat: {\n                full: (0, skeleton_1.parseDateTimeSkeleton)(dateTimeFormat.full).pattern,\n                long: (0, skeleton_1.parseDateTimeSkeleton)(dateTimeFormat.long).pattern,\n                medium: (0, skeleton_1.parseDateTimeSkeleton)(dateTimeFormat.medium).pattern,\n                short: (0, skeleton_1.parseDateTimeSkeleton)(dateTimeFormat.short).pattern,\n            }, formats: {} });\n        var _loop_2 = function (calendar) {\n            processedData.formats[calendar] = Object.keys(formats[calendar]).map(function (skeleton) {\n                return (0, skeleton_1.parseDateTimeSkeleton)(skeleton, formats[calendar][skeleton], intervalFormats[skeleton], intervalFormats.intervalFormatFallback);\n            });\n        };\n        for (var calendar in formats) {\n            _loop_2(calendar);\n        }\n        var minimizedLocale = new Intl.Locale(locale)\n            .minimize()\n            .toString();\n        exports.DateTimeFormat.localeData[locale] = exports.DateTimeFormat.localeData[minimizedLocale] = processedData;\n        exports.DateTimeFormat.availableLocales.add(locale);\n        exports.DateTimeFormat.availableLocales.add(minimizedLocale);\n        if (!exports.DateTimeFormat.__defaultLocale) {\n            exports.DateTimeFormat.__defaultLocale = minimizedLocale;\n        }\n    };\n    for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n        var _b = data_1[_a], d = _b.data, locale = _b.locale;\n        _loop_1(d, locale);\n    }\n};\nObject.defineProperty(exports.DateTimeFormat.prototype, 'format', formatDescriptor);\nexports.DateTimeFormat.__defaultLocale = '';\nexports.DateTimeFormat.localeData = {};\nexports.DateTimeFormat.availableLocales = new Set();\nexports.DateTimeFormat.getDefaultLocale = function () {\n    return exports.DateTimeFormat.__defaultLocale;\n};\nexports.DateTimeFormat.polyfilled = true;\nexports.DateTimeFormat.tzData = {};\nexports.DateTimeFormat.__addTZData = function (d) {\n    exports.DateTimeFormat.tzData = (0, packer_1.unpack)(d);\n};\ntry {\n    if (typeof Symbol !== 'undefined') {\n        Object.defineProperty(exports.DateTimeFormat.prototype, Symbol.toStringTag, {\n            value: 'Intl.DateTimeFormat',\n            writable: false,\n            enumerable: false,\n            configurable: true,\n        });\n    }\n    Object.defineProperty(exports.DateTimeFormat.prototype.constructor, 'length', {\n        value: 1,\n        writable: false,\n        enumerable: false,\n        configurable: true,\n    });\n}\ncatch (e) {\n    // Meta fix so we're test262-compliant, not important\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @generated\n// prettier-ignore\nexports.default = {\n    \"Africa/Accra\": \"Africa/Abidjan\",\n    \"Africa/Addis_Ababa\": \"Africa/Nairobi\",\n    \"Africa/Asmara\": \"Africa/Nairobi\",\n    \"Africa/Asmera\": \"Africa/Nairobi\",\n    \"Africa/Bamako\": \"Africa/Abidjan\",\n    \"Africa/Bangui\": \"Africa/Lagos\",\n    \"Africa/Banjul\": \"Africa/Abidjan\",\n    \"Africa/Blantyre\": \"Africa/Maputo\",\n    \"Africa/Brazzaville\": \"Africa/Lagos\",\n    \"Africa/Bujumbura\": \"Africa/Maputo\",\n    \"Africa/Conakry\": \"Africa/Abidjan\",\n    \"Africa/Dakar\": \"Africa/Abidjan\",\n    \"Africa/Dar_es_Salaam\": \"Africa/Nairobi\",\n    \"Africa/Djibouti\": \"Africa/Nairobi\",\n    \"Africa/Douala\": \"Africa/Lagos\",\n    \"Africa/Freetown\": \"Africa/Abidjan\",\n    \"Africa/Gaborone\": \"Africa/Maputo\",\n    \"Africa/Harare\": \"Africa/Maputo\",\n    \"Africa/Kampala\": \"Africa/Nairobi\",\n    \"Africa/Kigali\": \"Africa/Maputo\",\n    \"Africa/Kinshasa\": \"Africa/Lagos\",\n    \"Africa/Libreville\": \"Africa/Lagos\",\n    \"Africa/Lome\": \"Africa/Abidjan\",\n    \"Africa/Luanda\": \"Africa/Lagos\",\n    \"Africa/Lubumbashi\": \"Africa/Maputo\",\n    \"Africa/Lusaka\": \"Africa/Maputo\",\n    \"Africa/Malabo\": \"Africa/Lagos\",\n    \"Africa/Maseru\": \"Africa/Johannesburg\",\n    \"Africa/Mbabane\": \"Africa/Johannesburg\",\n    \"Africa/Mogadishu\": \"Africa/Nairobi\",\n    \"Africa/Niamey\": \"Africa/Lagos\",\n    \"Africa/Nouakchott\": \"Africa/Abidjan\",\n    \"Africa/Ouagadougou\": \"Africa/Abidjan\",\n    \"Africa/Porto-Novo\": \"Africa/Lagos\",\n    \"Africa/Timbuktu\": \"Africa/Abidjan\",\n    \"America/Anguilla\": \"America/Puerto_Rico\",\n    \"America/Antigua\": \"America/Puerto_Rico\",\n    \"America/Argentina/ComodRivadavia\": \"America/Argentina/Catamarca\",\n    \"America/Aruba\": \"America/Puerto_Rico\",\n    \"America/Atikokan\": \"America/Panama\",\n    \"America/Atka\": \"America/Adak\",\n    \"America/Blanc-Sablon\": \"America/Puerto_Rico\",\n    \"America/Buenos_Aires\": \"America/Argentina/Buenos_Aires\",\n    \"America/Catamarca\": \"America/Argentina/Catamarca\",\n    \"America/Cayman\": \"America/Panama\",\n    \"America/Coral_Harbour\": \"America/Panama\",\n    \"America/Cordoba\": \"America/Argentina/Cordoba\",\n    \"America/Creston\": \"America/Phoenix\",\n    \"America/Curacao\": \"America/Puerto_Rico\",\n    \"America/Dominica\": \"America/Puerto_Rico\",\n    \"America/Ensenada\": \"America/Tijuana\",\n    \"America/Fort_Wayne\": \"America/Indiana/Indianapolis\",\n    \"America/Godthab\": \"America/Nuuk\",\n    \"America/Grenada\": \"America/Puerto_Rico\",\n    \"America/Guadeloupe\": \"America/Puerto_Rico\",\n    \"America/Indianapolis\": \"America/Indiana/Indianapolis\",\n    \"America/Jujuy\": \"America/Argentina/Jujuy\",\n    \"America/Knox_IN\": \"America/Indiana/Knox\",\n    \"America/Kralendijk\": \"America/Puerto_Rico\",\n    \"America/Louisville\": \"America/Kentucky/Louisville\",\n    \"America/Lower_Princes\": \"America/Puerto_Rico\",\n    \"America/Marigot\": \"America/Puerto_Rico\",\n    \"America/Mendoza\": \"America/Argentina/Mendoza\",\n    \"America/Montreal\": \"America/Toronto\",\n    \"America/Montserrat\": \"America/Puerto_Rico\",\n    \"America/Nassau\": \"America/Toronto\",\n    \"America/Nipigon\": \"America/Toronto\",\n    \"America/Pangnirtung\": \"America/Iqaluit\",\n    \"America/Port_of_Spain\": \"America/Puerto_Rico\",\n    \"America/Porto_Acre\": \"America/Rio_Branco\",\n    \"America/Rainy_River\": \"America/Winnipeg\",\n    \"America/Rosario\": \"America/Argentina/Cordoba\",\n    \"America/Santa_Isabel\": \"America/Tijuana\",\n    \"America/Shiprock\": \"America/Denver\",\n    \"America/St_Barthelemy\": \"America/Puerto_Rico\",\n    \"America/St_Kitts\": \"America/Puerto_Rico\",\n    \"America/St_Lucia\": \"America/Puerto_Rico\",\n    \"America/St_Thomas\": \"America/Puerto_Rico\",\n    \"America/St_Vincent\": \"America/Puerto_Rico\",\n    \"America/Thunder_Bay\": \"America/Toronto\",\n    \"America/Tortola\": \"America/Puerto_Rico\",\n    \"America/Virgin\": \"America/Puerto_Rico\",\n    \"America/Yellowknife\": \"America/Edmonton\",\n    \"Antarctica/DumontDUrville\": \"Pacific/Port_Moresby\",\n    \"Antarctica/McMurdo\": \"Pacific/Auckland\",\n    \"Antarctica/South_Pole\": \"Pacific/Auckland\",\n    \"Antarctica/Syowa\": \"Asia/Riyadh\",\n    \"Arctic/Longyearbyen\": \"Europe/Berlin\",\n    \"Asia/Aden\": \"Asia/Riyadh\",\n    \"Asia/Ashkhabad\": \"Asia/Ashgabat\",\n    \"Asia/Bahrain\": \"Asia/Qatar\",\n    \"Asia/Brunei\": \"Asia/Kuching\",\n    \"Asia/Calcutta\": \"Asia/Kolkata\",\n    \"Asia/Choibalsan\": \"Asia/Ulaanbaatar\",\n    \"Asia/Chongqing\": \"Asia/Shanghai\",\n    \"Asia/Chungking\": \"Asia/Shanghai\",\n    \"Asia/Dacca\": \"Asia/Dhaka\",\n    \"Asia/Harbin\": \"Asia/Shanghai\",\n    \"Asia/Istanbul\": \"Europe/Istanbul\",\n    \"Asia/Kashgar\": \"Asia/Urumqi\",\n    \"Asia/Katmandu\": \"Asia/Kathmandu\",\n    \"Asia/Kuala_Lumpur\": \"Asia/Singapore\",\n    \"Asia/Kuwait\": \"Asia/Riyadh\",\n    \"Asia/Macao\": \"Asia/Macau\",\n    \"Asia/Muscat\": \"Asia/Dubai\",\n    \"Asia/Phnom_Penh\": \"Asia/Bangkok\",\n    \"Asia/Rangoon\": \"Asia/Yangon\",\n    \"Asia/Saigon\": \"Asia/Ho_Chi_Minh\",\n    \"Asia/Tel_Aviv\": \"Asia/Jerusalem\",\n    \"Asia/Thimbu\": \"Asia/Thimphu\",\n    \"Asia/Ujung_Pandang\": \"Asia/Makassar\",\n    \"Asia/Ulan_Bator\": \"Asia/Ulaanbaatar\",\n    \"Asia/Vientiane\": \"Asia/Bangkok\",\n    \"Atlantic/Faeroe\": \"Atlantic/Faroe\",\n    \"Atlantic/Jan_Mayen\": \"Europe/Berlin\",\n    \"Atlantic/Reykjavik\": \"Africa/Abidjan\",\n    \"Atlantic/St_Helena\": \"Africa/Abidjan\",\n    \"Australia/ACT\": \"Australia/Sydney\",\n    \"Australia/Canberra\": \"Australia/Sydney\",\n    \"Australia/Currie\": \"Australia/Hobart\",\n    \"Australia/LHI\": \"Australia/Lord_Howe\",\n    \"Australia/NSW\": \"Australia/Sydney\",\n    \"Australia/North\": \"Australia/Darwin\",\n    \"Australia/Queensland\": \"Australia/Brisbane\",\n    \"Australia/South\": \"Australia/Adelaide\",\n    \"Australia/Tasmania\": \"Australia/Hobart\",\n    \"Australia/Victoria\": \"Australia/Melbourne\",\n    \"Australia/West\": \"Australia/Perth\",\n    \"Australia/Yancowinna\": \"Australia/Broken_Hill\",\n    \"Brazil/Acre\": \"America/Rio_Branco\",\n    \"Brazil/DeNoronha\": \"America/Noronha\",\n    \"Brazil/East\": \"America/Sao_Paulo\",\n    \"Brazil/West\": \"America/Manaus\",\n    \"CET\": \"Europe/Brussels\",\n    \"CST6CDT\": \"America/Chicago\",\n    \"Canada/Atlantic\": \"America/Halifax\",\n    \"Canada/Central\": \"America/Winnipeg\",\n    \"Canada/Eastern\": \"America/Toronto\",\n    \"Canada/Mountain\": \"America/Edmonton\",\n    \"Canada/Newfoundland\": \"America/St_Johns\",\n    \"Canada/Pacific\": \"America/Vancouver\",\n    \"Canada/Saskatchewan\": \"America/Regina\",\n    \"Canada/Yukon\": \"America/Whitehorse\",\n    \"Chile/Continental\": \"America/Santiago\",\n    \"Chile/EasterIsland\": \"Pacific/Easter\",\n    \"Cuba\": \"America/Havana\",\n    \"EET\": \"Europe/Athens\",\n    \"EST\": \"America/Panama\",\n    \"EST5EDT\": \"America/New_York\",\n    \"Egypt\": \"Africa/Cairo\",\n    \"Eire\": \"Europe/Dublin\",\n    \"Etc/GMT+0\": \"Etc/GMT\",\n    \"Etc/GMT-0\": \"Etc/GMT\",\n    \"Etc/GMT0\": \"Etc/GMT\",\n    \"Etc/Greenwich\": \"Etc/GMT\",\n    \"Etc/UCT\": \"Etc/UTC\",\n    \"Etc/Universal\": \"Etc/UTC\",\n    \"Etc/Zulu\": \"Etc/UTC\",\n    \"Europe/Amsterdam\": \"Europe/Brussels\",\n    \"Europe/Belfast\": \"Europe/London\",\n    \"Europe/Bratislava\": \"Europe/Prague\",\n    \"Europe/Busingen\": \"Europe/Zurich\",\n    \"Europe/Copenhagen\": \"Europe/Berlin\",\n    \"Europe/Guernsey\": \"Europe/London\",\n    \"Europe/Isle_of_Man\": \"Europe/London\",\n    \"Europe/Jersey\": \"Europe/London\",\n    \"Europe/Kiev\": \"Europe/Kyiv\",\n    \"Europe/Ljubljana\": \"Europe/Belgrade\",\n    \"Europe/Luxembourg\": \"Europe/Brussels\",\n    \"Europe/Mariehamn\": \"Europe/Helsinki\",\n    \"Europe/Monaco\": \"Europe/Paris\",\n    \"Europe/Nicosia\": \"Asia/Nicosia\",\n    \"Europe/Oslo\": \"Europe/Berlin\",\n    \"Europe/Podgorica\": \"Europe/Belgrade\",\n    \"Europe/San_Marino\": \"Europe/Rome\",\n    \"Europe/Sarajevo\": \"Europe/Belgrade\",\n    \"Europe/Skopje\": \"Europe/Belgrade\",\n    \"Europe/Stockholm\": \"Europe/Berlin\",\n    \"Europe/Tiraspol\": \"Europe/Chisinau\",\n    \"Europe/Uzhgorod\": \"Europe/Kyiv\",\n    \"Europe/Vaduz\": \"Europe/Zurich\",\n    \"Europe/Vatican\": \"Europe/Rome\",\n    \"Europe/Zagreb\": \"Europe/Belgrade\",\n    \"Europe/Zaporozhye\": \"Europe/Kyiv\",\n    \"GB\": \"Europe/London\",\n    \"GB-Eire\": \"Europe/London\",\n    \"GMT+0\": \"Etc/GMT\",\n    \"GMT-0\": \"Etc/GMT\",\n    \"GMT0\": \"Etc/GMT\",\n    \"Greenwich\": \"Etc/GMT\",\n    \"HST\": \"Pacific/Honolulu\",\n    \"Hongkong\": \"Asia/Hong_Kong\",\n    \"Iceland\": \"Africa/Abidjan\",\n    \"Indian/Antananarivo\": \"Africa/Nairobi\",\n    \"Indian/Christmas\": \"Asia/Bangkok\",\n    \"Indian/Cocos\": \"Asia/Yangon\",\n    \"Indian/Comoro\": \"Africa/Nairobi\",\n    \"Indian/Kerguelen\": \"Indian/Maldives\",\n    \"Indian/Mahe\": \"Asia/Dubai\",\n    \"Indian/Mayotte\": \"Africa/Nairobi\",\n    \"Indian/Reunion\": \"Asia/Dubai\",\n    \"Iran\": \"Asia/Tehran\",\n    \"Israel\": \"Asia/Jerusalem\",\n    \"Jamaica\": \"America/Jamaica\",\n    \"Japan\": \"Asia/Tokyo\",\n    \"Kwajalein\": \"Pacific/Kwajalein\",\n    \"Libya\": \"Africa/Tripoli\",\n    \"MET\": \"Europe/Brussels\",\n    \"MST\": \"America/Phoenix\",\n    \"MST7MDT\": \"America/Denver\",\n    \"Mexico/BajaNorte\": \"America/Tijuana\",\n    \"Mexico/BajaSur\": \"America/Mazatlan\",\n    \"Mexico/General\": \"America/Mexico_City\",\n    \"NZ\": \"Pacific/Auckland\",\n    \"NZ-CHAT\": \"Pacific/Chatham\",\n    \"Navajo\": \"America/Denver\",\n    \"PRC\": \"Asia/Shanghai\",\n    \"PST8PDT\": \"America/Los_Angeles\",\n    \"Pacific/Chuuk\": \"Pacific/Port_Moresby\",\n    \"Pacific/Enderbury\": \"Pacific/Kanton\",\n    \"Pacific/Funafuti\": \"Pacific/Tarawa\",\n    \"Pacific/Johnston\": \"Pacific/Honolulu\",\n    \"Pacific/Majuro\": \"Pacific/Tarawa\",\n    \"Pacific/Midway\": \"Pacific/Pago_Pago\",\n    \"Pacific/Pohnpei\": \"Pacific/Guadalcanal\",\n    \"Pacific/Ponape\": \"Pacific/Guadalcanal\",\n    \"Pacific/Saipan\": \"Pacific/Guam\",\n    \"Pacific/Samoa\": \"Pacific/Pago_Pago\",\n    \"Pacific/Truk\": \"Pacific/Port_Moresby\",\n    \"Pacific/Wake\": \"Pacific/Tarawa\",\n    \"Pacific/Wallis\": \"Pacific/Tarawa\",\n    \"Pacific/Yap\": \"Pacific/Port_Moresby\",\n    \"Poland\": \"Europe/Warsaw\",\n    \"Portugal\": \"Europe/Lisbon\",\n    \"ROC\": \"Asia/Taipei\",\n    \"ROK\": \"Asia/Seoul\",\n    \"Singapore\": \"Asia/Singapore\",\n    \"Turkey\": \"Europe/Istanbul\",\n    \"UCT\": \"Etc/UTC\",\n    \"US/Alaska\": \"America/Anchorage\",\n    \"US/Aleutian\": \"America/Adak\",\n    \"US/Arizona\": \"America/Phoenix\",\n    \"US/Central\": \"America/Chicago\",\n    \"US/East-Indiana\": \"America/Indiana/Indianapolis\",\n    \"US/Eastern\": \"America/New_York\",\n    \"US/Hawaii\": \"Pacific/Honolulu\",\n    \"US/Indiana-Starke\": \"America/Indiana/Knox\",\n    \"US/Michigan\": \"America/Detroit\",\n    \"US/Mountain\": \"America/Denver\",\n    \"US/Pacific\": \"America/Los_Angeles\",\n    \"US/Samoa\": \"Pacific/Pago_Pago\",\n    \"UTC\": \"Etc/UTC\",\n    \"Universal\": \"Etc/UTC\",\n    \"W-SU\": \"Europe/Moscow\",\n    \"WET\": \"Europe/Lisbon\",\n    \"Zulu\": \"Etc/UTC\"\n};\n","\"use strict\";\n// Type-only circular import\n// eslint-disable-next-line import/no-cycle\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = getInternalSlots;\nvar internalSlotMap = new WeakMap();\nfunction getInternalSlots(x) {\n    var internalSlots = internalSlotMap.get(x);\n    if (!internalSlots) {\n        internalSlots = Object.create(null);\n        internalSlotMap.set(x, internalSlots);\n    }\n    return internalSlots;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pack = pack;\nexports.unpack = unpack;\nvar tslib_1 = require(\"tslib\");\nfunction pack(data) {\n    var zoneNames = Object.keys(data.zones);\n    zoneNames.sort(); // so output is stable\n    return {\n        zones: zoneNames.map(function (zone) {\n            return tslib_1.__spreadArray([\n                zone\n            ], data.zones[zone].map(function (_a) {\n                var ts = _a[0], others = _a.slice(1);\n                return tslib_1.__spreadArray([ts === '' ? '' : ts.toString(36)], others, true).join(',');\n            }), true).join('|');\n        }),\n        abbrvs: data.abbrvs.join('|'),\n        offsets: data.offsets.map(function (o) { return o.toString(36); }).join('|'),\n    };\n}\nfunction unpack(data) {\n    var abbrvs = data.abbrvs.split('|');\n    var offsets = data.offsets.split('|').map(function (n) { return parseInt(n, 36); });\n    var packedZones = data.zones;\n    var zones = {};\n    for (var _i = 0, packedZones_1 = packedZones; _i < packedZones_1.length; _i++) {\n        var d = packedZones_1[_i];\n        var _a = d.split('|'), zone = _a[0], zoneData = _a.slice(1);\n        zones[zone] = zoneData\n            .map(function (z) { return z.split(','); })\n            .map(function (_a) {\n            var ts = _a[0], abbrvIndex = _a[1], offsetIndex = _a[2], dst = _a[3];\n            return [\n                ts === '' ? -Infinity : parseInt(ts, 36),\n                abbrvs[+abbrvIndex],\n                offsets[+offsetIndex],\n                dst === '1',\n            ];\n        });\n    }\n    return zones;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toLocaleString = toLocaleString;\nexports.toLocaleDateString = toLocaleDateString;\nexports.toLocaleTimeString = toLocaleTimeString;\n// eslint-disable-next-line import/no-cycle\nvar core_1 = require(\"./core\");\nvar ToDateTimeOptions_1 = require(\"./abstract/ToDateTimeOptions\");\n/**\n * Number.prototype.toLocaleString ponyfill\n * https://tc39.es/ecma402/#sup-number.prototype.tolocalestring\n */\nfunction toLocaleString(x, locales, options) {\n    var dtf = new core_1.DateTimeFormat(locales, options);\n    return dtf.format(x);\n}\nfunction toLocaleDateString(x, locales, options) {\n    var dtf = new core_1.DateTimeFormat(locales, (0, ToDateTimeOptions_1.ToDateTimeOptions)(options, 'date', 'date'));\n    return dtf.format(x);\n}\nfunction toLocaleTimeString(x, locales, options) {\n    var dtf = new core_1.DateTimeFormat(locales, (0, ToDateTimeOptions_1.ToDateTimeOptions)(options, 'time', 'time'));\n    return dtf.format(x);\n}\n",";(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*!\r\n   *  decimal.js v10.5.0\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n    tag = '[object Decimal]',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { toStringTag: tag };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|bigint|Decimal}\r\n   * max {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  P.clampedTo = P.clamp = function (min, max) {\r\n    var k,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n    min = new Ctor(min);\r\n    max = new Ctor(max);\r\n    if (!min.s || !max.s) return new Ctor(NaN);\r\n    if (min.gt(max)) throw Error(invalidArgument + max);\r\n    k = x.cmp(min);\r\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    // See https://github.com/MikeMcl/decimal.js/pull/217\r\n    x = new Ctor(1).minus(x).div(x.plus(1)).sqrt().atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|bigint|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, -1);\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 1);\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|bigint|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|bigint|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|bigint|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, len, y;\r\n\r\n    if (x.isZero()) return x;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    len = x.d.length;\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` (`n` is -1) and `min` (`n` is 1).\r\n   */\r\n  function maxOrMin(Ctor, args, n) {\r\n    var k, y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n\r\n      // NaN?\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      }\r\n\r\n      k = x.cmp(y);\r\n\r\n      if (k === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // TODO BigInt str: no need to check for decimal point, exponential form or leading zeros.\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str.indexOf('_') > -1) {\r\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n      if (isDecimal.test(str)) return parseDecimal(x, str);\r\n    } else if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n    }\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|bigint|Decimal} The y-coordinate.\r\n   * x {number|string|bigint|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * min {number|string|bigint|Decimal}\r\n   * max {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function clamp(x, min, max) {\r\n    return new this(x).clamp(min, max);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|bigint|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      if (isDecimalInstance(v)) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        // Infinity or NaN?\r\n        if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n      }\r\n\r\n      if (t === 'string') {\r\n        if ((i = v.charCodeAt(0)) === 45) {  // minus sign\r\n          v = v.slice(1);\r\n          x.s = -1;\r\n        } else {\r\n          if (i === 43) v = v.slice(1);  // plus sign\r\n          x.s = 1;\r\n        }\r\n\r\n        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n      }\r\n\r\n      if (t === 'bigint') {\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n      }\r\n\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.clamp = clamp;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.sum = sum;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|bigint|Decimal} The argument of the logarithm.\r\n   * y {number|string|bigint|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, -1);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 1);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} The base.\r\n   * y {number|string|bigint|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   * y {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function sum() {\r\n    var i = 0,\r\n      args = arguments,\r\n      x = new this(args[i]);\r\n\r\n    external = false;\r\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n    external = true;\r\n\r\n    return finalise(x, this.precision, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|bigint|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|bigint|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n  Decimal.prototype.constructor = Decimal;\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n"],"names":["Object","defineProperty","exports","value","require","__exportStar","ecma402_abstract_1","_1","to_locale_string_1","Intl","DateTimeFormat","Date","prototype","locales","options","dateStyle","timeStyle","toLocaleString","error","toLocaleDateString","toLocaleTimeString","BasicFormatMatcher","formats","bestScore","Infinity","bestFormat","invariant","Array","isArray","_i","formats_1","length","format","score","_a","DATE_TIME_PROPS_1","utils_1","DATE_TIME_PROPS","prop","optionsProp","formatProp","undefined","additionPenalty","removalPenalty","offsetPenalty","shortMorePenalty","longLessPenalty","values","optionsPropIndex","indexOf","formatPropIndex","delta","Math","max","min","longMorePenalty","shortLessPenalty","tslib_1","__assign","bestFitFormatMatcherScore","BestFitFormatMatcher","skeletonFormat","patternFormat","rawPattern","skeleton_1","processDateTimePattern","skeletonValue","patternValue","requestedValue","isNumericType","pattern","pattern12","skeleton","rangePatterns","rangePatterns12","t","hour12","differentNumericTypePenalty","DateTimeStyleFormat","dataLocaleData","dateFormat","timeFormat","field","connector","dateTimeFormat","replace","FormatDateTime","dtf","x","implDetails","parts","PartitionDateTimePattern_1","PartitionDateTimePattern","result","parts_1","FormatDateTimePattern","patternParts","getInternalSlots","localeData","getDefaultTimeZone","tzData","TimeClip","internalSlots","dataLocale","locale","nfOptions","create","useGrouping","nf","createMemoizedNumberFormat","nf2Options","minimumIntegerDigits","nf3","nf2","fractionalSecondDigits","nf3Options","tm","ToLocalTime_1","ToLocalTime","calendar","timeZone","patternParts_1","patternPart","p","type","push","v","decimal_js_1","default","millisecond","times","pow","floor","toNumber","fv","f","dayPeriod","timeZoneName","gmtFormat","hourFormat","timeZoneData","inDST","offsetToGmtString","timeZoneOffset","hourCycle","slice","month","hour","pm","am","relatedYear","yearName","__importDefault","pad","n","concat","String","offsetInMs","style","offsetInMinutes","mins","abs","hours","split","positivePattern","negativePattern","offsetStr","FormatDateTimeRange","y","PartitionDateTimeRangePattern_1","PartitionDateTimeRangePattern","FormatDateTimeRangeToParts","part","source","FormatDateTimeToParts","ArrayCreate","InitializeDateTimeFormat","opts","availableLocales","getDefaultLocale","relevantExtensionKeys","uppercaseLinks","requestedLocales","CanonicalizeLocaleList","ToDateTimeOptions_1","ToDateTimeOptions","opt","matcher","GetOption","localeMatcher","TYPE_REGEX","test","RangeError","ca","numberingSystem","nu","hc","r","intl_localematcher_1","ResolveLocale","IsValidTimeZoneName","zoneNamesFromData","keys","CanonicalizeTimeZoneName","zoneNames","weekday","era","year","day","minute","second","GetNumberOption","join","formatMatcher","BasicFormatMatcher_1","isTimeRelated","resolveHourCycle","BestFitFormatMatcher_1","TypeError","DateTimeStyleFormat_1","hcDefault","isNaN","FormatDateTimePattern_1","PartitionPattern","rangePattern","tm1","tm2","dateFieldsPracticallyEqual","patternContainsLargerDateField","TABLE_2_FIELDS_1","TABLE_2_FIELDS","fieldName","rp","v1","v2","SameValue","result_2","result_1","RangePatternType","shared","_b","_c","_d","_e","rangePatternPart","pattern_1","z","startRange","partResult","_f","partResult_1","required","defaults","ToObject","needDefaults","_g","zoneData","i","offset","dst","getApplicableZoneData","tz","plus","YearFromTime","WeekDay","MonthFromTime","DateFromTime","HourFromTime","MinFromTime","SecFromTime","msFromTime","parseDateTimeSkeleton","intervalFormatFallback","k","key","skeletonTokenToTable2","intervalResult","pattern12_1","splitRangePattern","splitFallbackRangePattern","DATE_TIME_REGEX","m","matchSkeletonPattern","expPatternTrimmer","match","len","c","literals","_","literal","filter","Boolean","map","endRange","PART_REGEX","splitIndex","exec","index","FormatDateTime_1","FormatDateTimeRange_1","FormatDateTimeRangeToParts_1","FormatDateTimeToParts_1","InitializeDateTimeFormat_1","links_1","get_internal_slots_1","packer_1","UPPERCASED_LINKS","reduce","all","l","toUpperCase","RESOLVED_OPTIONS_KEYS","formatDescriptor","enumerable","configurable","get","this","OrdinaryHasInstance","boundFormat","date","now","ToNumber","writable","e","SupportedLocales","ro","RESOLVED_OPTIONS_KEYS_1","startDate","endDate","__setDefaultTimeZone","__defaultTimeZone","__addLocaleData","data","arguments","_loop_1","d","intervalFormats","rawData","__rest","processedData","full","long","medium","short","_loop_2","minimizedLocale","Locale","minimize","toString","add","__defaultLocale","data_1","Set","polyfilled","__addTZData","unpack","Symbol","toStringTag","constructor","internalSlotMap","set","WeakMap","pack","zones","sort","zone","__spreadArray","ts","others","abbrvs","offsets","o","parseInt","packedZones","packedZones_1","abbrvIndex","offsetIndex","core_1","globalScope","Decimal","inexact","noConflict","quadrant","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","mathpow","isBinary","isHex","isOctal","isDecimal","BASE","LN10_PRECISION","PI_PRECISION","P","digitsToString","ws","indexOfLastWord","str","w","getZeroString","checkInt32","Error","checkRoundingDigits","rm","repeating","di","rd","ceil","convertBase","baseIn","baseOut","j","arrL","arr","strL","charAt","reverse","absoluteValue","s","finalise","clampedTo","clamp","Ctor","NaN","gt","cmp","comparedTo","xdL","ydL","xd","yd","xs","ys","cosine","cos","pr","sd","isZero","tinyPow","taylorSeries","cos2x","minus","toLessThanHalfPi","neg","cubeRoot","cbrt","rep","t3","t3plusx","isFinite","toExponential","divide","eq","decimalPlaces","dp","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","one","cosh2_x","d8","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","isNeg","getPi","atan","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","asin","halfPi","inverseTangent","px","x2","isInteger","isInt","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","arg","naturalLogarithm","getLn10","sub","xe","xLTy","pop","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","carry","unshift","getPrecision","round","sine","sin","sin2_x","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","multiplyInteger","temp","compare","a","b","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","guard","sum","c0","numerator","x1","parseDecimal","search","substring","charCodeAt","parseOther","divisor","isFloat","toLowerCase","isHyperbolic","u","pi","atan2","config","obj","useDefaults","ps","getRandomValues","randomBytes","hypot","isDecimalInstance","log2","log10","random","Uint32Array","copy","clone","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","hasOwnProperty","define","amd","module","iterator","self","window"],"mappings":";4FACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CC,EAAA,MACAC,aAAAD,EAAA,KAAAF,yBCFAF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/C,IAAAG,EAAAF,EAAA,MACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,OACC,EAAAE,EAAAL,gBAAAQ,KAAA,kBAAgEN,MAAAI,EAAAG,kBAChE,EAAAJ,EAAAL,gBAAAU,KAAAC,UAAA,kBACGT,MAAA,SAAAU,EAAAC,QACI,IAAAA,IAA0BA,EAAA,CACtBC,UAAA,QACAC,UAAA,WAEJ,IACI,OAAO,EAAPR,EAAAS,gBAAA,KAAAJ,EAAAC,EACJ,OAAAI,GAEI,MAAO,cACX,CACJ,KAEH,EAAAZ,EAAAL,gBAAAU,KAAAC,UAAA,sBACGT,MAAA,SAAAU,EAAAC,QACI,IAAAA,IAA0BA,EAAA,CACtBC,UAAA,UAEJ,IACI,OAAO,EAAPP,EAAAW,oBAAA,KAAAN,EAAAC,EACJ,OAAAI,GAEI,MAAO,cACX,CACJ,KAEH,EAAAZ,EAAAL,gBAAAU,KAAAC,UAAA,sBACGT,MAAA,SAAAU,EAAAC,QACI,IAAAA,IAA0BA,EAAA,CACtBE,UAAA,WAEJ,IACI,OAAO,EAAPR,EAAAY,oBAAA,KAAAP,EAAAC,EACJ,OAAAI,GAEI,MAAO,cACX,CACJ,0BC3CJlB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQmB,mBAQP,SAAAP,EAAAQ,GAEG,IAAAC,GAAAC,IACAC,EAAAH,EAAA,IACC,EAAAhB,EAAAoB,WAAAC,MAAAC,QAAAN,GAAA,sCACD,IAAK,IAALO,EAAA,EAAAC,EAAAR,EAAAO,EAAAC,EAAAC,OAAAF,IAAA,CAGI,IAFA,IAAAG,EAAAF,EAAAD,GACAI,EAAA,EACAC,EAAA,EAAAC,EAAAC,EAAAC,gBAAAH,EAAAC,EAAAJ,OAAAG,IAAA,CACI,IAAAI,EAAAH,EAAAD,GACAK,EAAAzB,EAAAwB,GACAE,EAAAR,EAAAM,GACA,QAAAG,IAAAF,QAAAE,IAAAD,EACIP,GAAAG,EAAAM,qBACJ,QAAAD,IAAAF,QAAAE,IAAAD,EAEIP,GAAAG,EAAAO,oBACJ,oBAAAL,EAEI,UAAAC,GAAA,iBAAAA,EACI,gBAAAC,EACIP,GAAAG,EAAAQ,cACJ,eAAAJ,EAEIP,GAAAG,EAAAQ,cAAAR,EAAAS,iBACJ,UAAAN,GAAA,SAAAC,GAGA,iBAAAD,GAAA,gBAAAC,EADIP,GAAAG,EAAAS,iBAKJN,IAAAC,IAEIP,GAAAG,EAAAO,gBAER,gBAAAJ,GAAA,eAAAC,EAGIP,GAAAG,EAAAS,iBACJ,SAAAN,GAAA,gBAAAA,EAEI,eAAAC,EACIP,GAAAG,EAAAQ,cACJ,gBAAAJ,EAEIP,GAAAG,EAAAQ,cAAAR,EAAAU,gBACJ,SAAAP,GAAA,UAAAC,GAGA,gBAAAD,GAAA,iBAAAC,EADIP,GAAAG,EAAAU,gBAKJP,IAAAC,IAEIP,GAAAG,EAAAO,gBAER,eAAAJ,GAAA,gBAAAC,EAGIP,GAAAG,EAAAU,gBACJP,IAAAC,IAEIP,GAAAG,EAAAO,qBAER,GAAAJ,IAAAC,EAAA,CAEI,IAAAO,OAAA,EAOAC,GALID,EADJ,2BAAAT,EACI,CAAU,EAAG,EAAG,GAGhB,CAAU,UAAW,UAAW,SAAU,QAAS,SAEvDW,QAAAV,GACAW,EAAAH,EAAAE,QAAAT,GACAW,EAAAC,KAAAC,KAAA,EAAAD,KAAAE,IAAAJ,EAAAF,EAAA,IACA,IAAAG,EACIlB,GAAAG,EAAAmB,gBACJ,IAAAJ,EAEIlB,GAAAG,EAAAS,kBACJ,IAAAM,EAEIlB,GAAAG,EAAAoB,kBACJ,IAAAL,IAEIlB,GAAAG,EAAAU,gBAER,CACJ,CACAb,EAAAV,IACIA,EAAAU,EACAR,EAAAO,EAER,CACA,OAAAyB,EAAAC,SAAA,GAAAjC,EACJ,EAzGA,IAAAgC,EAAArD,EAAA,MACAE,EAAAF,EAAA,MACAgC,EAAAhC,EAAA,4BCJAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQyD,0BAARA,EACAzD,EAAQ0D,qBAkEP,SAAA9C,EAAAQ,GAEG,IAAAC,GAAAC,IACAC,EAAAH,EAAA,IACC,EAAAhB,EAAAoB,WAAAC,MAAAC,QAAAN,GAAA,sCACD,IAAK,IAALO,EAAA,EAAAC,EAAAR,EAAAO,EAAAC,EAAAC,OAAAF,IAAA,CACI,IAAAG,EAAAF,EAAAD,GACAI,EAAA0B,EAAA7C,EAAAkB,GACAC,EAAAV,IACIA,EAAAU,EACAR,EAAAO,EAER,CACA,IAAA6B,EAAAJ,EAAAC,SAAA,GAAAjC,GACAqC,EAAA,CAAsBC,WAAAtC,EAAAsC,YAItB,IAAK,IAALzB,KAHC,EAAA0B,EAAAC,wBAAAxC,EAAAsC,WAAAD,GAGDD,EAAA,CACI,IAAAK,EAAAL,EAAAvB,GACA6B,EAAAL,EAAAxB,GACA8B,EAAAtD,EAAAwB,GAGA,WAAAA,GAAA,WAAAA,IAIA8B,IAMAC,EAAAF,KAAAE,EAAAD,IAIAF,IAAAE,IAGAN,EAAAxB,GAAA8B,IACJ,CAOA,OALAN,EAAAQ,QAAAT,EAAAS,QACAR,EAAAS,UAAAV,EAAAU,UACAT,EAAAU,SAAAX,EAAAW,SACAV,EAAAW,cAAAZ,EAAAY,cACAX,EAAAY,gBAAAb,EAAAa,gBACAZ,CACJ,EAnHA,IAAAL,EAAArD,EAAA,MACAE,EAAAF,EAAA,MACA4D,EAAA5D,EAAA,MACAgC,EAAAhC,EAAA,MACA,SAAAiE,EAAAM,GACI,kBAAAA,GAAA,YAAAA,CACJ,CAMC,SAAAhB,EAAA7C,EAAAkB,GAEG,IAAAC,EAAA,EACAnB,EAAA8D,SAAA5C,EAAA4C,OACI3C,GAAAG,EAAAO,gBACJ7B,EAAA8D,QAAA5C,EAAA4C,SAEI3C,GAAAG,EAAAM,iBAEJ,IAAK,IAALb,EAAA,EAAAM,EAAAC,EAAAC,gBAAAR,EAAAM,EAAAJ,OAAAF,IAAA,CACI,IAAAS,EAAAH,EAAAN,GACAU,EAAAzB,EAAAwB,GACAE,EAAAR,EAAAM,GACA,QAAAG,IAAAF,QAAAE,IAAAD,EACIP,GAAAG,EAAAM,qBACJ,QAAAD,IAAAF,QAAAE,IAAAD,EAEIP,GAAAG,EAAAO,oBACJ,GAAAJ,IAAAC,EAGI,GAAA6B,EAAA9B,KAAA8B,EAAA7B,GAEIP,GAAAG,EAAAyC,gCACJ,CAEI,IAAA9B,EAAA,CAAc,UAAW,UAAW,SAAU,QAAS,QACvDC,EAAAD,EAAAE,QAAAV,GACAW,EAAAH,EAAAE,QAAAT,GACAW,EAAAC,KAAAC,KAAA,EAAAD,KAAAE,IAAAJ,EAAAF,EAAA,IACA,IAAAG,EACIlB,GAAAG,EAAAmB,gBACJ,IAAAJ,EAEIlB,GAAAG,EAAAS,kBACJ,IAAAM,EAEIlB,GAAAG,EAAAoB,kBACJ,IAAAL,IAEIlB,GAAAG,EAAAU,gBAER,CAER,CACA,OAAAb,CACJ,wBC7DAjC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQ4E,oBAER,SAAA/D,EAAAC,EAAA+D,GACI,IAAAC,EAAAC,OACAxC,IAAAzB,KACK,EAAAV,EAAAoB,WAAA,SAAAV,GAAA,SAAAA,GAAA,WAAAA,GAAA,UAAAA,EAAA,qBAIDiE,EAAAF,EAAAE,WAAAjE,SAEJyB,IAAA1B,KACK,EAAAT,EAAAoB,WAAA,SAAAX,GAAA,SAAAA,GAAA,WAAAA,GAAA,UAAAA,EAAA,qBAIDiE,EAAAD,EAAAC,WAAAjE,IAEJ,QAAA0B,IAAA1B,QAAA0B,IAAAzB,EAAA,CACI,IAAAgB,EAAA,GACA,IAAK,IAALkD,KAAAF,EACI,YAAAE,IAEIlD,EAAAkD,GAAAF,EAAAE,IAGR,IAAK,IAALA,KAAAD,EACI,YAAAC,GAAA,cAAAA,IAEIlD,EAAAkD,GAAAD,EAAAC,IAGR,IAAAC,EAAAJ,EAAAK,eAAArE,GACAuD,EAAAa,EAAAE,QAAA,MAAAJ,EAAAX,SAAAe,QAAA,MAAAL,EAAAV,SAIA,GADAtC,EAAAsC,QAAAA,EACI,cAAJW,EAAA,CACI,IAAAV,EAAAY,EAAAE,QAAA,MAAAJ,EAAAV,WAAAc,QAAA,MAAAL,EAAAV,SAGAtC,EAAAuC,UAAAA,CACJ,CACA,OAAAvC,CACJ,CACA,QAAAS,IAAAzB,EACI,OAAAiE,EAGJ,OADC,EAAA3E,EAAAoB,gBAAAe,IAAA1B,EAAA,qCACDiE,CACJ,EAjDA,IAAA1E,EAAAF,EAAA,4BCFAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQoF,eAMP,SAAAC,EAAAC,EAAAC,GAIG,IAFA,IAAAC,GAAA,EAAAC,EAAAC,0BAAAL,EAAAC,EAAAC,GACAI,EAAA,GACAhE,EAAA,EAAAiE,EAAAJ,EAAA7D,EAAAiE,EAAA/D,OAAAF,IAAA,CAEIgE,GADAC,EAAAjE,GACA1B,KACJ,CACA,OAAA0F,CACJ,EAdA,IAAAF,EAAAvF,EAAA,4BCFAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQ6F,sBAsCP,SAAAR,EAAAS,EAAAR,EAAAtD,GAEG,IAAA+D,EAAA/D,EAAA+D,iBAAAC,EAAAhE,EAAAgE,WAAAC,EAAAjE,EAAAiE,mBAAAC,EAAAlE,EAAAkE,OACAZ,GAAA,EAAAlF,EAAA+F,UAAAb,GACA,IAAAc,EAAAL,EAAAV,GAEAgB,EAAAD,EAAAC,WACAxB,EAAAmB,EAAAK,GACAC,EAAAF,EAAAE,OAEAC,EAAAzG,OAAA0G,OAAA,MACAD,EAAAE,aAAA,EACA,IAAAC,GAAA,EAAAtG,EAAAuG,4BAAAL,EAAAC,GACAK,EAAA9G,OAAA0G,OAAA,MACAI,EAAAC,qBAAA,EACAD,EAAAH,aAAA,EACA,IAEAK,EAFAC,GAAA,EAAA3G,EAAAuG,4BAAAL,EAAAM,GACAI,EAAAZ,EAAAY,uBAEA,QAAAzE,IAAAyE,EAAA,CACI,IAAAC,EAAAnH,OAAA0G,OAAA,MACAS,EAAAJ,qBAAAG,EACAC,EAAAR,aAAA,EACAK,GAAA,EAAA1G,EAAAuG,4BAAAL,EAAAW,EACJ,CAKA,IAJA,IAAAC,GAAA,EAAAC,EAAAC,aAAA9B,EAEAc,EAAAiB,SAAAjB,EAAAkB,SAAA,CAAkDpB,OAAAA,IAClDP,EAAA,GACAhE,EAAA,EAAA4F,EAAAzB,EAAAnE,EAAA4F,EAAA1F,OAAAF,IAAA,CACI,IAAA6F,EAAAD,EAAA5F,GACA8F,EAAAD,EAAAE,KACA,eAAAD,EACI9B,EAAAgC,KAAA,CACID,KAAA,UACAzH,MAAAuH,EAAAvH,aAER,8BAAAwH,EAAA,CAEI,IAAAG,EAAA,IAAAC,EAAAC,QAAAZ,EAAAa,aAAAC,MAAA,IAAAC,KAAAjB,GAAA,MAAAkB,QAAAC,WAKAxC,EAAAgC,KAAA,CACID,KAAA,mBACAzH,MAAA6G,EAAAhF,OAAA8F,IAER,uBAAAH,EAAA,CAEI,IAEAW,EAAAlB,EAFAmB,EAAAjC,EAAAkC,WAGA3C,EAAAgC,KAAA,CAAcD,KAAAD,EAASxH,MAAAmI,GAC3B,0BAAAX,EAAA,CAEI,IAAAY,EAAAjC,EAAAmC,aAEAA,GADAH,OAAA,EACAvD,EAAA0D,cAAAC,EAAA3D,EAAA2D,UAAAC,EAAA5D,EAAA4D,WAEAC,EAAAH,EADAnC,EAAAkB,UAAArB,KAGImC,EADJM,GAAAA,EAAAL,GACIK,EAAAL,IAAAnB,EAAAyB,OAIAC,EAAAJ,EAAAC,EAAAvB,EAAA2B,eAAAR,GAEJ1C,EAAAgC,KAAA,CAAcD,KAAAD,EAASxH,MAAAmI,GAC3B,SAAAlG,EAAAC,gBAAAY,QAAA0E,IAAA,GAEIW,EAAA,GACAC,EAAAjC,EAAAqB,GAEAG,EAAAV,EAAAO,GACA,SAAAA,GAAAG,GAAA,IACIA,EAAA,EAAAA,GAEJ,UAAAH,GACIG,IAEJ,IAAAkB,EAAA1C,EAAA0C,UACA,SAAArB,GAAA,QAAAqB,GAAA,QAAAA,GAEI,KADAlB,GAAA,KACA,QAAAkB,IACIlB,EAAA,IAGR,SAAAH,GAAA,QAAAqB,GACI,IAAAlB,IACIA,EAAA,IAGR,YAAAS,EACID,EAAA1B,EAAA5E,OAAA8F,GACJ,YAAAS,GAEID,EAAArB,EAAAjF,OAAA8F,IACA/F,OAAA,IACIuG,EAAAA,EAAAW,MAAAX,EAAAvG,OAAA,EAAAuG,EAAAvG,SAER,WAAAwG,GAAA,UAAAA,GAAA,SAAAA,IAGQD,EADJ,QAAAX,EACI5C,EAAA4C,GAAAY,GAAAT,GACJ,UAAAH,EAEI5C,EAAAmE,MAAAX,GAAAT,EAAA,GAGA/C,EAAA4C,GAAAY,GAAAT,IAGRjC,EAAAgC,KAAA,CACID,KAAAD,EACAxH,MAAAmI,GAER,kBAAAX,EAAA,CAGIW,OAAA,EAEIA,GAHJR,EAAAV,EAAA+B,MAEA,GACIpE,EAAAqE,GAGArE,EAAAsE,GAEJxD,EAAAgC,KAAA,CACID,KAAA,YACAzH,MAAAmI,GAER,yBAAAX,EAAA,CAEIG,EAAAV,EAAAkC,YAEAhB,EAAA1B,EAAA5E,OAAA8F,GACAjC,EAAAgC,KAAA,CAEID,KAAA,cACAzH,MAAAmI,GAER,sBAAAX,EAAA,CAEIG,EAAAV,EAAAmC,SAEAjB,EAAA1B,EAAA5E,OAAA8F,GACAjC,EAAAgC,KAAA,CAEID,KAAA,WACAzH,MAAAmI,GAER,CACJ,CACA,OAAAzC,CACJ,EA/LA,IAAApC,EAAArD,EAAA,MACAE,EAAAF,EAAA,MACA2H,EAAAtE,EAAA+F,gBAAApJ,EAAA,OACAiH,EAAAjH,EAAA,MACAgC,EAAAhC,EAAA,MACA,SAAAqJ,EAAAC,GACI,OAAAA,EAAA,GACW,IAAPC,OAAAD,GAEJE,OAAAF,EACJ,CACA,SAAAZ,EAAAJ,EAAAC,EAAAkB,EAAAC,GACI,IAAAC,EAAA3G,KAAAgF,MAAAyB,EAAA,KACAG,EAAA5G,KAAA6G,IAAAF,GAAA,GACAG,EAAA9G,KAAAgF,MAAAhF,KAAA6G,IAAAF,GAAA,IACA7H,EAAAyG,EAAAwB,MAAA,KAAAC,EAAAlI,EAAA,GAAAmI,EAAAnI,EAAA,GACAoI,EAAA,GACAhG,EAAAuF,EAAA,EAAAQ,EAAAD,EAcA,MAbA,SAAAN,EACIQ,EAAAhG,EAAAe,QAAA,KAAAoE,EAAAS,IAAA7E,QAAA,IAAAuE,OAAAM,IAAA7E,QAAA,KAAAoE,EAAAO,IAAA3E,QAAA,IAAAuE,OAAAI,KAKJA,GAAAE,KAEIF,IACI1F,EAAAA,EAAAe,QAAA,YAEJiF,EAAAhG,EAAAe,QAAA,KAAAuE,OAAAM,IAAA7E,QAAA,KAAAuE,OAAAI,KAEJtB,EAAArD,QAAA,MAAAiF,EACJ,wBClCAtK,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQqK,oBAER,SAAAhF,EAAAC,EAAAgF,EAAA/E,GAGI,IAFA,IAAAC,GAAA,EAAA+E,EAAAC,+BAAAnF,EAAAC,EAAAgF,EAAA/E,GACAI,EAAA,GACAhE,EAAA,EAAAiE,EAAAJ,EAAA7D,EAAAiE,EAAA/D,OAAAF,IAAA,CAEIgE,GADAC,EAAAjE,GACA1B,KACJ,CACA,OAAA0F,CACJ,EATA,IAAA4E,EAAArK,EAAA,4BCFAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQyK,2BAER,SAAApF,EAAAC,EAAAgF,EAAA/E,GAGI,IAFA,IAAAC,GAAA,EAAA+E,EAAAC,+BAAAnF,EAAAC,EAAAgF,EAAA/E,GACAI,EAAA,IAAAlE,MAAA,GACAE,EAAA,EAAAiE,EAAAJ,EAAA7D,EAAAiE,EAAA/D,OAAAF,IAAA,CACI,IAAA+I,EAAA9E,EAAAjE,GACAgE,EAAAgC,KAAA,CACID,KAAAgD,EAAAhD,KACAzH,MAAAyK,EAAAzK,MACA0K,OAAAD,EAAAC,QAER,CACA,OAAAhF,CACJ,EAbA,IAAA4E,EAAArK,EAAA,4BCFAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQ4K,sBASP,SAAAvF,EAAAC,EAAAC,GAIG,IAFA,IAAAC,GAAA,EAAAC,EAAAC,0BAAAL,EAAAC,EAAAC,GACAI,GAAA,EAAAvF,EAAAyK,aAAA,GACAlJ,EAAA,EAAAiE,EAAAJ,EAAA7D,EAAAiE,EAAA/D,OAAAF,IAAA,CACI,IAAA+I,EAAA9E,EAAAjE,GACAgE,EAAAgC,KAAA,CACID,KAAAgD,EAAAhD,KACAzH,MAAAyK,EAAAzK,OAER,CACA,OAAA0F,CACJ,EApBA,IAAAvF,EAAAF,EAAA,MACAuF,EAAAvF,EAAA,2BCHAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQ8K,yBAiDP,SAAAzF,EAAA1E,EAAAoK,EAAA/I,GAEG,IAAA+D,EAAA/D,EAAA+D,iBAAAiF,EAAAhJ,EAAAgJ,iBAAAhF,EAAAhE,EAAAgE,WAAAiF,EAAAjJ,EAAAiJ,iBAAAhF,EAAAjE,EAAAiE,mBAAAiF,EAAAlJ,EAAAkJ,sBAAAhF,EAAAlE,EAAAkE,OAAAiF,EAAAnJ,EAAAmJ,eAEAC,GAAA,EAAAhL,EAAAiL,wBAAA1K,GACAC,GAAA,EAAA0K,EAAAC,mBAAAR,EAAA,cACAS,EAAA1L,OAAA0G,OAAA,MACAiF,GAAA,EAAArL,EAAAsL,WAAA9K,EAAA,0BAAqF,SAAU,YAAa,YAC5G4K,EAAAG,cAAAF,EACA,IAAApE,GAAA,EAAAjH,EAAAsL,WAAA9K,EAAA,yBAAA2B,OAAAA,GACA,QAAAA,IAAA8E,IAAAuE,EAAAC,KAAAxE,GACI,MAAM,IAANyE,WAAA,sBAEJ,IAAA1F,EAAAL,EAAAV,GACAmG,EAAAO,GAAA1E,EACA,IAAA2E,GAAA,EAAA5L,EAAAsL,WAAA9K,EAAA,gCAAA2B,OAAAA,GACA,QAAAA,IAAAyJ,IAAAJ,EAAAC,KAAAG,GACI,MAAM,IAANF,WAAA,8BAEJN,EAAAS,GAAAD,EACA,IAAAtH,GAAA,EAAAtE,EAAAsL,WAAA9K,EAAA,wBAAA2B,OAAAA,GACAuG,GAAA,EAAA1I,EAAAsL,WAAA9K,EAAA,sBAAmF,MAAO,MAAO,MAAO,YAAM2B,QAC9GA,IAAAmC,IAEIoE,EAAA,MAEJ0C,EAAAU,GAAApD,EACA,IAAAqD,GAAA,EAAAC,EAAAC,eAAArB,EAAAI,EAAAI,EAAAN,EAAAlF,EAAAiF,GACA7E,EAAAE,OAAA6F,EAAA7F,OACAe,EAAA8E,EAAAJ,GACA3F,EAAAiB,SAAAA,EACAjB,EAAA0C,UAAAqD,EAAAD,GACA9F,EAAA4F,gBAAAG,EAAAF,GACA,IAAA5F,EAAA8F,EAAA9F,WACAD,EAAAC,WAAAA,EACA,IAAAiB,EAAA1G,EAAA0G,SACA,QAAA/E,IAAA+E,EAAA,CAEI,GADAA,EAAAoC,OAAApC,KACK,EAALlH,EAAAkM,qBAAAhF,EAAA,CACIiF,kBAAAzM,OAAA0M,KAAAtG,GACAiF,eAAAA,IAEA,MAAM,IAANW,WAAA,wBAEJxE,GAAA,EAAAlH,EAAAqM,0BAAAnF,EAAA,CACIoF,UAAA5M,OAAA0M,KAAAtG,GACAiF,eAAAA,GAER,MAEI7D,EAAArB,IAEJG,EAAAkB,SAAAA,GACAkE,EAAA1L,OAAA0G,OAAA,OACAmG,SAAA,EAAAvM,EAAAsL,WAAA9K,EAAA,oBAA+E,SAAU,QAAS,aAAO2B,GACzGiJ,EAAAoB,KAAA,EAAAxM,EAAAsL,WAAA9K,EAAA,gBAAuE,SAAU,QAAS,aAAO2B,GACjGiJ,EAAAqB,MAAA,EAAAzM,EAAAsL,WAAA9K,EAAA,iBAAyE,UAAW,gBAAU2B,GAC9FiJ,EAAAxC,OAAA,EAAA5I,EAAAsL,WAAA9K,EAAA,kBAA2E,UAAW,UAAW,SAAU,QAAS,aAAO2B,GAC3HiJ,EAAAsB,KAAA,EAAA1M,EAAAsL,WAAA9K,EAAA,gBAAuE,UAAW,gBAAU2B,GAC5FiJ,EAAAvC,MAAA,EAAA7I,EAAAsL,WAAA9K,EAAA,iBAAyE,UAAW,gBAAU2B,GAC9FiJ,EAAAuB,QAAA,EAAA3M,EAAAsL,WAAA9K,EAAA,mBAA6E,UAAW,gBAAU2B,GAClGiJ,EAAAwB,QAAA,EAAA5M,EAAAsL,WAAA9K,EAAA,mBAA6E,UAAW,gBAAU2B,GAClGiJ,EAAAjD,cAAA,EAAAnI,EAAAsL,WAAA9K,EAAA,yBACI,OACA,QACA,aACA,cACA,cACA,qBACH2B,GACDiJ,EAAAxE,wBAAA,EAAA5G,EAAA6M,iBAAArM,EAAA,kCAAA2B,GACA,IAAAsC,EAAAmB,EAAAK,IACC,EAAAjG,EAAAoB,aAAAqD,EAAA,2BAAA4E,OAAApD,IACD,IAAAjF,EAAAyD,EAAAzD,QAAAiG,GAEA,IAAAjG,EACI,MAAM,IAAN0K,WAAA,aAAArC,OAAApC,EAAA,sEAAAoC,OAAA3J,OAAA0M,KAAA3H,EAAAzD,SAAA8L,KAAA,QAEJ,IAAAC,GAAA,EAAA/M,EAAAsL,WAAA9K,EAAA,0BAA2F,QAAS,YAAa,YACjHC,GAAA,EAAAT,EAAAsL,WAAA9K,EAAA,sBAAmF,OAAQ,OAAQ,SAAU,cAAQ2B,GACrH6D,EAAAvF,UAAAA,EACA,IAEAU,EAmCA6C,EACAG,EAtCAzD,GAAA,EAAAV,EAAAsL,WAAA9K,EAAA,sBAAmF,OAAQ,OAAQ,SAAU,cAAQ2B,GAGrH,GAFA6D,EAAAtF,UAAAA,OAEAyB,IAAA1B,QAAA0B,IAAAzB,EACI,aAAAqM,EACI5L,GAAA,EAAA6L,EAAAjM,oBAAAqK,EAAApK,OACJ,CAGI,GAnIZ,SAAAoK,GACI,IAAK,IAAL7J,EAAA,EAAAK,EAAA,CAAuB,OAAQ,SAAU,UAASL,EAAAK,EAAAH,OAAAF,IAAA,CAG9C,QAAAY,IADAiJ,EADAxJ,EAAAL,IAGI,OAAO,CAEf,CACA,OAAO,CACX,CA0HY0L,CAAA7B,GAAA,CACI,IAAAU,EAAAoB,EAAAlH,EAAA0C,UAAAjE,EAAAiE,UAAApE,GACA8G,EAAA9G,OAAA,QAAAwH,GAAA,QAAAA,CACJ,CAEA3K,GAAA,EAAAgM,EAAA7J,sBAAA8H,EAAApK,EACJ,KACJ,CAEI,IAAK,IAALO,EAAA,EAAAM,EAAAC,EAAAC,gBAAAR,EAAAM,EAAAJ,OAAAF,IAAA,CAGI,QAAAY,KADAkF,EAAA+D,EADApJ,EAAAH,EAAAN,KAGI,MAAM,IAAN6L,UAAA,wCAAA/D,OAAArH,EAAA,UAAAqH,OAAA5I,EAAA,oCAER,CACAU,GAAA,EAAAkM,EAAA7I,qBAAA/D,EAAAC,EAAA+D,EACJ,CAKA,IAAK,IAALzC,KAFAgE,EAAAtE,OAAAP,EAEAiK,EAAA,CACI,IAAA/D,OACAlF,KADAkF,EAAAlG,EAAAa,MAEIgE,EAAAhE,GAAAqF,EAER,CAGA,QAAAlF,IAAA6D,EAAA6C,KAAA,CACIiD,EAAAoB,EAAAlH,EAAA0C,UAAAjE,EAAAiE,UAAApE,GACA0B,EAAA0C,UAAAoD,EACA,QAAAA,GAAA,QAAAA,GACI9H,EAAA7C,EAAA8C,UACAE,EAAAhD,EAAAiD,kBAGAJ,EAAA7C,EAAA6C,QACAG,EAAAhD,EAAAgD,cAER,MAGI6B,EAAA0C,eAAAvG,EACA6B,EAAA7C,EAAA6C,QACAG,EAAAhD,EAAAgD,cAIJ,OAFA6B,EAAAhC,QAAAA,EACAgC,EAAA7B,cAAAA,EACAc,CACJ,EA7LA,IAAAjF,EAAAF,EAAA,MACAkM,EAAAlM,EAAA,MACAkN,EAAAlN,EAAA,MACAqN,EAAArN,EAAA,MACAuN,EAAAvN,EAAA,MACAoL,EAAApL,EAAA,MACAgC,EAAAhC,EAAA,MAWA,SAAAoN,EAAApB,EAAAwB,EAAAhJ,GAuBI,OAtBA,MAAAwH,IACIA,EAAAwB,QAEJnL,IAAAmC,IACIA,EAEQwH,EADJ,QAAAwB,GAAA,QAAAA,EACI,MAGA,QAIH,EAAAtN,EAAAoB,YAAAkD,EAAA,0BAEGwH,EADJ,QAAAwB,GAAA,QAAAA,EACI,MAGA,QAIZxB,CACJ,CACA,IAAAN,EAAA,yCC5CA9L,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQ0F,yBAOP,SAAAL,EAAAC,EAAAC,GAEGD,GAAA,EAAAlF,EAAA+F,UAAAb,IACC,EAAAlF,EAAAoB,YAAA8D,EAAAqI,QAAA,eAAA7B,YACD,IAGA1H,GADA2B,EAFAR,EAAAQ,kBAEAV,GACAjB,QAEA,OAAO,EAAPwJ,EAAA/H,uBAAAR,GAAA,EAAAjF,EAAAyN,kBAAAzJ,GAAAkB,EAAAC,EACJ,EAhBA,IAAAnF,EAAAF,EAAA,MACA0N,EAAA1N,EAAA,4BCHAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQwK,8BAgBR,SAAAnF,EAAAC,EAAAgF,EAAA/E,GAEI,IADAD,GAAA,EAAAlF,EAAA+F,UAAAb,IACAqI,QACI,MAAM,IAAN7B,WAAA,sBAGJ,IADAxB,GAAA,EAAAlK,EAAA+F,UAAAmE,IACAqD,QACI,MAAM,IAAN7B,WAAA,oBAgBJ,IAdA,IAWAgC,EAXA/H,EAAAR,EAAAQ,iBAAAG,EAAAX,EAAAW,OAEAE,EAAAL,EAAAV,GACA0I,GAAA,EAAA5G,EAAAC,aAAA9B,EAGAc,EAAAiB,SAAAjB,EAAAkB,SAAA,CAAkDpB,OAAAA,IAClD8H,GAAA,EAAA7G,EAAAC,aAAAkD,EAEAlE,EAAAiB,SAAAjB,EAAAkB,SAAA,CAAkDpB,OAAAA,IAClD9B,EAAAgC,EAAAhC,QAAAG,EAAA6B,EAAA7B,cAEA0J,GAAA,EACAC,GAAA,EACAvM,EAAA,EAAAwM,EAAAC,EAAAzM,EAAAwM,EAAAtM,OAAAF,IAAA,CACI,IAAA0M,EAAAF,EAAAxM,GACA,GAAAsM,IAAAC,EAAA,CACI,IAAAI,EAAAD,KAAA9J,EAAAA,EAAA8J,QAAA9L,EACA,QAAAA,IAAAuL,QAAAvL,IAAA+L,EACIJ,GAAA,OAIA,GADAJ,EAAAQ,EACA,SAAAD,EAAA,CACI,IAAAE,EAAAR,EAAA9E,KACAuF,EAAAR,EAAA/E,MACAsF,EAAA,IAAAC,EAAA,IAAAD,EAAA,IAAAC,EAAA,MACIP,GAAA,EAER,uBAAAI,QAGA,8BAAAA,EAAA,CAEI,IAAArH,EAAAZ,EAAAY,4BACAzE,IAAAyE,IACIA,EAAA,GAEJuH,EAAArL,KAAAgF,MAAA6F,EAAAhG,YAAA7E,KAAA+E,IAAA,GAAAjB,EAAA,IACAwH,EAAAtL,KAAAgF,MAAA8F,EAAAjG,YAAA7E,KAAA+E,IAAA,GAAAjB,EAAA,KACK,EAAL5G,EAAAqO,WAAAF,EAAAC,KACIP,GAAA,EAER,MAEIM,EAAAR,EAAAM,GACAG,EAAAR,EAAAK,IACK,EAALjO,EAAAqO,WAAAF,EAAAC,KACIP,GAAA,EAER,CAER,CACJ,CACA,GAAAA,EAAA,CAEI,IADA,IAAAS,GAAA,EAAAd,EAAA/H,uBAAAR,GAAA,EAAAjF,EAAAyN,kBAAAzJ,GAAAkB,EAAAC,GACAvD,EAAA,EAAA2M,EAAAD,EAAA1M,EAAA2M,EAAA9M,OAAAG,IAAA,CACI2M,EAAA3M,GACA2I,OAAAvK,EAAAwO,iBAAAC,MACJ,CACA,OAAAH,CACJ,CACA,IAAA/I,EAAA,GACA,QAAApD,IAAAuL,EAII,IAAK,IAALgB,EAAA,EAAAC,GAHAjB,EAAAvJ,EAAAuD,SAGAhC,aAAAgJ,EAAAC,EAAAlN,OAAAiN,IAAA,CACI,IAAAtH,EAAAuH,EAAAD,GACA,QAAAtH,EAAApD,SAAA,QAAAoD,EAAApD,UACIoD,EAAApD,QAAAA,EAER,CAEJ,IAAK,IAAL4K,EAAA,EAAAC,EAAAnB,EAAAhI,aAAAkJ,EAAAC,EAAApN,OAAAmN,IAAA,CACI,IAAAE,EAAAD,EAAAD,GACArE,EAAAuE,EAAAvE,OAAAwE,EAAAD,EAAA9K,QACAgL,OAAA,EAGIA,EAFJzE,IAAAvK,EAAAwO,iBAAAS,YAAA1E,IAAAvK,EAAAwO,iBAAAC,OAEIvJ,EAGAgF,EAIJ,IAFA,IAAAxE,GAAA,EAAA1F,EAAAyN,kBAAAsB,GACAG,GAAA,EAAA1B,EAAA/H,uBAAAR,EAAAS,EAAAsJ,EAAA7J,GACAgK,EAAA,EAAAC,EAAAF,EAAAC,EAAAC,EAAA3N,OAAA0N,IAAA,CACIC,EAAAD,GACA5E,OAAAA,CACJ,CACAhF,EAAAA,EAAA8D,OAAA6F,EACJ,CACA,OAAA3J,CACJ,EAtHA,IAAAvF,EAAAF,EAAA,MACA0N,EAAA1N,EAAA,MACAiH,EAAAjH,EAAA,MACAkO,EAAA,CACI,MACA,OACA,QACA,MACA,YACA,OACA,OACA,SACA,SACA,gDCfJtO,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQuL,kBAOP,SAAA3K,EAAA6O,EAAAC,GAGO9O,OADJ2B,IAAA3B,EACI,MAGA,EAAAR,EAAAuP,UAAA/O,GAEJA,EAAAd,OAAA0G,OAAA5F,GACA,IAAAgP,GAAA,EACA,YAAAH,GAAA,QAAAA,EACI,IAAK,IAAL9N,EAAA,EAAAK,EAAA,CAAuB,UAAW,OAAQ,QAAS,OAAML,EAAAK,EAAAH,OAAAF,IAAA,MAGrDY,IADA3B,EADAoB,EAAAL,MAGIiO,GAAA,EAER,CAEJ,YAAAH,GAAA,QAAAA,EACI,IAAK,IAALX,EAAA,EAAAC,EAAA,CACI,YACA,OACA,SACA,SACA,0BACHD,EAAAC,EAAAlN,OAAAiN,IAAA,MAGGvM,IADA3B,EADAmO,EAAAD,MAGIc,GAAA,EAER,MAEJrN,IAAA3B,EAAAC,gBAAA0B,IAAA3B,EAAAE,YACI8O,GAAA,GAEJ,YAAAH,GAAA7O,EAAAE,UACI,MAAM,IAAN0M,UAAA,oEAEJ,YAAAiC,GAAA7O,EAAAC,UACI,MAAM,IAAN2M,UAAA,oEAEJ,GAAAoC,IAAA,SAAAF,GAAA,QAAAA,GACI,IAAK,IAALV,EAAA,EAAAC,EAAA,CAAuB,OAAQ,QAAS,OAAMD,EAAAC,EAAApN,OAAAmN,IAAA,CAE1CpO,EADAqO,EAAAD,IACA,SACJ,CAEJ,GAAAY,IAAA,SAAAF,GAAA,QAAAA,GACI,IAAK,IAALH,EAAA,EAAAM,EAAA,CAAuB,OAAQ,SAAU,UAASN,EAAAM,EAAAhO,OAAA0N,IAAA,CAE9C3O,EADAiP,EAAAN,IACA,SACJ,CAEJ,OAAA3O,CACJ,EA9DA,IAAAR,EAAAF,EAAA,4BCFAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQoH,YA0BP,SAAA3C,EAAA4C,EAAAC,EAAAtF,GAEG,IAAAkE,EAAAlE,EAAAkE,QACC,EAAA9F,EAAAoB,WAAA,YAAA6F,EAAA,8CACD,IAAAyH,EA5BJ,SAAArK,EAAA6C,EAAApB,GACI,IAAAlE,EACA8N,EAAA5J,EAAAoB,GAEA,IAAAwI,EACI,MAAO,CAAC,GAAG,GAKf,IAHA,IAAAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAF,GAAAD,EAAAjO,OAAAkO,IACI,GAAAA,IAAAD,EAAAjO,QAAA,IAAAiO,EAAAC,GAAA,GAAAtL,EAAA,CAEIuL,GAAAhO,EAAA8N,EAAAC,EAAA,OAAAE,EAAAjO,EAAA,GACA,KACJ,CAEJ,MAAO,CAAC,IAAAgO,EAAcC,EAC1B,CAUIC,CAAAzL,EAAA0D,WAAAb,EAAApB,GAAA2C,EAAAiG,EAAA,GAAAnG,EAAAmG,EAAA,GACAqB,EAAA1L,EAAA2L,KAAAvH,GAAAV,WACA0E,GAAA,EAAAzM,EAAAiQ,cAAAF,GACA,MAAO,CACHxD,SAAA,EAAAvM,EAAAkQ,SAAAH,GACAvD,IAAAC,EAAA,YACAA,KAAAA,EACAzD,iBAAA7G,EACA8G,cAAA9G,EACAyG,OAAA,EAAA5I,EAAAmQ,eAAAJ,GACArD,KAAA,EAAA1M,EAAAoQ,cAAAL,GACAlH,MAAA,EAAA7I,EAAAqQ,cAAAN,GACApD,QAAA,EAAA3M,EAAAsQ,aAAAP,GACAnD,QAAA,EAAA5M,EAAAuQ,aAAAR,GACApI,aAAA,EAAA3H,EAAAwQ,YAAAT,GACAxH,MAAAA,EAEAE,eAAAA,EAER,EAhDA,IAAAzI,EAAAF,EAAA,4BCFAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQ+D,uBAARA,EACA/D,EAAQ6Q,sBA0MP,SAAAvM,EAAAT,EAAAU,EAAAuM,QAEG,IAAAjN,IAA6BA,EAAAS,GAC7B,IAAAqB,EAAA,CACIvB,QAAA,GACAC,UAAA,GACAC,SAAAA,EACAT,WAAAA,EACAU,cAAA,GACAC,gBAAA,IAEJ,GAAAD,EACI,IAAK,IAALwM,KAAAxM,EAAA,CACI,IAAAyM,EAAAC,EAAAF,GAEAG,EAAA,CACIpL,aAAA,IAEJ9D,EAAA+B,EAJAQ,EAAAwM,GAIAG,GAAA/B,EAAAnN,EAAA,GAAAmP,EAAAnP,EAAA,GACA2D,EAAApB,cAAAyM,GAAAzN,EAAAC,SAAAD,EAAAC,SAAA,GAAA0N,GAAA,CAAqFpL,aAAAsL,EAAAjC,KACrFxJ,EAAAnB,gBAAAwM,GAAAzN,EAAAC,SAAAD,EAAAC,SAAA,GAAA0N,GAAA,CAAuFpL,aAAAsL,EAAAD,IAC3F,CAEJ,GAAAL,EAAA,CACI,IAAAhL,EAAAuL,EAAAP,GACAnL,EAAApB,cAAAuD,QAAA,CACIhC,aAAAA,GAEJH,EAAAnB,gBAAAsD,QAAA,CACIhC,aAAAA,EAER,CAEAxB,EAAAa,QAAAmM,GAAA,SAAAC,GAAiD,OAAAC,EAAAD,EAAA5L,EAAwC,IACzF,IAAAmJ,EAAA/K,EAAAF,GAAAO,EAAA0K,EAAA,GAAAzK,EAAAyK,EAAA,GAGA,OAFAnJ,EAAAvB,QAAAA,EACAuB,EAAAtB,UAAAA,EACAsB,CACJ,EA/OA3F,EAAQqR,0BAARA,EACArR,EAAQoR,kBAARA,EACA,IAAA7N,EAAArD,EAAA,MACAE,EAAAF,EAAA,MAKCoR,EAAA,4KAGDG,EAAA,qCACA,SAAAD,EAAAE,EAAA/L,GACI,IAAAgM,EAAAD,EAAA7P,OACA,OAAA6P,EAAA,IAEI,IAAK,IAED,OADA/L,EAAAiH,IAAA,IAAA+E,EAAA,WAAAA,EAAA,iBACO,QAEX,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAED,OADAhM,EAAAkH,KAAA,IAAA8E,EAAA,oBACO,SAEX,IAAK,IACL,IAAK,IACD,MAAM,IAAN7F,WAAA,8CAEJ,IAAK,IACL,IAAK,IAED,OADAnG,EAAAqD,MAAA,CAAgB,UAAW,UAAW,QAAS,OAAQ,UAAS2I,EAAA,GACzD,UAEX,IAAK,IACL,IAAK,IACD,MAAM,IAAN7F,WAAA,mDACJ,IAAK,IAED,OADAnG,EAAAmH,IAAA,CAAc,UAAW,WAAU6E,EAAA,GAC5B,QACX,IAAK,IACL,IAAK,IACL,IAAK,IAED,OADAhM,EAAAmH,IAAA,UACO,QAEX,IAAK,IAED,OADAnH,EAAAgH,QAAA,IAAAgF,EAAA,WAAAA,EAAA,iBACO,YACX,IAAK,IAUL,IAAK,IASD,OARAhM,EAAAgH,QAAA,MACIpK,OACAA,EACA,QACA,OACA,SACA,SACHoP,EAAA,GACM,YAEX,IAAK,IACL,IAAK,IACL,IAAK,IAED,OADAhM,EAAAjB,QAAA,EACO,SAEX,IAAK,IAOL,IAAK,IAGD,OAFAiB,EAAAsD,KAAA,CAAe,UAAW,WAAU0I,EAAA,GACpChM,EAAAjB,QAAA,EACO,SANX,IAAK,IAOL,IAAK,IAED,OADAiB,EAAAsD,KAAA,CAAe,UAAW,WAAU0I,EAAA,GAC7B,SACX,IAAK,IACL,IAAK,IACL,IAAK,IACD,MAAM,IAAN7F,WAAA,oEAEJ,IAAK,IAED,OADAnG,EAAAoH,OAAA,CAAiB,UAAW,WAAU4E,EAAA,GAC/B,WAEX,IAAK,IAED,OADAhM,EAAAqH,OAAA,CAAiB,UAAW,WAAU2E,EAAA,GAC/B,WACX,IAAK,IACL,IAAK,IAED,OADAhM,EAAAqH,OAAA,UACO,WAEX,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IAED,OADArH,EAAA4C,aAAAoJ,EAAA,iBACO,iBAEf,MAAO,EACX,CACA,SAAAV,EAAAW,GACI,OAAAA,GAEI,IAAK,IACD,MAAO,MAEX,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,MAAO,OAEX,IAAK,IACL,IAAK,IACD,MAAO,QAEX,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,MAAO,MAEX,IAAK,IACL,IAAK,IACL,IAAK,IACD,MAAO,OAEX,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,MAAO,OAEX,IAAK,IACD,MAAO,SAEX,IAAK,IACL,IAAK,IACL,IAAK,IACD,MAAO,SACX,QACI,MAAM,IAAN9F,WAAA,+BAEZ,CACA,SAAA/H,EAAAK,EAAAuB,GACI,IAAAkM,EAAA,GAEAxN,EAAAD,EAEKe,QAAA,wBAEAA,QAAA,qBAAA2M,EAAAC,GAED,OADAF,EAAAlK,KAAAoK,GACO,KAAPtI,OAAAoI,EAAAhQ,OAAA,OACJ,IAAAsD,QAAAmM,GAAA,SAAAC,GAC6C,OAAAC,EAAAD,EAAA5L,GAAA,GAA8C,IAU3F,OARAkM,EAAAhQ,SACIwC,EAAAA,EAAAc,QAAA,2BAAA2M,EAAA/B,GAEI,OAAA8B,GAAA9B,EACJ,IAAA5K,QAAA,wBAIG,CACHd,EAAAc,QAAA,iDAAAA,QAAA,aAAAA,QAAAsM,EAAA,IAIApN,EAER,CA6CA,SAAAgN,EAAAjN,GAEI,OADAA,EAAA6F,MAAA,gBAAA+H,OAAAC,SACAC,KAAA,SAAA9N,GACI,OAAAA,GACI,IAAK,MACD,MAAO,CACHuG,OAAAvK,EAAAwO,iBAAAS,WACAjL,QAAAA,GAER,IAAK,MACD,MAAO,CACHuG,OAAAvK,EAAAwO,iBAAAuD,SACA/N,QAAAA,GAER,QACI,MAAO,CACHuG,OAAAvK,EAAAwO,iBAAAC,OACAzK,QAAAA,GAGhB,GACJ,CACA,SAAAgN,EAAAhN,GAMI,IALA,IAGAsN,EAHAU,EAAA,aAEA5M,EAAA,GAEA6M,EAAA,EACAX,EAAAU,EAAAE,KAAAlO,IAAA,CACI,GAAAsN,EAAA,KAAAlM,EAEA,CAEI6M,EAAAX,EAAAa,MACA,KACJ,CALI/M,EAAAkM,EAAA,IAAAA,EAAAa,KAMR,CACA,OAAAF,EAQO,CACH,CACI1H,OAAAvK,EAAAwO,iBAAAS,WACAjL,QAAAA,EAAA2E,MAAA,EAAAsJ,IAEJ,CACI1H,OAAAvK,EAAAwO,iBAAAuD,SACA/N,QAAAA,EAAA2E,MAAAsJ,KAdG,CACH,CACI1H,OAAAvK,EAAAwO,iBAAAS,WACAjL,QAAAA,GAchB,sBC1SAtE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQ0C,cAAR1C,EAAQ,iBAARA,EAAQ,iBAARA,EAAQ,gBAARA,EAAQ,gBAARA,EAAQ,4BAARA,EAAQ,gBAARA,EAAQ,eAARA,EAAQ,qBAAR,EACAA,EAAQmC,gBAAR,CACI,UACA,MACA,OACA,QACA,MACA,YACA,OACA,SACA,SACA,yBACA,gBAEJnC,EAAQyC,eAAR,IACAzC,EAAQwC,gBAAR,GACAxC,EAAQ2E,4BAAR,GACA3E,EAAQ4C,gBAAR,EACA5C,EAAQqD,gBAAR,EACArD,EAAQsD,iBAAR,EACAtD,EAAQ2C,iBAAR,EACA3C,EAAQ0C,cAAR,uBCtBA5C,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQQ,oBAAR,EACA,IAAA+C,EAAArD,EAAA,MACAE,EAAAF,EAAA,MACA2H,EAAAtE,EAAA+F,gBAAApJ,EAAA,OACAsS,EAAAtS,EAAA,MACAuS,EAAAvS,EAAA,MACAwS,EAAAxS,EAAA,MACAyS,EAAAzS,EAAA,MACA0S,EAAA1S,EAAA,KACA4D,EAAA5D,EAAA,MACAgC,EAAAhC,EAAA,MACA2S,EAAAtP,EAAA+F,gBAAApJ,EAAA,OACA4S,EAAAvP,EAAA+F,gBAAApJ,EAAA,OACA6S,EAAA7S,EAAA,MACA8S,EAAAlT,OAAA0M,KAAAqG,EAAA/K,SAAAmL,QAAA,SAAAC,EAAAC,GAEI,OADAD,EAAAC,EAAAC,eAAAP,EAAA/K,QAAAqL,GACAD,CACJ,GAAG,CAAC,GACJG,EAAA,CACI,SACA,WACA,kBACA,YACA,YACA,WACA,YACA,UACA,MACA,OACA,QACA,MACA,OACA,SACA,SACA,gBAEJC,EAAA,CACIC,YAAA,EACAC,cAAA,EACAC,IAAA,WACI,GAAoB,iBAATC,QAAX,EAAAtT,EAAAuT,qBAAA3T,EAAAA,eAAA,MAEI,MAAAwN,UAAA,gFAEJ,IAAApH,GAAA,EAAA0M,EAAAhL,SAAA,MAEAzC,EAAA,KACAuO,EAAAxN,EAAAwN,YACA,QAAArR,IAAAqR,EAAA,CAEIA,EAAA,SAAAC,GACI,IAAAvO,EAOA,OALIA,OADJ/C,IAAAsR,EACI,IAAAhM,EAAAC,QAAArH,KAAAqT,QAGA,EAAA1T,EAAA2T,UAAAF,IAEG,EAAPrB,EAAApN,gBAAAC,EAAAC,EAAA,CACIS,iBAAA+M,EAAAhL,QACA9B,WAAAhG,EAAAA,eAAAgG,WACAE,OAAAlG,EAAAA,eAAAkG,OACAD,mBAAAjG,EAAAA,eAAAiG,oBAER,EACA,IAEInG,OAAAC,eAAA6T,EAAA,QACIJ,cAAA,EACAD,YAAA,EACAS,UAAA,EACA/T,MAAA,IAER,OAAAgU,GAGI,CAEJ7N,EAAAwN,YAAAA,CACJ,CACA,OAAAA,CACJ,GAEJ,IAEI9T,OAAAC,eAAAuT,EAAAG,IAAA,QACID,cAAA,EACAD,YAAA,EACAS,UAAA,EACA/T,MAAA,cAER,OAAAgU,GAGI,CAEJjU,EAAQQ,eAAR,SAAAG,EAAAC,GAEI,IAAK8S,QAAS,EAAdtT,EAAAuT,qBAAA3T,EAAAA,eAAA,MACI,OAAO,IAAPA,EAAAA,eAAAW,EAAAC,IAEH,EAAAgS,EAAA9H,0BAAA,KAAAnK,EAAAC,EAAA,CACGsF,OAAAlG,EAAAA,eAAAkG,OACAiF,eAAA6H,EACAhI,iBAAAhL,EAAAA,eAAAgL,iBACAE,sBAAAlL,EAAAA,eAAAkL,sBACAD,iBAAAjL,EAAAA,eAAAiL,iBACAhF,mBAAAjG,EAAAA,eAAAiG,mBACAF,iBAAA+M,EAAAhL,QACA9B,WAAAhG,EAAAA,eAAAgG,aAEJ,IAEAK,GAFA,EAAAyM,EAAAhL,SAAA,MAEAzB,WACAxB,EAAA7E,EAAAA,eAAAgG,WAAAK,IACC,EAAAjG,EAAAoB,gBAAAe,IAAAsC,EAAA,yCAAA4E,OAAApD,EAAA,KACD,GAGH,EAAAjG,EAAAL,gBAAAC,EAAAA,eAAA,sBACGC,MAAA,SAAAU,EAAAC,GACI,OAAO,EAAPR,EAAA8T,kBAAAlU,EAAAA,eAAAgL,kBAAA,EAAA5K,EAAAiL,wBAAA1K,GAAAC,EACJ,KAEH,EAAAR,EAAAL,gBAAAC,EAAAA,eAAAU,UAAA,mBACGT,MAAA,WACI,GAAoB,iBAATyT,QAAX,EAAAtT,EAAAuT,qBAAA3T,EAAAA,eAAA,MAEI,MAAAwN,UAAA,wFAIJ,IAFA,IAAApH,GAAA,EAAA0M,EAAAhL,SAAA,MACAqM,EAAA,GACAxS,EAAA,EAAAyS,EAAAf,EAAA1R,EAAAyS,EAAAvS,OAAAF,IAAA,CACI,IAAAqP,EAAAoD,EAAAzS,GACA1B,EAAAmG,EAAA4K,GACA,iBAAAA,EAAA,CACI,IAAAtM,EAAA,QAAAzE,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,QAAAsC,OAKAA,IAAAmC,IACIyP,EAAAzP,OAAAA,EAER,CACAxC,EAAAC,gBAAAY,QAAAiO,IAAA,SACIzO,IAAA6D,EAAAvF,gBAAA0B,IAAA6D,EAAAtF,YAEIb,OAAAsC,SAGRA,IAAAtC,IACIkU,EAAAnD,GAAA/Q,EAER,CACA,OAAAkU,CACJ,KAEH,EAAA/T,EAAAL,gBAAAC,EAAAA,eAAAU,UAAA,iBACGT,MAAA,SAAA4T,GACI,IAAAvO,EAOA,OALIA,OADJ/C,IAAAsR,EACI,IAAAhM,EAAAC,QAAArH,KAAAqT,QAGA,EAAA1T,EAAA2T,UAAAF,IAEG,EAAPlB,EAAA/H,uBAAA,KAAAtF,EAAA,CACIS,iBAAA+M,EAAAhL,QACA9B,WAAAhG,EAAAA,eAAAgG,WACAE,OAAAlG,EAAAA,eAAAkG,OACAD,mBAAAjG,EAAAA,eAAAiG,oBAER,KAEH,EAAA7F,EAAAL,gBAAAC,EAAAA,eAAAU,UAAA,sBACGT,MAAA,SAAAoU,EAAAC,GAII,OAFC,EAAAlU,EAAAoB,WAAA,iBADD,KACC,4BAAAgM,YACA,EAAApN,EAAAoB,gBAAAe,IAAA8R,QAAA9R,IAAA+R,EAAA,wCAAA9G,YACM,EAAPkF,EAAAjI,4BAHA,MAGA,EAAArK,EAAA2T,UAAAM,IAAA,EAAAjU,EAAA2T,UAAAO,GAAA,CACIvO,iBAAA+M,EAAAhL,QACA9B,WAAAhG,EAAAA,eAAAgG,WACAE,OAAAlG,EAAAA,eAAAkG,OACAD,mBAAAjG,EAAAA,eAAAiG,oBAER,KAEH,EAAA7F,EAAAL,gBAAAC,EAAAA,eAAAU,UAAA,eACGT,MAAA,SAAAoU,EAAAC,GAII,OAFC,EAAAlU,EAAAoB,WAAA,iBADD,KACC,4BAAAgM,YACA,EAAApN,EAAAoB,gBAAAe,IAAA8R,QAAA9R,IAAA+R,EAAA,wCAAA9G,YACM,EAAPiF,EAAApI,qBAHA,MAGA,EAAAjK,EAAA2T,UAAAM,IAAA,EAAAjU,EAAA2T,UAAAO,GAAA,CACIvO,iBAAA+M,EAAAhL,QACA9B,WAAAhG,EAAAA,eAAAgG,WACAE,OAAAlG,EAAAA,eAAAkG,OACAD,mBAAAjG,EAAAA,eAAAiG,oBAER,IAGJjG,EAAQQ,eAAR+T,qBAAA,SAAAjN,GACI,QAAA/E,IAAA+E,EAAA,CAEI,GADAA,EAAAoC,OAAApC,KACK,EAALlH,EAAAkM,qBAAAhF,EAAA,CACIiF,kBAAAzM,OAAA0M,KAAAxM,EAAAA,eAAAkG,QACAiF,eAAA6H,IAEA,MAAM,IAANlH,WAAA,wBAEJxE,GAAA,EAAAlH,EAAAqM,0BAAAnF,EAAA,CACIoF,UAAA5M,OAAA0M,KAAAxM,EAAAA,eAAAkG,QACAiF,eAAA6H,GAER,MAEI1L,EAhBR,MAkBItH,EAAQQ,eAARgU,kBAAAlN,CACJ,EACAtH,EAAQQ,eAAR0K,sBAAA,CAAgD,KAAM,KAAM,MAC5DlL,EAAQQ,eAARgU,kBArBA,MAsBAxU,EAAQQ,eAARyF,mBAAA,WAA0D,OAAAjG,EAAAA,eAAAwU,iBAAiD,EAC3GxU,EAAQQ,eAARiU,gBAAA,WAEI,IADA,IAAAC,EAAA,GACA/S,EAAA,EAAAA,EAAAgT,UAAA9S,OAAAF,IACI+S,EAAA/S,GAAAgT,UAAAhT,GAsCJ,IApCA,IAAAiT,EAAA,SAAAC,EAAAvO,GACI,IAAAxB,EAAA+P,EAAA/P,WAAAC,EAAA8P,EAAA9P,WAAAG,EAAA2P,EAAA3P,eAAA9D,EAAAyT,EAAAzT,QAAA0T,EAAAD,EAAAC,gBAAAC,EAAAxR,EAAAyR,OAAAH,EAAA,CAAoL,aAAc,aAAc,iBAAkB,UAAW,oBAC7OI,EAAA1R,EAAAC,SAAAD,EAAAC,SAAA,GAAAuR,GAAA,CAAsEjQ,WAAA,CAC9DoQ,MAAA,EAAApR,EAAA+M,uBAAA/L,EAAAoQ,MACAC,MAAA,EAAArR,EAAA+M,uBAAA/L,EAAAqQ,MACAC,QAAA,EAAAtR,EAAA+M,uBAAA/L,EAAAsQ,QACAC,OAAA,EAAAvR,EAAA+M,uBAAA/L,EAAAuQ,QACDtQ,WAAA,CACCmQ,MAAA,EAAApR,EAAA+M,uBAAA9L,EAAAmQ,MACAC,MAAA,EAAArR,EAAA+M,uBAAA9L,EAAAoQ,MACAC,QAAA,EAAAtR,EAAA+M,uBAAA9L,EAAAqQ,QACAC,OAAA,EAAAvR,EAAA+M,uBAAA9L,EAAAsQ,QACDnQ,eAAA,CACCgQ,MAAA,EAAApR,EAAA+M,uBAAA3L,EAAAgQ,MAAA9Q,QACA+Q,MAAA,EAAArR,EAAA+M,uBAAA3L,EAAAiQ,MAAA/Q,QACAgR,QAAA,EAAAtR,EAAA+M,uBAAA3L,EAAAkQ,QAAAhR,QACAiR,OAAA,EAAAvR,EAAA+M,uBAAA3L,EAAAmQ,OAAAjR,SACDhD,QAAA,KACPkU,EAAA,SAAAjO,GACI4N,EAAA7T,QAAAiG,GAAAvH,OAAA0M,KAAApL,EAAAiG,IAAA6K,KAAA,SAAA5N,GACI,OAAO,EAAPR,EAAA+M,uBAAAvM,EAAAlD,EAAAiG,GAAA/C,GAAAwQ,EAAAxQ,GAAAwQ,EAAAhE,uBACJ,GACJ,EACA,IAAK,IAALzJ,KAAAjG,EACIkU,EAAAjO,GAEJ,IAAAkO,EAAA,IAAAhV,KAAAiV,OAAAlP,GAAAmP,WAAAC,WAGA1V,EAAQQ,eAARwF,WAAAM,GAAAtG,EAAQQ,eAARwF,WAAAuP,GAAAN,EACAjV,EAAQQ,eAARwK,iBAAA2K,IAAArP,GACAtG,EAAQQ,eAARwK,iBAAA2K,IAAAJ,GACAvV,EAAAA,eAAA4V,kBACI5V,EAAQQ,eAARoV,gBAAAL,EAER,EACAvT,EAAA,EAAA6T,EAAAnB,EAAA1S,EAAA6T,EAAAhU,OAAAG,IAAA,CACI,IAAA8M,EAAA+G,EAAA7T,GACA4S,EADA9F,EAAA4F,KAAA5F,EAAAxI,OAEJ,CACJ,EACAxG,OAAAC,eAAAC,EAAAA,eAAAU,UAAA,SAAA4S,GACAtT,EAAQQ,eAARoV,gBAAA,GACA5V,EAAQQ,eAARwF,WAAA,GACAhG,EAAQQ,eAARwK,iBAAA,IAAA8K,IACA9V,EAAQQ,eAARyK,iBAAA,WACI,OAAAjL,EAAAA,eAAA4V,eACJ,EACA5V,EAAQQ,eAARuV,YAAA,EACA/V,EAAQQ,eAAR0F,OAAA,GACAlG,EAAQQ,eAARwV,YAAA,SAAAnB,GACI7U,EAAQQ,eAAR0F,QAAA,EAAA6M,EAAAkD,QAAApB,EACJ,EACA,IACI,oBAAAqB,QACIpW,OAAAC,eAAAC,EAAAA,eAAAU,UAAAwV,OAAAC,YAAA,CACIlW,MAAA,sBACA+T,UAAA,EACAT,YAAA,EACAC,cAAA,IAGR1T,OAAAC,eAAAC,EAAAA,eAAAU,UAAA0V,YAAA,UACInW,MAAA,EACA+T,UAAA,EACAT,YAAA,EACAC,cAAA,GAER,OAAAS,GAEI,sBC5SJnU,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAG/CD,EAAAA,QAAA,CACI,eAAgB,iBAChB,qBAAsB,iBACtB,gBAAiB,iBACjB,gBAAiB,iBACjB,gBAAiB,iBACjB,gBAAiB,eACjB,gBAAiB,iBACjB,kBAAmB,gBACnB,qBAAsB,eACtB,mBAAoB,gBACpB,iBAAkB,iBAClB,eAAgB,iBAChB,uBAAwB,iBACxB,kBAAmB,iBACnB,gBAAiB,eACjB,kBAAmB,iBACnB,kBAAmB,gBACnB,gBAAiB,gBACjB,iBAAkB,iBAClB,gBAAiB,gBACjB,kBAAmB,eACnB,oBAAqB,eACrB,cAAe,iBACf,gBAAiB,eACjB,oBAAqB,gBACrB,gBAAiB,gBACjB,gBAAiB,eACjB,gBAAiB,sBACjB,iBAAkB,sBAClB,mBAAoB,iBACpB,gBAAiB,eACjB,oBAAqB,iBACrB,qBAAsB,iBACtB,oBAAqB,eACrB,kBAAmB,iBACnB,mBAAoB,sBACpB,kBAAmB,sBACnB,mCAAoC,8BACpC,gBAAiB,sBACjB,mBAAoB,iBACpB,eAAgB,eAChB,uBAAwB,sBACxB,uBAAwB,iCACxB,oBAAqB,8BACrB,iBAAkB,iBAClB,wBAAyB,iBACzB,kBAAmB,4BACnB,kBAAmB,kBACnB,kBAAmB,sBACnB,mBAAoB,sBACpB,mBAAoB,kBACpB,qBAAsB,+BACtB,kBAAmB,eACnB,kBAAmB,sBACnB,qBAAsB,sBACtB,uBAAwB,+BACxB,gBAAiB,0BACjB,kBAAmB,uBACnB,qBAAsB,sBACtB,qBAAsB,8BACtB,wBAAyB,sBACzB,kBAAmB,sBACnB,kBAAmB,4BACnB,mBAAoB,kBACpB,qBAAsB,sBACtB,iBAAkB,kBAClB,kBAAmB,kBACnB,sBAAuB,kBACvB,wBAAyB,sBACzB,qBAAsB,qBACtB,sBAAuB,mBACvB,kBAAmB,4BACnB,uBAAwB,kBACxB,mBAAoB,iBACpB,wBAAyB,sBACzB,mBAAoB,sBACpB,mBAAoB,sBACpB,oBAAqB,sBACrB,qBAAsB,sBACtB,sBAAuB,kBACvB,kBAAmB,sBACnB,iBAAkB,sBAClB,sBAAuB,mBACvB,4BAA6B,uBAC7B,qBAAsB,mBACtB,wBAAyB,mBACzB,mBAAoB,cACpB,sBAAuB,gBACvB,YAAa,cACb,iBAAkB,gBAClB,eAAgB,aAChB,cAAe,eACf,gBAAiB,eACjB,kBAAmB,mBACnB,iBAAkB,gBAClB,iBAAkB,gBAClB,aAAc,aACd,cAAe,gBACf,gBAAiB,kBACjB,eAAgB,cAChB,gBAAiB,iBACjB,oBAAqB,iBACrB,cAAe,cACf,aAAc,aACd,cAAe,aACf,kBAAmB,eACnB,eAAgB,cAChB,cAAe,mBACf,gBAAiB,iBACjB,cAAe,eACf,qBAAsB,gBACtB,kBAAmB,mBACnB,iBAAkB,eAClB,kBAAmB,iBACnB,qBAAsB,gBACtB,qBAAsB,iBACtB,qBAAsB,iBACtB,gBAAiB,mBACjB,qBAAsB,mBACtB,mBAAoB,mBACpB,gBAAiB,sBACjB,gBAAiB,mBACjB,kBAAmB,mBACnB,uBAAwB,qBACxB,kBAAmB,qBACnB,qBAAsB,mBACtB,qBAAsB,sBACtB,iBAAkB,kBAClB,uBAAwB,wBACxB,cAAe,qBACf,mBAAoB,kBACpB,cAAe,oBACf,cAAe,iBACf,IAAO,kBACP,QAAW,kBACX,kBAAmB,kBACnB,iBAAkB,mBAClB,iBAAkB,kBAClB,kBAAmB,mBACnB,sBAAuB,mBACvB,iBAAkB,oBAClB,sBAAuB,iBACvB,eAAgB,qBAChB,oBAAqB,mBACrB,qBAAsB,iBACtB,KAAQ,iBACR,IAAO,gBACP,IAAO,iBACP,QAAW,mBACX,MAAS,eACT,KAAQ,gBACR,YAAa,UACb,YAAa,UACb,WAAY,UACZ,gBAAiB,UACjB,UAAW,UACX,gBAAiB,UACjB,WAAY,UACZ,mBAAoB,kBACpB,iBAAkB,gBAClB,oBAAqB,gBACrB,kBAAmB,gBACnB,oBAAqB,gBACrB,kBAAmB,gBACnB,qBAAsB,gBACtB,gBAAiB,gBACjB,cAAe,cACf,mBAAoB,kBACpB,oBAAqB,kBACrB,mBAAoB,kBACpB,gBAAiB,eACjB,iBAAkB,eAClB,cAAe,gBACf,mBAAoB,kBACpB,oBAAqB,cACrB,kBAAmB,kBACnB,gBAAiB,kBACjB,mBAAoB,gBACpB,kBAAmB,kBACnB,kBAAmB,cACnB,eAAgB,gBAChB,iBAAkB,cAClB,gBAAiB,kBACjB,oBAAqB,cACrB,GAAM,gBACN,UAAW,gBACX,QAAS,UACT,QAAS,UACT,KAAQ,UACR,UAAa,UACb,IAAO,mBACP,SAAY,iBACZ,QAAW,iBACX,sBAAuB,iBACvB,mBAAoB,eACpB,eAAgB,cAChB,gBAAiB,iBACjB,mBAAoB,kBACpB,cAAe,aACf,iBAAkB,iBAClB,iBAAkB,aAClB,KAAQ,cACR,OAAU,iBACV,QAAW,kBACX,MAAS,aACT,UAAa,oBACb,MAAS,iBACT,IAAO,kBACP,IAAO,kBACP,QAAW,iBACX,mBAAoB,kBACpB,iBAAkB,mBAClB,iBAAkB,sBAClB,GAAM,mBACN,UAAW,kBACX,OAAU,iBACV,IAAO,gBACP,QAAW,sBACX,gBAAiB,uBACjB,oBAAqB,iBACrB,mBAAoB,iBACpB,mBAAoB,mBACpB,iBAAkB,iBAClB,iBAAkB,oBAClB,kBAAmB,sBACnB,iBAAkB,sBAClB,iBAAkB,eAClB,gBAAiB,oBACjB,eAAgB,uBAChB,eAAgB,iBAChB,iBAAkB,iBAClB,cAAe,uBACf,OAAU,gBACV,SAAY,gBACZ,IAAO,cACP,IAAO,aACP,UAAa,iBACb,OAAU,kBACV,IAAO,UACP,YAAa,oBACb,cAAe,eACf,aAAc,kBACd,aAAc,kBACd,kBAAmB,+BACnB,aAAc,mBACd,YAAa,mBACb,oBAAqB,uBACrB,cAAe,kBACf,cAAe,iBACf,aAAc,sBACd,WAAY,oBACZ,IAAO,UACP,UAAa,UACb,OAAQ,gBACR,IAAO,gBACP,KAAQ,+BCjQZF,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAAA,QAEA,SAAAsF,GACI,IAAAc,EAAAiQ,EAAA5C,IAAAnO,GACAc,IACIA,EAAAtG,OAAA0G,OAAA,MACA6P,EAAAC,IAAAhR,EAAAc,IAEJ,OAAAA,CACJ,EARA,IAAAiQ,EAAA,IAAAE,8BCJAzW,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQwW,KAGR,SAAA9B,GACI,IAAAhI,EAAA5M,OAAA0M,KAAAkI,EAAA+B,OAEA,OADA/J,EAAAgK,OACO,CACHD,MAAA/J,EAAAwF,KAAA,SAAAyE,GACI,OAAApT,EAAAqT,cAAA,CACID,GACHjC,EAAA+B,MAAAE,GAAAzE,KAAA,SAAAlQ,GACG,IAAA6U,EAAA7U,EAAA,GAAA8U,EAAA9U,EAAA+G,MAAA,GACA,OAAAxF,EAAAqT,cAAA,CAA8B,KAAAC,EAAA,GAAAA,EAAAnB,SAAA,KAAiCoB,GAAE,GAAF5J,KAAA,IACnE,KAAI,GAAJA,KAAA,IACJ,IACA6J,OAAArC,EAAAqC,OAAA7J,KAAA,KACA8J,QAAAtC,EAAAsC,QAAA9E,KAAA,SAAA+E,GAAyC,OAAAA,EAAAvB,SAAA,GAAuB,IAAAxI,KAAA,KAExE,EAjBAlN,EAAQiW,OAkBR,SAAAvB,GAKI,IAJA,IAAAqC,EAAArC,EAAAqC,OAAA9M,MAAA,KACA+M,EAAAtC,EAAAsC,QAAA/M,MAAA,KAAAiI,KAAA,SAAA1I,GAAyD,OAAA0N,SAAA1N,EAAA,GAAwB,IACjF2N,EAAAzC,EAAA+B,MACAA,EAAA,GACA9U,EAAA,EAAAyV,EAAAD,EAAAxV,EAAAyV,EAAAvV,OAAAF,IAAA,CACI,IACAK,EADAoV,EAAAzV,GACAsI,MAAA,KAAA0M,EAAA3U,EAAA,GAAA8N,EAAA9N,EAAA+G,MAAA,GACA0N,EAAAE,GAAA7G,EAAAoC,KAAA,SAAA9C,GACwB,OAAAA,EAAAnF,MAAA,IAAqB,IAAAiI,KAAA,SAAAlQ,GAEzC,IAAA6U,EAAA7U,EAAA,GAAAqV,EAAArV,EAAA,GAAAsV,EAAAtV,EAAA,GAAAiO,EAAAjO,EAAA,GACA,MAAO,CACH,KAAA6U,GAAAvV,IAAA4V,SAAAL,EAAA,IACAE,GAAAM,GACAL,GAAAM,GACA,MAAArH,EAER,GACJ,CACA,OAAAwG,CACJ,EAtCA,IAAAlT,EAAArD,EAAA,4BCHAJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAA,IAC/CD,EAAQe,eASP,SAAAuE,EAAA3E,EAAAC,GAGG,OADA,IAAA2W,EAAA/W,eAAAG,EAAAC,GACAkB,OAAAwD,EACJ,EAZAtF,EAAQiB,mBAaR,SAAAqE,EAAA3E,EAAAC,GAEI,OADA,IAAA2W,EAAA/W,eAAAG,GAAA,EAAA2K,EAAAC,mBAAA3K,EAAA,gBACAkB,OAAAwD,EACJ,EAfAtF,EAAQkB,mBAgBR,SAAAoE,EAAA3E,EAAAC,GAEI,OADA,IAAA2W,EAAA/W,eAAAG,GAAA,EAAA2K,EAAAC,mBAAA3K,EAAA,gBACAkB,OAAAwD,EACJ,EAjBA,IAAAiS,EAAArX,EAAA,KACAoL,EAAApL,EAAA,yBCPE,SAAAsX,GAkBA,IAkFEC,EAAAC,EAAAC,EAAAC,EAlFFC,EAAA,KAIEC,EAAA,IAGAC,EAAA,mBAGAC,EAAA,qgCAGAC,EAAA,qgCAIAC,EAAA,CAOEC,UAAA,GAiBAC,SAAA,EAeAC,OAAA,EAIAC,UAAA,EAIAC,SAAA,GAIAC,MAAAX,EAIAY,KAAAZ,EAGAa,QAAA,GAOFC,GAAA,EAAAC,EAAA,kBAAAC,EAAAD,EAAA,qBAAAE,EAAAF,EAAA,2BAAAG,EAAAH,EAAA,qBAAAI,EAAA,mBAAAC,EAAA/V,KAAAgF,MAAAgR,EAAAhW,KAAA+E,IAAAkR,EAAA,6CAAAC,EAAA,yDAAAC,EAAA,gDAAAC,EAAA,qCAAAC,EAAA,IAAAC,EAAAxB,EAAAnW,OAAA,EAAA4X,EAAAxB,EAAApW,OAAA,EAyBA6X,EAAA,CAAMvD,YAAA6C,GAs1EP,SAAAW,EAAA9E,GAIC,IAAA9E,EAAAgB,EAAA6I,EAAAC,EAAAhF,EAAAhT,OAAA,EAAAiY,EAAA,GAAAC,EAAAlF,EAAA,GAKA,GAAAgF,EAAA,GAEE,IADAC,GAAAC,EACAhK,EAAA,EAAAA,EAAA8J,EAAA9J,KAEEgB,EA53EJ,GA23EI6I,EAAA/E,EAAA9E,GAAA,IACAlO,UACAiY,GAAAE,EAAAjJ,IACA+I,GAAAF,GAKF7I,EAn4EF,GAk4EE6I,GADAG,EAAAlF,EAAA9E,IACA,IACAlO,UACAiY,GAAAE,EAAAjJ,GACF,MAAO,GAAP,IAAAgJ,EACE,MAAO,IAIT,KAAAA,EAAA,OAAAA,GAAA,GAEA,OAAAD,EAAAC,CACF,CAGA,SAAAE,EAAAlK,EAAA3M,EAAAD,GACE,GAAA4M,MAAAA,GAAAA,EAAA3M,GAAA2M,EAAA5M,EACE,MAAA+W,MAAArB,EAAA9I,EAEJ,CAOC,SAAAoK,EAAAtF,EAAA9E,EAAAqK,EAAAC,GAEC,IAAAC,EAAAvJ,EAAA5E,EAAAoO,EAGA,IAAAxJ,EAAA8D,EAAA,GAAA9D,GAAA,GAAAA,GAAA,KAAAhB,EAwCA,QArCAA,EAAA,GACEA,GAp6EF,EAq6EEuK,EAAA,IAEAA,EAAApX,KAAAsX,MAAAzK,EAAA,GAv6EF,GAw6EEA,GAx6EF,GA86EAgB,EAAAmI,EAAA,GA96EA,EA86EAnJ,GACAwK,EAAA1F,EAAAyF,GAAAvJ,EAAA,EAEA,MAAAsJ,EACEtK,EAAA,GACE,GAAAA,EAAAwK,EAAAA,EAAA,MACK,GAAAxK,IAAAwK,EAAAA,EAAA,MACLpO,EAAAiO,EAAA,UAAAG,GAAAH,EAAA,UAAAG,GAAA,KAAAA,GAAA,GAAAA,GAEApO,GAAAiO,EAAA,GAAAG,EAAA,GAAAxJ,GAAAqJ,EAAA,GAAAG,EAAA,GAAAxJ,EAAA,KAAA8D,EAAAyF,EAAA,GAAAvJ,EAAA,QAAAmI,EAAA,GAAAnJ,EAAA,OAAAwK,GAAAxJ,EAAA,MAAAwJ,MAAA1F,EAAAyF,EAAA,GAAAvJ,EAAA,OAKFhB,EAAA,GACE,GAAAA,EAAAwK,EAAAA,EAAA,MACK,GAAAxK,EAAAwK,EAAAA,EAAA,MACA,GAAAxK,IAAAwK,EAAAA,EAAA,MACLpO,GAAAkO,GAAAD,EAAA,UAAAG,IAAAF,GAAAD,EAAA,SAAAG,GAEApO,IAAAkO,GAAAD,EAAA,IAAAG,EAAA,GAAAxJ,IAAAsJ,GAAAD,EAAA,GAAAG,EAAA,GAAAxJ,EAAA,KAAA8D,EAAAyF,EAAA,GAAAvJ,EAAA,QAAAmI,EAAA,GAAAnJ,EAAA,KAMJ5D,CACF,CAMA,SAAAsO,EAAAX,EAAAY,EAAAC,GAOE,IANA,IAAAC,EACWC,EADXC,EAAA,CACS,GAAE/K,EAAA,EAAAgL,EAAAjB,EAAAjY,OAKXkO,EAAAgL,GAAA,CACE,IAAAF,EAAAC,EAAAjZ,OAAAgZ,KAAAC,EAAAD,IAAAH,EAEA,IADAI,EAAA,IAAA/C,EAAAhV,QAAA+W,EAAAkB,OAAAjL,MACA6K,EAAA,EAAAA,EAAAE,EAAAjZ,OAAA+Y,IACEE,EAAAF,GAAAD,EAAA,SACE,IAAAG,EAAAF,EAAA,KAAAE,EAAAF,EAAA,MACAE,EAAAF,EAAA,IAAAE,EAAAF,GAAAD,EAAA,EACAG,EAAAF,IAAAD,EAGN,CAEA,OAAAG,EAAAG,SACF,CAj4ECvB,EAAAwB,cAAAxB,EAAA3P,IAAA,WAEC,IAAAzE,EAAA,SAAA8Q,YAAA,MAEA,OADA9Q,EAAA6V,EAAA,IAAA7V,EAAA6V,EAAA,GACAC,EAAA9V,EACF,EAOCoU,EAAAc,KAAA,WAEC,OAAAY,EAAA,SAAAhF,YAAA,WAAAnC,EAAA,IACF,EAUCyF,EAAA2B,UAAA3B,EAAA4B,MAAA,SAAAlY,EAAAD,GAEC,IAAAmC,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAKA,GAFAhT,EAAA,IAAAmY,EAAAnY,GACAD,EAAA,IAAAoY,EAAApY,IACAC,EAAA+X,IAAAhY,EAAAgY,EAAA,WAAAI,EAAAC,KACA,GAAApY,EAAAqY,GAAAtY,GAAA,MAAA+W,MAAArB,EAAA1V,GAEA,OADAmC,EAAAoW,IAAAtY,GACA,EAAAA,EAAAkC,EAAAoW,IAAAvY,GAAA,EAAAA,EAAA,IAAAoY,EAAAjW,EACF,EAUCoU,EAAAiC,WAAAjC,EAAAgC,IAAA,SAAApR,GAEC,IAAAyF,EAAA6K,EAAAgB,EAAAC,EAAAvW,EAAA,KAAAwW,EAAAxW,EAAAuP,EAAAkH,GAAAzR,EAAA,IAAAhF,EAAA8Q,YAAA9L,IAAAuK,EAAAmH,EAAA1W,EAAA6V,EAAAc,EAAA3R,EAAA6Q,EAQA,IAAAW,IAAAC,EACE,OAAAC,GAAAC,EAAAD,IAAAC,EAAAD,EAAAF,IAAAC,EAAA,GAAAD,EAAAE,EAAA,OAAAR,IAIF,IAAAM,EAAA,KAAAC,EAAA,UAAAD,EAAA,GAAAE,EAAAD,EAAA,IAAAE,EAAA,EAGA,GAAAD,IAAAC,EAAA,OAAAD,EAGA,GAAA1W,EAAA2O,IAAA3J,EAAA2J,EAAA,OAAA3O,EAAA2O,EAAA3J,EAAA2J,EAAA+H,EAAA,OAMA,IAAAjM,EAAA,EAAA6K,GAJAgB,EAAAE,EAAAja,SACAga,EAAAE,EAAAla,QAGA+Z,EAAAC,EAAA9L,EAAA6K,IAAA7K,EACE,GAAA+L,EAAA/L,KAAAgM,EAAAhM,GAAA,OAAA+L,EAAA/L,GAAAgM,EAAAhM,GAAAiM,EAAA,OAIF,OAAAJ,IAAAC,EAAA,EAAAD,EAAAC,EAAAG,EAAA,MACF,EAeCtC,EAAAwC,OAAAxC,EAAAyC,IAAA,WAEC,IAAAC,EAAAhC,EAAA9U,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,OAAA9Q,EAAAuP,EAGAvP,EAAAuP,EAAA,IAEAuH,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SACAmD,EAAApD,UAAAiE,EAAAlZ,KAAAC,IAAAmC,EAAA2O,EAAA3O,EAAA+W,MA7MA,EA8MAd,EAAAnD,SAAA,EAEA9S,EA0xED,SAAAiW,EAAAjW,GAEC,IAAAyL,EAAAY,EAAArH,EAEA,GAAAhF,EAAAgX,SAAA,OAAAhX,EAMAqM,EAAArM,EAAAuP,EAAAhT,OACA8P,EAAA,GAEErH,GAAA,EAAAiS,EAAA,EADAxL,EAAA7N,KAAAsX,KAAA7I,EAAA,KACA+D,YAEA3E,EAAA,GACAzG,EAAA,gCAGFiR,EAAApD,WAAApH,EAEAzL,EAAAkX,EAAAjB,EAAA,EAAAjW,EAAA0C,MAAAsC,GAAA,IAAAiR,EAAA,IAGA,IAAK,IAALxL,EAAAgB,EAAAhB,KAAA,CACE,IAAA0M,EAAAnX,EAAA0C,MAAA1C,GACAA,EAAAmX,EAAAzU,MAAAyU,GAAAC,MAAAD,GAAAzU,MAAA,GAAAoI,KAAA,EACF,CAIA,OAFAmL,EAAApD,WAAApH,EAEAzL,CACF,CA1zEE4W,CAAAX,EAAAoB,EAAApB,EAAAjW,IAEAiW,EAAApD,UAAAiE,EACAb,EAAAnD,SAAAgC,EAEAgB,EAAA,GAAAxD,GAAA,GAAAA,EAAAtS,EAAAsX,MAAAtX,EAAA8W,EAAAhC,GAAA,IAZA,IAAAmB,EAAA,GAHA,IAAAA,EAAAC,IAgBF,EAkBC9B,EAAAmD,SAAAnD,EAAAoD,KAAA,WAEC,IAAA7I,EAAA1C,EAAA/H,EAAA2C,EAAA4Q,EAAA5B,EAAAkB,EAAA5X,EAAAuY,EAAAC,EAAA3X,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,IAAA9Q,EAAA4X,YAAA5X,EAAAgX,SAAA,WAAAf,EAAAjW,GAoCA,IAnCAqT,GAAA,GAGAwC,EAAA7V,EAAA6V,EAAAjC,EAAA5T,EAAA6V,EAAA7V,EAAA,OAIApC,KAAA6G,IAAAoR,IAAA,IAqBEhP,EAAA,IAAAoP,EAAAJ,EAAAzF,aApBAlM,EAAAmQ,EAAArU,EAAAuP,IAIAsG,IAHAlH,EAAA3O,EAAA2O,GAGAzK,EAAA3H,OAAA,QAAA2H,GAAA,GAAA2R,IAAA,GAAAA,EAAA,UACAA,EAAAjC,EAAA1P,EAAA,KAGAyK,EAAAgF,GAAAhF,EAAA,OAAAA,EAAA,IAAAA,EAAA,UASA9H,EAAA,IAAAoP,EANE/R,EADF2R,GAAA,IACE,KAAAlH,GAEAzK,EAAA2R,EAAAgC,iBACApU,MAAA,EAAAS,EAAAzG,QAAA,QAAAkR,IAIFkH,EAAA7V,EAAA6V,GAKFkB,GAAApI,EAAAsH,EAAApD,WAAA,IAWE,GAJA8E,GADAD,GADAvY,EAAA0H,GACAnE,MAAAvD,GAAAuD,MAAAvD,IACA2L,KAAA9K,GACA6G,EAAAiR,EAAAH,EAAA7M,KAAA9K,GAAA0C,MAAAvD,GAAAwY,EAAA7M,KAAA4M,GAAAX,EAAA,KAGA1C,EAAAlV,EAAAoQ,GAAA9L,MAAA,EAAAsT,MAAA7S,EAAAmQ,EAAAxN,EAAA0I,IAAA9L,MAAA,EAAAsT,GAAA,CAKE,YAJA7S,EAAAA,EAAAT,MAAAsT,EAAA,EAAAA,EAAA,MAIAU,GAAA,QAAAvT,GAeO,EAILA,KAAAA,EAAAT,MAAA,SAAAS,EAAAwR,OAAA,MAGEI,EAAAjP,EAAA8H,EAAA,KACA1C,GAAApF,EAAAnE,MAAAmE,GAAAnE,MAAAmE,GAAAkR,GAAA/X,IAGF,KACF,CAvBE,IAAAyX,IACE3B,EAAA3W,EAAAwP,EAAA,KAEAxP,EAAAuD,MAAAvD,GAAAuD,MAAAvD,GAAA4Y,GAAA/X,IAAA,CACE6G,EAAA1H,EACA,KACF,CAGF4X,GAAA,EACAU,EAAA,CAcJ,CAKF,OAFApE,GAAA,EAEAyC,EAAAjP,EAAA8H,EAAAsH,EAAAnD,SAAA7G,EACF,EAMCmI,EAAA4D,cAAA5D,EAAA6D,GAAA,WAEC,IAAAxD,EAAAlF,EAAA,KAAAA,EAAArL,EAAAgS,IAIA,GAAA3G,EAAA,CAME,GAJArL,EA9UF,IA6UEuQ,EAAAlF,EAAAhT,OAAA,GACAoX,EAAA,KAAAhF,EA9UF,IAiVE8F,EAAAlF,EAAAkF,GACA,KAAAA,EAAA,MAAAA,GAAA,GAAAvQ,IACAA,EAAA,IAAAA,EAAA,EACF,CAEA,OAAAA,CACF,EAuBCkQ,EAAA8D,UAAA9D,EAAA+D,IAAA,SAAAnT,GAEC,OAAA8S,EAAA,cAAAhH,YAAA9L,GACF,EAOCoP,EAAAgE,mBAAAhE,EAAAiE,SAAA,SAAArT,GAEC,IAAAiR,EAAA,KAAAnF,YAEA,OAAAgF,EAAAgC,EAFA,KAEA,IAAA7B,EAAAjR,GAAA,OAAAiR,EAAApD,UAAAoD,EAAAnD,SACF,EAMCsB,EAAAkE,OAAAlE,EAAA2D,GAAA,SAAA/S,GAEC,WAAOoJ,KAAPgI,IAAApR,EACF,EAOCoP,EAAAxR,MAAA,WAEC,OAAAkT,EAAA,SAAAhF,YAAA,WAAAnC,EAAA,IACF,EAOCyF,EAAAmE,YAAAnE,EAAA+B,GAAA,SAAAnR,GAEC,OAAOoJ,KAAPgI,IAAApR,GAAA,CACF,EAOCoP,EAAAoE,qBAAApE,EAAAqE,IAAA,SAAAzT,GAEC,IAAAyG,EAAA,KAAA2K,IAAApR,GACA,UAAAyG,GAAA,IAAAA,CACF,EA2BC2I,EAAAsE,iBAAAtE,EAAAuE,KAAA,WAEC,IAAAlN,EAAAvH,EAAA4S,EAAAhC,EAAAzI,EAAArM,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAAA8H,EAAA,IAAA3C,EAAA,GAKA,IAAAjW,EAAA4X,WAAA,WAAA3B,EAAAjW,EAAA6V,EAAA,IAAAK,KACA,GAAAlW,EAAAgX,SAAA,OAAA4B,EAEA9B,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SACAmD,EAAApD,UAAAiE,EAAAlZ,KAAAC,IAAAmC,EAAA2O,EAAA3O,EAAA+W,MAAA,EACAd,EAAAnD,SAAA,GACAzG,EAAArM,EAAAuP,EAAAhT,QAOA,GAEE2H,GAAA,EAAA+S,EAAA,EADAxL,EAAA7N,KAAAsX,KAAA7I,EAAA,KACA+D,YAEA3E,EAAA,GACAvH,EAAA,gCAGFlE,EAAAkX,EAAAjB,EAAA,EAAAjW,EAAA0C,MAAAwB,GAAA,IAAA+R,EAAA,OAMA,IAHA,IAAA4C,EAAApO,EAAAgB,EAAAqN,EAAA,IAAA7C,EAAA,GAGAxL,KACEoO,EAAA7Y,EAAA0C,MAAA1C,GACAA,EAAA4Y,EAAAxB,MAAAyB,EAAAnW,MAAAoW,EAAA1B,MAAAyB,EAAAnW,MAAAoW,MAGF,OAAAhD,EAAA9V,EAAAiW,EAAApD,UAAAiE,EAAAb,EAAAnD,SAAAgC,GAAA,EACF,EAgCCV,EAAA2E,eAAA3E,EAAA4E,KAAA,WAEC,IAAAvN,EAAAqL,EAAAhC,EAAAzI,EAAArM,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,IAAA9Q,EAAA4X,YAAA5X,EAAAgX,SAAA,WAAAf,EAAAjW,GAQA,GANA8W,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SACAmD,EAAApD,UAAAiE,EAAAlZ,KAAAC,IAAAmC,EAAA2O,EAAA3O,EAAA+W,MAAA,EACAd,EAAAnD,SAAA,GACAzG,EAAArM,EAAAuP,EAAAhT,QAEA,EACEyD,EAAAkX,EAAAjB,EAAA,EAAAjW,EAAAA,GAAA,OACK,CAYLyL,GADAA,EAAA,IAAA7N,KAAAqb,KAAA5M,IACA,QAAAZ,EAGAzL,EAAAkX,EAAAjB,EAAA,EADAjW,EAAAA,EAAA0C,MAAA,EAAAuU,EAAA,EAAAxL,IACAzL,GAAA,GAOA,IAJA,IAAAkZ,EAAAC,EAAA,IAAAlD,EAAA,GAAAmD,EAAA,IAAAnD,EAAA,IAAAoD,EAAA,IAAApD,EAAA,IAIAxK,KACEyN,EAAAlZ,EAAA0C,MAAA1C,GACAA,EAAAA,EAAA0C,MAAAyW,EAAArO,KAAAoO,EAAAxW,MAAA0W,EAAA1W,MAAAwW,GAAApO,KAAAuO,KAEJ,CAKA,OAHApD,EAAApD,UAAAiE,EACAb,EAAAnD,SAAAgC,EAEAgB,EAAA9V,EAAA8W,EAAAhC,GAAA,EACF,EAkBCV,EAAAkF,kBAAAlF,EAAAmF,KAAA,WAEC,IAAAzC,EAAAhC,EAAA9U,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,OAAA9Q,EAAA4X,WACA5X,EAAAgX,SAAA,IAAAf,EAAAjW,IAEA8W,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SACAmD,EAAApD,UAAAiE,EAAA,EACAb,EAAAnD,SAAA,EAEAgF,EAAA9X,EAAAgZ,OAAAhZ,EAAA2Y,OAAA1C,EAAApD,UAAAiE,EAAAb,EAAAnD,SAAAgC,IARA,IAAAmB,EAAAjW,EAAA6V,EASF,EAqBCzB,EAAAoF,cAAApF,EAAAqF,KAAA,WAEC,IAAAzZ,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAAArF,EAAAzL,EAAAyE,MAAA2R,IAAA,GAAAU,EAAAb,EAAApD,UAAAiC,EAAAmB,EAAAnD,SAMA,WAAArH,EACE,IAAAA,EAAAzL,EAAA0Z,QAAAC,EAAA1D,EAAAa,EAAAhC,GAAA,IAAAmB,EAAA,OAAAA,EAAAC,KAOFlW,EAAAgX,SAAA2C,EAAA1D,EAAAa,EAAA,EAAAhC,GAAApS,MAAA,KAIAuT,EAAApD,UAAAiE,EAAA,EACAb,EAAAnD,SAAA,EAGA9S,EAAA,IAAAiW,EAAA,GAAAmB,MAAApX,GAAAmY,IAAAnY,EAAA8K,KAAA,IAAAmO,OAAAW,OAEA3D,EAAApD,UAAAiE,EACAb,EAAAnD,SAAAgC,EAEA9U,EAAA0C,MAAA,GACF,EAqBC0R,EAAAyF,wBAAAzF,EAAA0F,MAAA,WAEC,IAAAhD,EAAAhC,EAAA9U,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,OAAA9Q,EAAA+Z,IAAA,OAAA9D,EAAAjW,EAAA+X,GAAA,KAAA7B,KACAlW,EAAA4X,YAEAd,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SACAmD,EAAApD,UAAAiE,EAAAlZ,KAAAC,IAAAD,KAAA6G,IAAAzE,EAAA2O,GAAA3O,EAAA+W,MAAA,EACAd,EAAAnD,SAAA,EACAO,GAAA,EAEArT,EAAAA,EAAA0C,MAAA1C,GAAAoX,MAAA,GAAA6B,OAAAnO,KAAA9K,GAEAqT,GAAA,EACA4C,EAAApD,UAAAiE,EACAb,EAAAnD,SAAAgC,EAEA9U,EAAAga,MAdA,IAAA/D,EAAAjW,EAeF,EAkBCoU,EAAA6F,sBAAA7F,EAAA8F,MAAA,WAEC,IAAApD,EAAAhC,EAAA9U,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,OAAA9Q,EAAA4X,YAAA5X,EAAAgX,SAAA,IAAAf,EAAAjW,IAEA8W,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SACAmD,EAAApD,UAAAiE,EAAA,EAAAlZ,KAAAC,IAAAD,KAAA6G,IAAAzE,EAAA2O,GAAA3O,EAAA+W,MAAA,EACAd,EAAAnD,SAAA,EACAO,GAAA,EAEArT,EAAAA,EAAA0C,MAAA1C,GAAA8K,KAAA,GAAAmO,OAAAnO,KAAA9K,GAEAqT,GAAA,EACA4C,EAAApD,UAAAiE,EACAb,EAAAnD,SAAAgC,EAEA9U,EAAAga,KACF,EAqBC5F,EAAA+F,yBAAA/F,EAAAgG,MAAA,WAEC,IAAAtD,EAAAhC,EAAAuF,EAAAC,EAAAta,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,OAAA9Q,EAAA4X,WACA5X,EAAA2O,GAAA,MAAAsH,EAAAjW,EAAAyE,MAAAsT,GAAA,GAAA/X,EAAA6V,EAAA,EAAA7V,EAAAgX,SAAAhX,EAAAkW,MAEAY,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SACAwH,EAAAta,EAAA+W,KAEAnZ,KAAAC,IAAAyc,EAAAxD,GAAA,GAAA9W,EAAA2O,EAAA,EAAAmH,EAAA,IAAAG,EAAAjW,GAAA8W,EAAAhC,GAAA,IAEAmB,EAAApD,UAAAwH,EAAAC,EAAAta,EAAA2O,EAEA3O,EAAA8X,EAAA9X,EAAA8K,KAAA,OAAAmL,EAAA,GAAAmB,MAAApX,GAAAqa,EAAAvD,EAAA,GAEAb,EAAApD,UAAAiE,EAAA,EACAb,EAAAnD,SAAA,EAEA9S,EAAAA,EAAAga,KAEA/D,EAAApD,UAAAiE,EACAb,EAAAnD,SAAAgC,EAEA9U,EAAA0C,MAAA,MArBA,IAAAuT,EAAAC,IAsBF,EAuBC9B,EAAAmG,YAAAnG,EAAAoG,KAAA,WAEC,IAAAC,EAAAhP,EAAAqL,EAAAhC,EAAA9U,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAKA,OAAA9Q,EAAAgX,SAAA,IAAAf,EAAAjW,IAEAyL,EAAAzL,EAAAyE,MAAA2R,IAAA,GACAU,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,UAEA,IAAArH,EAGE,IAAAA,IACEgP,EAAAd,EAAA1D,EAAAa,EAAA,EAAAhC,GAAApS,MAAA,KACAmT,EAAA7V,EAAA6V,EACA4E,GAIK,IAAPxE,EAAAC,MAKFD,EAAApD,UAAAiE,EAAA,EACAb,EAAAnD,SAAA,EAEA9S,EAAAA,EAAAmY,IAAA,IAAAlC,EAAA,GAAAmB,MAAApX,EAAA0C,MAAA1C,IAAAiZ,OAAAnO,KAAA,IAAA8O,OAEA3D,EAAApD,UAAAiE,EACAb,EAAAnD,SAAAgC,EAEA9U,EAAA0C,MAAA,IACF,EAoBC0R,EAAAsG,eAAAtG,EAAAwF,KAAA,WAEC,IAAAnP,EAAA6K,EAAA7J,EAAAvH,EAAAyW,EAAAxb,EAAA0H,EAAAwT,EAAAO,EAAA5a,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAAAgG,EAAAb,EAAApD,UAAAiC,EAAAmB,EAAAnD,SAMA,GAAA9S,EAAA4X,WAOO,IAAP5X,EAAAgX,SACE,OAAO,IAAPf,EAAAjW,GACK,GAAPA,EAAAyE,MAAAsT,GAAA,IAAAjB,EAAA,GAAA3C,EAGE,OAFAtN,EAAA8S,EAAA1D,EAAAa,EAAA,EAAAhC,GAAApS,MAAA,MACAmT,EAAA7V,EAAA6V,EACAhP,CACF,KAbA,CACE,IAAA7G,EAAA6V,EAAA,WAAAI,EAAAC,KACA,GAAAY,EAAA,GAAA3C,EAGE,OAFAtN,EAAA8S,EAAA1D,EAAAa,EAAA,EAAAhC,GAAApS,MAAA,KACAmT,EAAA7V,EAAA6V,EACAhP,CAEJ,CAmBA,IAXAoP,EAAApD,UAAAwH,EAAAvD,EAAA,GACAb,EAAAnD,SAAA,EAUArI,EAFAgB,EAAA7N,KAAAE,IAAA,GAAAuc,EAh4BA,EAg4BA,KAEA5P,IAAAA,EAAAzK,EAAAA,EAAAmY,IAAAnY,EAAA0C,MAAA1C,GAAA8K,KAAA,GAAAmO,OAAAnO,KAAA,IAWA,IATAuI,GAAA,EAEAiC,EAAA1X,KAAAsX,KAAAmF,EAt4BA,GAu4BAnW,EAAA,EACA0W,EAAA5a,EAAA0C,MAAA1C,GACA6G,EAAA,IAAAoP,EAAAjW,GACA2a,EAAA3a,GAGA,IAAAyK,GAOE,GANAkQ,EAAAA,EAAAjY,MAAAkY,GACAzb,EAAA0H,EAAAuQ,MAAAuD,EAAAxC,IAAAjU,GAAA,IAEAyW,EAAAA,EAAAjY,MAAAkY,QAGA,KAFA/T,EAAA1H,EAAA2L,KAAA6P,EAAAxC,IAAAjU,GAAA,KAEAqL,EAAA+F,GAAA,IAAA7K,EAAA6K,EAAAzO,EAAA0I,EAAA9E,KAAAtL,EAAAoQ,EAAA9E,IAAAA,MAOF,OAJAgB,IAAA5E,EAAAA,EAAAnE,MAAA,GAAA+I,EAAA,IAEA4H,GAAA,EAEAyC,EAAAjP,EAAAoP,EAAApD,UAAAiE,EAAAb,EAAAnD,SAAAgC,GAAA,EACF,EAMCV,EAAAwD,SAAA,WAEC,QAASxJ,KAATmB,CACF,EAMC6E,EAAAyG,UAAAzG,EAAA0G,MAAA,WAEC,QAAS1M,KAATmB,GAAAoE,EAAA,KAAAhF,EA76BA,GA66BA,KAAAY,EAAAhT,OAAA,CACF,EAMC6X,EAAA/L,MAAA,WAEC,OAAQ+F,KAARyH,CACF,EAMCzB,EAAA2G,WAAA3G,EAAAsF,MAAA,WAEC,OAAOtL,KAAPyH,EAAA,CACF,EAMCzB,EAAA4G,WAAA5G,EAAA6G,MAAA,WAEC,OAAO7M,KAAPyH,EAAA,CACF,EAMCzB,EAAA4C,OAAA,WAEC,QAAS5I,KAATmB,GAAA,SAAAA,EAAA,EACF,EAMC6E,EAAA8G,SAAA9G,EAAA+G,GAAA,SAAAnW,GAEC,OAAOoJ,KAAPgI,IAAApR,GAAA,CACF,EAMCoP,EAAAgH,kBAAAhH,EAAA2F,IAAA,SAAA/U,GAEC,OAAOoJ,KAAPgI,IAAApR,GAAA,CACF,EAgCCoP,EAAAiH,UAAAjH,EAAAkH,IAAA,SAAAC,GAEC,IAAAC,EAAAjM,EAAAkM,EAAAhQ,EAAAiQ,EAAAC,EAAA5E,EAAAlQ,EAAA+U,EAAA,KAAA3F,EAAA2F,EAAA9K,YAAAgG,EAAAb,EAAApD,UAAAiC,EAAAmB,EAAAnD,SAQA,SAAAyI,EACEA,EAAA,IAAAtF,EAAA,IACAuF,GAAA,MACK,CAKL,GAHAjM,GADAgM,EAAA,IAAAtF,EAAAsF,IACAhM,EAGAgM,EAAA1F,EAAA,IAAAtG,IAAAA,EAAA,IAAAgM,EAAAxD,GAAA,cAAA9B,EAAAC,KAEAsF,EAAAD,EAAAxD,GAAA,GACF,CAKA,GAHAxI,EAAAqM,EAAArM,EAGAqM,EAAA/F,EAAA,IAAAtG,IAAAA,EAAA,IAAAqM,EAAA7D,GAAA,GACE,OAAO,IAAP9B,EAAA1G,IAAAA,EAAA,WAAAqM,EAAA/F,EAAAK,IAAA3G,EAAA,OAKF,GAAAiM,EACE,GAAAjM,EAAAhT,OAAA,EACEmf,GAAA,MACK,CACL,IAAAjQ,EAAA8D,EAAA,GAAA9D,EAAA,OAAAA,GAAA,GACAiQ,EAAA,IAAAjQ,CACF,CAyBF,GAtBA4H,GAAA,EAEAsI,EAAAE,EAAAD,EADA7E,EAAAD,EAxCA,GA0CA2E,EAAAD,EAAAM,EAAA7F,EAAAc,EAAA,IAAA8E,EAAAN,EAAAxE,GAmBAlC,GAhBAhO,EAAAiR,EAAA6D,EAAAF,EAAA1E,EAAA,IAgBAxH,EAAA9D,EAAAqL,EAAAhC,GAEE,GAME,GAJA6G,EAAAE,EAAAD,EADA7E,GAAA,IAEA0E,EAAAD,EAAAM,EAAA7F,EAAAc,EAAA,IAAA8E,EAAAN,EAAAxE,GACAlQ,EAAAiR,EAAA6D,EAAAF,EAAA1E,EAAA,IAEA2E,EAAA,EAGErH,EAAAxN,EAAA0I,GAAA9L,MAAAgI,EAAA,EAAAA,EAAA,cACE5E,EAAAiP,EAAAjP,EAAAiQ,EAAA,MAGF,KACF,QACFjC,EAAAhO,EAAA0I,EAAA9D,GAAA,GAAAqJ,IAKF,OAFAzB,GAAA,EAEAyC,EAAAjP,EAAAiQ,EAAAhC,EACF,EA+CCV,EAAAgD,MAAAhD,EAAA2H,IAAA,SAAA/W,GAEC,IAAAuK,EAAAZ,EAAAlE,EAAA6K,EAAA7J,EAAAY,EAAAyK,EAAAhC,EAAA0B,EAAAwF,EAAAC,EAAAxF,EAAAzW,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAOA,GAHA9L,EAAA,IAAAiR,EAAAjR,IAGAhF,EAAAuP,IAAAvK,EAAAuK,EAaE,OAVAvP,EAAA6V,GAAA7Q,EAAA6Q,EAGK7V,EAAAuP,EAAAvK,EAAA6Q,GAAA7Q,EAAA6Q,EAKA7Q,EAAA,IAAAiR,EAAAjR,EAAAuK,GAAAvP,EAAA6V,IAAA7Q,EAAA6Q,EAAA7V,EAAAkW,KARLlR,EAAA,IAAAiR,EAAAC,KAUAlR,EAIF,GAAAhF,EAAA6V,GAAA7Q,EAAA6Q,EAEE,OADA7Q,EAAA6Q,GAAA7Q,EAAA6Q,EACA7V,EAAA8K,KAAA9F,GASF,GANAwR,EAAAxW,EAAAuP,EACAkH,EAAAzR,EAAAuK,EACAuH,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,UAGA0D,EAAA,KAAAC,EAAA,IAGE,GAAAA,EAAA,GAAAzR,EAAA6Q,GAAA7Q,EAAA6Q,MAGK,KAAAW,EAAA,GAIA,OAAO,IAAPP,EAAA,IAAAnB,GAAA,KAJA9P,EAAA,IAAAiR,EAAAjW,EAIA,CAEL,OAAAqT,EAAAyC,EAAA9Q,EAAA8R,EAAAhC,GAAA9P,CACF,CAYA,GAPA2J,EAAAgF,EAAA3O,EAAA2J,EAhsCA,GAisCAqN,EAAArI,EAAA3T,EAAA2O,EAjsCA,GAmsCA6H,EAAAA,EAAA/S,QACAgI,EAAAuQ,EAAArN,EAGA,CAyBE,KAxBAsN,EAAAxQ,EAAA,IAGE8D,EAAAiH,EACA/K,GAAAA,EACAY,EAAAoK,EAAAla,SAEAgT,EAAAkH,EACA9H,EAAAqN,EACA3P,EAAAmK,EAAAja,QAQFkP,GAFAhB,EAAA7M,KAAAC,IAAAD,KAAAsX,KAAA4B,EAvtCF,GAutCEzK,GAAA,KAGEZ,EAAAhB,EACA8E,EAAAhT,OAAA,GAIFgT,EAAAoG,UACAlL,EAAAgB,EAAAhB,KAAA8E,EAAAlN,KAAA,GACAkN,EAAAoG,SAGF,KAAO,CASL,KAHAsG,GAFAxR,EAAA+L,EAAAja,SACA8P,EAAAoK,EAAAla,WAEA8P,EAAA5B,GAEAA,EAAA,EAAAA,EAAA4B,EAAA5B,IACE,GAAA+L,EAAA/L,IAAAgM,EAAAhM,GAAA,CACEwR,EAAAzF,EAAA/L,GAAAgM,EAAAhM,GACA,KACF,CAGFgB,EAAA,CACF,CAaA,IAXAwQ,IACE1M,EAAAiH,EACAA,EAAAC,EACAA,EAAAlH,EACAvK,EAAA6Q,GAAA7Q,EAAA6Q,GAGFxJ,EAAAmK,EAAAja,OAIAkO,EAAAgM,EAAAla,OAAA8P,EAAA5B,EAAA,IAAAA,EAAA+L,EAAAnK,KAAA,EAGA,IAAA5B,EAAAgM,EAAAla,OAAAkO,EAAAgB,GAAA,CAEE,GAAA+K,IAAA/L,GAAAgM,EAAAhM,GAAA,CACE,IAAA6K,EAAA7K,EAAA6K,GAAA,IAAAkB,IAAAlB,IAAAkB,EAAAlB,GAAArB,EAAA,IACAuC,EAAAlB,GACAkB,EAAA/L,IAAAwJ,CACF,CAEAuC,EAAA/L,IAAAgM,EAAAhM,EACF,CAGA,SAAA+L,IAAAnK,IAAAmK,EAAA0F,MAGA,SAAA1F,EAAA,GAAAA,EAAA2F,UAAAxN,EAGA,OAAA6H,EAAA,IAEAxR,EAAAuK,EAAAiH,EACAxR,EAAA2J,EAAAyN,EAAA5F,EAAA7H,GAEA0E,EAAAyC,EAAA9Q,EAAA8R,EAAAhC,GAAA9P,GALA,IAAAiR,EAAA,IAAAnB,GAAA,IAMF,EA0BCV,EAAArB,OAAAqB,EAAAiI,IAAA,SAAArX,GAEC,IAAAsX,EAAAtc,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAOA,OAHA9L,EAAA,IAAAiR,EAAAjR,IAGAhF,EAAAuP,IAAAvK,EAAA6Q,GAAA7Q,EAAAuK,IAAAvK,EAAAuK,EAAA,OAAA0G,EAAAC,MAGAlR,EAAAuK,GAAAvP,EAAAuP,IAAAvP,EAAAuP,EAAA,GACEuG,EAAA,IAAAG,EAAAjW,GAAAiW,EAAApD,UAAAoD,EAAAnD,WAIFO,GAAA,EAEA,GAAA4C,EAAAlD,QAIEuJ,EAAAxE,EAAA9X,EAAAgF,EAAAP,MAAA,QACAoR,GAAA7Q,EAAA6Q,EAEAyG,EAAAxE,EAAA9X,EAAAgF,EAAA,EAAAiR,EAAAlD,OAAA,GAGFuJ,EAAAA,EAAA5Z,MAAAsC,GAEAqO,GAAA,EAEArT,EAAAoX,MAAAkF,GACF,EAQClI,EAAAmI,mBAAAnI,EAAAoI,IAAA,WAEC,OAAAD,EAAA,KACF,EAOCnI,EAAAyH,iBAAAzH,EAAA4F,GAAA,WAEC,OAAA6B,EAAA,KACF,EAOCzH,EAAAqI,QAAArI,EAAAkD,IAAA,WAEC,IAAAtX,EAAA,SAAA8Q,YAAA,MAEA,OADA9Q,EAAA6V,GAAA7V,EAAA6V,EACAC,EAAA9V,EACF,EAuBCoU,EAAAtJ,KAAAsJ,EAAA/D,IAAA,SAAArL,GAEC,IAAA0X,EAAAnN,EAAAZ,EAAAlE,EAAAgB,EAAAY,EAAAyK,EAAAhC,EAAA0B,EAAAC,EAAAzW,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAOA,GAHA9L,EAAA,IAAAiR,EAAAjR,IAGAhF,EAAAuP,IAAAvK,EAAAuK,EAWE,OARAvP,EAAA6V,GAAA7Q,EAAA6Q,EAMK7V,EAAAuP,IAAAvK,EAAA,IAAAiR,EAAAjR,EAAAuK,GAAAvP,EAAA6V,IAAA7Q,EAAA6Q,EAAA7V,EAAAkW,MANLlR,EAAA,IAAAiR,EAAAC,KAQAlR,EAIF,GAAAhF,EAAA6V,GAAA7Q,EAAA6Q,EAEE,OADA7Q,EAAA6Q,GAAA7Q,EAAA6Q,EACA7V,EAAAoX,MAAApS,GASF,GANAwR,EAAAxW,EAAAuP,EACAkH,EAAAzR,EAAAuK,EACAuH,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,UAGA0D,EAAA,KAAAC,EAAA,GAME,OAFAA,EAAA,KAAAzR,EAAA,IAAAiR,EAAAjW,IAEAqT,EAAAyC,EAAA9Q,EAAA8R,EAAAhC,GAAA9P,EAaF,GAPAyG,EAAAkI,EAAA3T,EAAA2O,EAh8CA,GAi8CAA,EAAAgF,EAAA3O,EAAA2J,EAj8CA,GAm8CA6H,EAAAA,EAAA/S,QACAgH,EAAAgB,EAAAkD,EAGA,CAuBE,IArBAlE,EAAA,GACE8E,EAAAiH,EACA/L,GAAAA,EACA4B,EAAAoK,EAAAla,SAEAgT,EAAAkH,EACA9H,EAAAlD,EACAY,EAAAmK,EAAAja,QAOFkO,GAFA4B,GADAZ,EAAA7N,KAAAsX,KAAA4B,EAp9CF,IAq9CEzK,EAAAZ,EAAA,EAAAY,EAAA,KAGE5B,EAAA4B,EACAkD,EAAAhT,OAAA,GAIFgT,EAAAoG,UACAlL,KAAA8E,EAAAlN,KAAA,GACAkN,EAAAoG,SACF,CAcA,KAZAtJ,EAAAmK,EAAAja,SACAkO,EAAAgM,EAAAla,QAGA,IACEkO,EAAA4B,EACAkD,EAAAkH,EACAA,EAAAD,EACAA,EAAAjH,GAIFmN,EAAA,EAAAjS,GACEiS,GAAAlG,IAAA/L,GAAA+L,EAAA/L,GAAAgM,EAAAhM,GAAAiS,GAAAzI,EAAA,EACAuC,EAAA/L,IAAAwJ,EAUF,IAPAyI,IACElG,EAAAmG,QAAAD,KACA/N,GAKFtC,EAAAmK,EAAAja,OAAA,GAAAia,IAAAnK,IAAAmK,EAAA0F,MAKA,OAHAlX,EAAAuK,EAAAiH,EACAxR,EAAA2J,EAAAyN,EAAA5F,EAAA7H,GAEA0E,EAAAyC,EAAA9Q,EAAA8R,EAAAhC,GAAA9P,CACF,EAQCoP,EAAAvB,UAAAuB,EAAA2C,GAAA,SAAAjN,GAEC,IAAA2B,EAAAzL,EAAA,KAGA,YAAA8J,GAAAA,MAAAA,GAAA,IAAAA,GAAA,IAAAA,EAAA,MAAA8K,MAAArB,EAAAzJ,GASA,OAPA9J,EAAAuP,GACE9D,EAAAmR,EAAA5c,EAAAuP,GACAzF,GAAA9J,EAAA2O,EAAA,EAAAlD,IAAAA,EAAAzL,EAAA2O,EAAA,IAEAlD,EAAAyK,IAGFzK,CACF,EAOC2I,EAAAyI,MAAA,WAEC,IAAA7c,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAGA,OAAAgF,EAAA,IAAAG,EAAAjW,GAAAA,EAAA2O,EAAA,EAAAsH,EAAAnD,SACF,EAiBCsB,EAAA0I,KAAA1I,EAAA2I,IAAA,WAEC,IAAAjG,EAAAhC,EAAA9U,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,OAAA9Q,EAAA4X,WACA5X,EAAAgX,SAAA,IAAAf,EAAAjW,IAEA8W,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SACAmD,EAAApD,UAAAiE,EAAAlZ,KAAAC,IAAAmC,EAAA2O,EAAA3O,EAAA+W,MAhkDA,EAikDAd,EAAAnD,SAAA,EAEA9S,EA67DD,SAAAiW,EAAAjW,GAEC,IAAAyL,EAAAY,EAAArM,EAAAuP,EAAAhT,OAGA,GAAA8P,EAAA,EACE,OAAArM,EAAAgX,SAAAhX,EAAAkX,EAAAjB,EAAA,EAAAjW,EAAAA,GASFyL,GADAA,EAAA,IAAA7N,KAAAqb,KAAA5M,IACA,QAAAZ,EAEAzL,EAAAA,EAAA0C,MAAA,EAAAuU,EAAA,EAAAxL,IACAzL,EAAAkX,EAAAjB,EAAA,EAAAjW,EAAAA,GAOA,IAJA,IAAAgd,EAAA7D,EAAA,IAAAlD,EAAA,GAAAmD,EAAA,IAAAnD,EAAA,IAAAoD,EAAA,IAAApD,EAAA,IAIAxK,KACEuR,EAAAhd,EAAA0C,MAAA1C,GACAA,EAAAA,EAAA0C,MAAAyW,EAAArO,KAAAkS,EAAAta,MAAA0W,EAAA1W,MAAAsa,GAAA5F,MAAAiC,MAGF,OAAArZ,CACF,CA59DE8c,CAAA7G,EAAAoB,EAAApB,EAAAjW,IAEAiW,EAAApD,UAAAiE,EACAb,EAAAnD,SAAAgC,EAEAgB,EAAAxD,EAAA,EAAAtS,EAAAsX,MAAAtX,EAAA8W,EAAAhC,GAAA,IAbA,IAAAmB,EAAAC,IAcF,EAcC9B,EAAA6I,WAAA7I,EAAA6E,KAAA,WAEC,IAAAhN,EAAA/H,EAAA6S,EAAAlQ,EAAA4Q,EAAAtY,EAAAa,EAAA,KAAAuP,EAAAvP,EAAAuP,EAAAZ,EAAA3O,EAAA2O,EAAAkH,EAAA7V,EAAA6V,EAAAI,EAAAjW,EAAA8Q,YAQA,OAAA+E,IAAAtG,IAAAA,EAAA,GACE,OAAO,IAAP0G,GAAAJ,GAAAA,EAAA,KAAAtG,GAAAA,EAAA,IAAA2G,IAAA3G,EAAAvP,EAAA,KAgCF,IA7BAqT,GAAA,EAOA,IAJAwC,EAAAjY,KAAAqb,MAAAjZ,KAIA6V,GAAA,OACE3R,EAAAmQ,EAAA9E,IAEAhT,OAAAoS,GAAA,OAAAzK,GAAA,KACA2R,EAAAjY,KAAAqb,KAAA/U,GACAyK,EAAAgF,GAAAhF,EAAA,OAAAA,EAAA,GAAAA,EAAA,GASA9H,EAAA,IAAAoP,EANE/R,EADF2R,GAAA,IACE,KAAAlH,GAEAzK,EAAA2R,EAAAgC,iBACApU,MAAA,EAAAS,EAAAzG,QAAA,QAAAkR,IAKF9H,EAAA,IAAAoP,EAAAJ,EAAAzF,YAGF2G,GAAApI,EAAAsH,EAAApD,WAAA,IAQE,GAHAhM,GADA1H,EAAA0H,GACAiE,KAAAgN,EAAA9X,EAAAb,EAAA4X,EAAA,MAAArU,MAAA,IAGA2R,EAAAlV,EAAAoQ,GAAA9L,MAAA,EAAAsT,MAAA7S,EAAAmQ,EAAAxN,EAAA0I,IAAA9L,MAAA,EAAAsT,GAAA,CAKE,YAJA7S,EAAAA,EAAAT,MAAAsT,EAAA,EAAAA,EAAA,MAIAU,GAAA,QAAAvT,GAeO,EAILA,KAAAA,EAAAT,MAAA,SAAAS,EAAAwR,OAAA,MAGEI,EAAAjP,EAAA8H,EAAA,KACA1C,GAAApF,EAAAnE,MAAAmE,GAAAkR,GAAA/X,IAGF,KACF,CAvBE,IAAAyX,IACE3B,EAAA3W,EAAAwP,EAAA,KAEAxP,EAAAuD,MAAAvD,GAAA4Y,GAAA/X,IAAA,CACE6G,EAAA1H,EACA,KACF,CAGF4X,GAAA,EACAU,EAAA,CAcJ,CAKF,OAFApE,GAAA,EAEAyC,EAAAjP,EAAA8H,EAAAsH,EAAAnD,SAAA7G,EACF,EAeCmI,EAAA8I,QAAA9I,EAAA+I,IAAA,WAEC,IAAArG,EAAAhC,EAAA9U,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,OAAA9Q,EAAA4X,WACA5X,EAAAgX,SAAA,IAAAf,EAAAjW,IAEA8W,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SACAmD,EAAApD,UAAAiE,EAAA,GACAb,EAAAnD,SAAA,GAEA9S,EAAAA,EAAA+c,OACAlH,EAAA,EACA7V,EAAA8X,EAAA9X,EAAA,IAAAiW,EAAA,GAAAmB,MAAApX,EAAA0C,MAAA1C,IAAAiZ,OAAAnC,EAAA,MAEAb,EAAApD,UAAAiE,EACAb,EAAAnD,SAAAgC,EAEAgB,EAAA,GAAAxD,GAAA,GAAAA,EAAAtS,EAAAsX,MAAAtX,EAAA8W,EAAAhC,GAAA,IAfA,IAAAmB,EAAAC,IAgBF,EAuBC9B,EAAA1R,MAAA0R,EAAAgJ,IAAA,SAAApY,GAEC,IAAA0X,EAAA/N,EAAAlE,EAAAgB,EAAA5E,EAAAwW,EAAAle,EAAAmX,EAAAC,EAAAvW,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAAA0F,EAAAxW,EAAAuP,EAAAkH,GAAAzR,EAAA,IAAAiR,EAAAjR,IAAAuK,EASA,GAHAvK,EAAA6Q,GAAA7V,EAAA6V,IAGAW,GAAAA,EAAA,IAAAC,GAAAA,EAAA,IAEE,OAAO,IAAPR,GAAAjR,EAAA6Q,GAAAW,IAAAA,EAAA,KAAAC,GAAAA,IAAAA,EAAA,KAAAD,EAAAN,IAAAM,GAAAC,EAAA,EAAAzR,EAAA6Q,EAAA7Q,EAAA6Q,EAAA,GA4BF,IAjBAlH,EAAAgF,EAAA3T,EAAA2O,EAlwDA,GAkwDAgF,EAAA3O,EAAA2J,EAlwDA,IAmwDA2H,EAAAE,EAAAja,SACAga,EAAAE,EAAAla,UAIEsK,EAAA2P,EACAA,EAAAC,EACAA,EAAA5P,EACAwW,EAAA/G,EACAA,EAAAC,EACAA,EAAA8G,GAIFxW,EAAA,GAEA4D,EADA4S,EAAA/G,EAAAC,EACA9L,KAAA5D,EAAAxE,KAAA,GAGA,IAAAoI,EAAA8L,IAAA9L,GAAA,IAEE,IADAiS,EAAA,EACAjR,EAAA6K,EAAA7L,EAAAgB,EAAAhB,GACEtL,EAAA0H,EAAA4E,GAAAgL,EAAAhM,GAAA+L,EAAA/K,EAAAhB,EAAA,GAAAiS,EACA7V,EAAA4E,KAAAtM,EAAA8U,EAAA,EACAyI,EAAAvd,EAAA8U,EAAA,EAGFpN,EAAA4E,IAAA5E,EAAA4E,GAAAiR,GAAAzI,EAAA,CACF,CAGA,MAAApN,IAAAwW,IAAAxW,EAAAqV,MAQA,OANAQ,IAAA/N,EACK9H,EAAAsV,QAELnX,EAAAuK,EAAA1I,EACA7B,EAAA2J,EAAAyN,EAAAvV,EAAA8H,GAEA0E,EAAAyC,EAAA9Q,EAAAiR,EAAApD,UAAAoD,EAAAnD,UAAA9N,CACF,EAYCoP,EAAAkJ,SAAA,SAAAvG,EAAAjC,GAEC,OAAAyI,EAAA,OAAAxG,EAAAjC,EACF,EAYCV,EAAAoJ,gBAAApJ,EAAAqJ,KAAA,SAAAxF,EAAAnD,GAEC,IAAA9U,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAIA,OADA9Q,EAAA,IAAAiW,EAAAjW,QACA,IAAAiY,EAAAjY,GAEA2U,EAAAsD,EAAA,EAAAzF,QAEA,IAAAsC,EAAAA,EAAAmB,EAAAnD,SACK6B,EAAAG,EAAA,KAELgB,EAAA9V,EAAAiY,EAAAjY,EAAA2O,EAAA,EAAAmG,GACF,EAUCV,EAAAyD,cAAA,SAAAI,EAAAnD,GAEC,IAAAN,EAAAxU,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAgBA,YAZA,IAAAmH,EACEzD,EAAAkJ,EAAA1d,GAAA,IAEA2U,EAAAsD,EAAA,EAAAzF,QAEA,IAAAsC,EAAAA,EAAAmB,EAAAnD,SACK6B,EAAAG,EAAA,KAGLN,EAAAkJ,EADA1d,EAAA8V,EAAA,IAAAG,EAAAjW,GAAAiY,EAAA,EAAAnD,IACA,EAAAmD,EAAA,IAGFjY,EAAA0Z,UAAA1Z,EAAAgX,SAAA,IAAAxC,EAAAA,CACF,EAkBCJ,EAAAuJ,QAAA,SAAA1F,EAAAnD,GAEC,IAAAN,EAAAxP,EAAAhF,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAkBA,YAdA,IAAAmH,EACEzD,EAAAkJ,EAAA1d,IAEA2U,EAAAsD,EAAA,EAAAzF,QAEA,IAAAsC,EAAAA,EAAAmB,EAAAnD,SACK6B,EAAAG,EAAA,KAGLN,EAAAkJ,EADA1Y,EAAA8Q,EAAA,IAAAG,EAAAjW,GAAAiY,EAAAjY,EAAA2O,EAAA,EAAAmG,IACA,EAAAmD,EAAAjT,EAAA2J,EAAA,IAKF3O,EAAA0Z,UAAA1Z,EAAAgX,SAAA,IAAAxC,EAAAA,CACF,EAaCJ,EAAAwJ,WAAA,SAAAC,GAEC,IAAAtO,EAAAuO,EAAAC,EAAAC,EAAArP,EAAAlD,EAAAvH,EAAA+Z,EAAAC,EAAApH,EAAAwF,EAAAzV,EAAA7G,EAAA,KAAAwW,EAAAxW,EAAAuP,EAAA0G,EAAAjW,EAAA8Q,YAKA,IAAA0F,EAAA,WAAAP,EAAAjW,GAUA,GARAke,EAAAJ,EAAA,IAAA7H,EAAA,GACA8H,EAAAE,EAAA,IAAAhI,EAAA,GAIAxK,GADAkD,GADAY,EAAA,IAAA0G,EAAA8H,IACApP,EAAAiO,EAAApG,GAAAxW,EAAA2O,EAAA,GAl7DA,EAo7DAY,EAAAA,EAAA,GAAAqE,EAAA,GAAAnI,EAAA,EAp7DA,EAo7DAA,EAAAA,GAEA,MAAAoS,EAGEA,EAAAlP,EAAA,EAAAY,EAAA2O,MACK,CAEL,KADAha,EAAA,IAAA+R,EAAA4H,IACA/C,SAAA5W,EAAAiX,GAAA+C,GAAA,MAAAtJ,MAAArB,EAAArP,GACA2Z,EAAA3Z,EAAAiS,GAAA5G,GAAAZ,EAAA,EAAAY,EAAA2O,EAAAha,CACF,CAOA,IALAmP,GAAA,EACAnP,EAAA,IAAA+R,EAAA5B,EAAAmC,IACAM,EAAAb,EAAApD,UACAoD,EAAApD,UAAAlE,EAn8DA,EAm8DA6H,EAAAja,OAAA,EAGE+f,EAAAxE,EAAA5T,EAAAqL,EAAA,OAEA,IADAyO,EAAAF,EAAAhT,KAAAwR,EAAA5Z,MAAAqb,KACA3H,IAAAyH,IACAC,EAAAC,EACAA,EAAAC,EACAA,EAAAE,EACAA,EAAAD,EAAAnT,KAAAwR,EAAA5Z,MAAAsb,IACAC,EAAAD,EACAA,EAAAzO,EACAA,EAAArL,EAAAkT,MAAAkF,EAAA5Z,MAAAsb,IACA9Z,EAAA8Z,EAeF,OAZAA,EAAAlG,EAAA+F,EAAAzG,MAAA0G,GAAAC,EAAA,OACAE,EAAAA,EAAAnT,KAAAkT,EAAAtb,MAAAwb,IACAJ,EAAAA,EAAAhT,KAAAkT,EAAAtb,MAAAqb,IACAE,EAAApI,EAAAqI,EAAArI,EAAA7V,EAAA6V,EAGAhP,EAAAiR,EAAAoG,EAAAH,EAAApP,EAAA,GAAAyI,MAAApX,GAAAyE,MAAA2R,IAAA0B,EAAAmG,EAAAH,EAAAnP,EAAA,GAAAyI,MAAApX,GAAAyE,OAAA,GACOyZ,EAAIH,GAAM,CAACE,EAAIH,GAEtB7H,EAAApD,UAAAiE,EACAzD,GAAA,EAEAxM,CACF,EAYCuN,EAAA+J,cAAA/J,EAAAgK,MAAA,SAAArH,EAAAjC,GAEC,OAAAyI,EAAA,QAAAxG,EAAAjC,EACF,EAkBCV,EAAAiK,UAAA,SAAArZ,EAAA8P,GAEC,IAAA9U,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAKA,GAFA9Q,EAAA,IAAAiW,EAAAjW,GAEA,MAAAgF,EAAA,CAGE,IAAAhF,EAAAuP,EAAA,OAAAvP,EAEAgF,EAAA,IAAAiR,EAAA,GACAnB,EAAAmB,EAAAnD,QACF,KAAO,CASL,GARA9N,EAAA,IAAAiR,EAAAjR,QACA,IAAA8P,EACEA,EAAAmB,EAAAnD,SAEA6B,EAAAG,EAAA,MAIF9U,EAAAuP,EAAA,OAAAvK,EAAA6Q,EAAA7V,EAAAgF,EAGA,IAAAA,EAAAuK,EAEE,OADAvK,EAAA6Q,IAAA7Q,EAAA6Q,EAAA7V,EAAA6V,GACA7Q,CAEJ,CAeA,OAZAA,EAAAuK,EAAA,IACE8D,GAAA,EACArT,EAAA8X,EAAA9X,EAAAgF,EAAA,EAAA8P,EAAA,GAAApS,MAAAsC,GACAqO,GAAA,EACAyC,EAAA9V,KAIAgF,EAAA6Q,EAAA7V,EAAA6V,EACA7V,EAAAgF,GAGFhF,CACF,EAOCoU,EAAAvR,SAAA,WAEC,OAAQuL,IACV,EAYCgG,EAAAkK,QAAA,SAAAvH,EAAAjC,GAEC,OAAAyI,EAAA,OAAAxG,EAAAjC,EACF,EA6CCV,EAAAmK,QAAAnK,EAAAzR,IAAA,SAAAqC,GAEC,IAAA2J,EAAAlD,EAAAqL,EAAAjQ,EAAAiO,EAAAe,EAAA7V,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAAA0N,IAAAxZ,EAAA,IAAAiR,EAAAjR,IAMA,KAAAhF,EAAAuP,GAAAvK,EAAAuK,GAAAvP,EAAAuP,EAAA,IAAAvK,EAAAuK,EAAA,eAAA0G,EAAArC,GAAA5T,EAAAwe,IAIA,IAFAxe,EAAA,IAAAiW,EAAAjW,IAEA+X,GAAA,UAAA/X,EAKA,GAHA8W,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,SAEA9N,EAAA+S,GAAA,UAAAjC,EAAA9V,EAAA8W,EAAAhC,GAMA,IAHAnG,EAAAgF,EAAA3O,EAAA2J,EAzoEA,KA4oEA3J,EAAAuK,EAAAhT,OAAA,IAAAkP,EAAA+S,EAAA,GAAAA,EAAAA,IA5oEA,iBA8oEE,OADA3X,EAAA4X,EAAAxI,EAAAjW,EAAAyL,EAAAqL,GACA9R,EAAA6Q,EAAA,MAAAI,EAAA,GAAAkC,IAAAtR,GAAAiP,EAAAjP,EAAAiQ,EAAAhC,GAMF,IAHAe,EAAA7V,EAAA6V,GAGA,GAGE,GAAAlH,EAAA3J,EAAAuK,EAAAhT,OAAA,aAAA0Z,EAAAC,KAMA,GAHA,EAAAlR,EAAAuK,EAAAZ,KAAAkH,EAAA,GAGA,GAAA7V,EAAA2O,GAAA,GAAA3O,EAAAuP,EAAA,OAAAvP,EAAAuP,EAAAhT,OAEE,OADAyD,EAAA6V,EAAAA,EACA7V,CAEJ,CAcA,OAPA2O,EAAA,IADAlD,EAAAmI,GAAA5T,EAAAwe,KACA5G,SAAAnM,GAAA,IAAAwK,EAAAxK,EAAA,IAAAkD,EAAAgF,EAAA6K,GAAA5gB,KAAA0d,IAAA,KAAAjH,EAAArU,EAAAuP,IAAA3R,KAAA8U,KAAA1S,EAAA2O,EAAA,KAOAsH,EAAA9C,KAAA,GAAAxE,EAAAsH,EAAA/C,KAAA,MAAA+C,EAAAtH,EAAA,EAAAkH,EAAA,MAEAxC,GAAA,EACA4C,EAAAnD,SAAA9S,EAAA6V,EAAA,EAMApK,EAAA7N,KAAAE,IAAA,IAAA6Q,EAAA,IAAApS,SAGAsK,EAAA0V,EAAAvX,EAAAtC,MAAAmZ,EAAA7b,EAAA8W,EAAArL,IAAAqL,IAGAvH,GAOEsF,GAJAhO,EAAAiP,EAAAjP,EAAAiQ,EAAA,MAIAvH,EAAAuH,EAAAhC,KACEnG,EAAAmI,EAAA,IAMAzC,GAHAxN,EAAAiP,EAAAyG,EAAAvX,EAAAtC,MAAAmZ,EAAA7b,EAAA2O,EAAAlD,IAAAkD,GAAAA,EAAA,MAGAY,GAAA9L,MAAAqT,EAAA,EAAAA,EAAA,cACEjQ,EAAAiP,EAAAjP,EAAAiQ,EAAA,OAKNjQ,EAAAgP,EAAAA,EACAxC,GAAA,EACA4C,EAAAnD,SAAAgC,EAEAgB,EAAAjP,EAAAiQ,EAAAhC,GACF,EAaCV,EAAAsK,YAAA,SAAA3H,EAAAjC,GAEC,IAAAN,EAAAxU,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAgBA,YAZA,IAAAiG,EACEvC,EAAAkJ,EAAA1d,EAAAA,EAAA2O,GAAAsH,EAAAjD,UAAAhT,EAAA2O,GAAAsH,EAAAhD,WAEA0B,EAAAoC,EAAA,EAAAvE,QAEA,IAAAsC,EAAAA,EAAAmB,EAAAnD,SACK6B,EAAAG,EAAA,KAGLN,EAAAkJ,EADA1d,EAAA8V,EAAA,IAAAG,EAAAjW,GAAA+W,EAAAjC,GACAiC,GAAA/W,EAAA2O,GAAA3O,EAAA2O,GAAAsH,EAAAjD,SAAA+D,IAGF/W,EAAA0Z,UAAA1Z,EAAAgX,SAAA,IAAAxC,EAAAA,CACF,EAgBCJ,EAAAuK,oBAAAvK,EAAAwK,KAAA,SAAA7H,EAAAjC,GAEC,IAAAmB,EAAA,KAAAnF,YAaA,YAVA,IAAAiG,GACEA,EAAAd,EAAApD,UACAiC,EAAAmB,EAAAnD,WAEA6B,EAAAoC,EAAA,EAAAvE,QAEA,IAAAsC,EAAAA,EAAAmB,EAAAnD,SACK6B,EAAAG,EAAA,MAGPgB,EAAA,IAAAG,EAbA,MAaAc,EAAAjC,EACF,EASCV,EAAAhE,SAAA,WAEC,IAAApQ,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAAA0D,EAAAkJ,EAAA1d,EAAAA,EAAA2O,GAAAsH,EAAAjD,UAAAhT,EAAA2O,GAAAsH,EAAAhD,UAIA,OAAAjT,EAAA0Z,UAAA1Z,EAAAgX,SAAA,IAAAxC,EAAAA,CACF,EAMCJ,EAAAyK,UAAAzK,EAAA0K,MAAA,WAEC,OAAAhJ,EAAA,SAAAhF,YAAA,WAAAnC,EAAA,IACF,EAOCyF,EAAA2K,QAAA3K,EAAA4K,OAAA,WAEC,IAAAhf,EAAA,KAAAiW,EAAAjW,EAAA8Q,YAAA0D,EAAAkJ,EAAA1d,EAAAA,EAAA2O,GAAAsH,EAAAjD,UAAAhT,EAAA2O,GAAAsH,EAAAhD,UAIA,OAAAjT,EAAA0Z,QAAA,IAAAlF,EAAAA,CACF,EAiNC,IAAAsD,EAAA,WAIC,SAAAmH,EAAAjf,EAAAyL,EAAA8P,GACE,IAAA2D,EAAAxC,EAAA,EAAAjS,EAAAzK,EAAAzD,OAIA,IAAAyD,EAAAA,EAAAyD,QAAAgH,KACEyU,EAAAlf,EAAAyK,GAAAgB,EAAAiR,EACA1c,EAAAyK,GAAAyU,EAAA3D,EAAA,EACAmB,EAAAwC,EAAA3D,EAAA,EAKF,OAFAmB,GAAA1c,EAAA2c,QAAAD,GAEA1c,CACF,CAEA,SAAAmf,EAAAC,EAAAC,EAAAC,EAAAC,GACE,IAAA9U,EAAA5D,EAEA,GAAAyY,GAAAC,EACE1Y,EAAAyY,EAAAC,EAAA,UAEA,IAAA9U,EAAA5D,EAAA,EAAA4D,EAAA6U,EAAA7U,IACE,GAAA2U,EAAA3U,IAAA4U,EAAA5U,GAAA,CACE5D,EAAAuY,EAAA3U,GAAA4U,EAAA5U,GAAA,KACA,KACF,CAIJ,OAAA5D,CACF,CAEA,SAAA2Y,EAAAJ,EAAAC,EAAAC,EAAA/D,GAIE,IAHA,IAAA9Q,EAAA,EAGA6U,KACEF,EAAAE,IAAA7U,EACAA,EAAA2U,EAAAE,GAAAD,EAAAC,GAAA,IACAF,EAAAE,GAAA7U,EAAA8Q,EAAA6D,EAAAE,GAAAD,EAAAC,GAIF,MAAAF,EAAA,IAAAA,EAAA7iB,OAAA,GAAA6iB,EAAAjD,OACF,CAEA,OAAO,SAAPnc,EAAAgF,EAAA8R,EAAAhC,EAAAmD,EAAAsD,GACE,IAAAnF,EAAAzH,EAAAlE,EAAAgB,EAAAgU,EAAAC,EAAAC,EAAAC,EAAAtD,EAAAuD,EAAAC,EAAAC,EAAAC,EAAAjJ,EAAA5X,EAAA8gB,EAAAC,EAAAC,EAAAC,EAAAC,EAAApK,EAAAjW,EAAA8Q,YAAAwP,EAAAtgB,EAAA6V,GAAA7Q,EAAA6Q,EAAA,KAAAW,EAAAxW,EAAAuP,EAAAkH,EAAAzR,EAAAuK,EAQA,KAAAiH,GAAAA,EAAA,IAAAC,GAAAA,EAAA,IAEE,OAAO,IAAPR,EAAAjW,EAAA6V,GAAA7Q,EAAA6Q,IAAAW,GAAAC,GAAAD,EAAA,IAAAC,EAAA,GAAAA,GAIED,GAAA,GAAAA,EAAA,KAAAC,EAAA,EAAA6J,EAAAA,EAAA,EAJFpK,KAuBF,IAhBAqF,GACEkE,EAAA,EACA9Q,EAAA3O,EAAA2O,EAAA3J,EAAA2J,IAEA4M,EAAAtH,EACAwL,EAzlFJ,EA0lFI9Q,EAAAgF,EAAA3T,EAAA2O,EAAA8Q,GAAA9L,EAAA3O,EAAA2J,EAAA8Q,IAGFW,EAAA3J,EAAAla,OACA2jB,EAAA1J,EAAAja,OAEAsjB,GADAvD,EAAA,IAAArG,EAAAqK,IACA/Q,EAAA,GAIA9E,EAAA,EAAAgM,EAAAhM,KAAA+L,EAAA/L,IAAA,GAAAA,KAaA,GAXAgM,EAAAhM,IAAA+L,EAAA/L,IAAA,IAAAkE,IAEA,MAAAmI,GACEC,EAAAD,EAAAb,EAAApD,UACAiC,EAAAmB,EAAAnD,UAEAiE,EADFkB,EACEnB,GAAA9W,EAAA2O,EAAA3J,EAAA2J,GAAA,EAEAmI,EAGFC,EAAA,EACE8I,EAAAxd,KAAA,GACAqd,GAAA,MACK,CAOL,GAJA3I,EAAAA,EAAA0I,EAAA,IACAhV,EAAA,EAGA,GAAA2V,EAAA,CAME,IALA3U,EAAA,EACAgL,EAAAA,EAAA,GACAM,KAGAtM,EAAAyV,GAAAzU,IAAAsL,IAAAtM,IACEtL,EAAAsM,EAAA8P,GAAA/E,EAAA/L,IAAA,GACAoV,EAAApV,GAAAtL,EAAAsX,EAAA,EACAhL,EAAAtM,EAAAsX,EAAA,EAGFiJ,EAAAjU,GAAAhB,EAAAyV,CAGF,KAAO,CAiBL,KAdAzU,EAAA8P,GAAA9E,EAAA,SAEA,IACEA,EAAAwI,EAAAxI,EAAAhL,EAAA8P,GACA/E,EAAAyI,EAAAzI,EAAA/K,EAAA8P,GACA6E,EAAA3J,EAAAla,OACA2jB,EAAA1J,EAAAja,QAGF0jB,EAAAG,EAEAL,GADAD,EAAAtJ,EAAA/S,MAAA,EAAA2c,IACA7jB,OAGAwjB,EAAAK,GAAAN,EAAAC,KAAA,GAEAM,EAAA5J,EAAAhT,SACAkZ,QAAA,GACAwD,EAAA1J,EAAA,GAEAA,EAAA,IAAA8E,EAAA,KAAA4E,EAEA,GACE1U,EAAA,GAGA2K,EAAA+I,EAAA1I,EAAAqJ,EAAAM,EAAAL,IAGA,GAGEC,EAAAF,EAAA,GACAM,GAAAL,IAAAC,EAAAA,EAAAzE,GAAAuE,EAAA,SAGArU,EAAAuU,EAAAG,EAAA,GAUA,GACE1U,GAAA8P,IAAA9P,EAAA8P,EAAA,GAWA,IAHAnF,EAAA+I,EALAQ,EAAAV,EAAAxI,EAAAhL,EAAA8P,GAKAuE,EAJAF,EAAAD,EAAApjB,OACAwjB,EAAAD,EAAAvjB,WAOEkP,IAGA+T,EAAAG,EAAAS,EAAAR,EAAAS,EAAA5J,EAAAmJ,EAAArE,MAOF,GAAA9P,IAAA2K,EAAA3K,EAAA,GACAkU,EAAAlJ,EAAAhT,UAGFmc,EAAAD,EAAApjB,QACAwjB,GAAAJ,EAAAhD,QAAA,GAGA6C,EAAAM,EAAAH,EAAAI,EAAAxE,IAGA,GAAAnF,IAIEA,EAAA+I,EAAA1I,EAAAqJ,EAAAM,EAHAL,EAAAD,EAAAvjB,SAMA,IACEkP,IAGA+T,EAAAM,EAAAM,EAAAL,EAAAM,EAAA5J,EAAAsJ,EAAAxE,IAIJwE,EAAAD,EAAAvjB,QACF,IAAA6Z,IACE3K,IACAqU,EAAA,CAAO,IAITD,EAAApV,KAAAgB,EAGA2K,GAAA0J,EAAA,GACEA,EAAAC,KAAAvJ,EAAAyJ,IAAA,GAEAH,EAAA,CAAOtJ,EAAAyJ,IACPF,EAAA,UAGJE,IAAAC,QAAA,IAAAJ,EAAA,KAAA/I,KAEA2I,OAAA,IAAAI,EAAA,EACF,CAGAD,EAAA,IAAAA,EAAA1D,OACF,CAGA,MAAAsD,EACEnD,EAAA3N,EAAAA,EACAyD,EAAAsN,MACK,CAGL,IAAAjV,EAAA,EAAAgB,EAAAoU,EAAA,GAAApU,GAAA,GAAAA,GAAA,GAAAhB,IACA6R,EAAA3N,EAAAlE,EAAAkE,EAAA8Q,EAAA,EAEA3J,EAAAwG,EAAArE,EAAAnB,EAAAwF,EAAA3N,EAAA,EAAAmI,EAAAhC,EAAA4K,EACF,CAEA,OAAApD,CACF,CACF,CAtQC,GA4QA,SAAAxG,EAAA9V,EAAA+W,EAAAjC,EAAAyL,GAEC,IAAAC,EAAA/V,EAAA6K,EAAA7J,EAAAwJ,EAAAwL,EAAAhM,EAAA+B,EAAAkK,EAAAzK,EAAAjW,EAAA8Q,YAIA6P,EAAA,SAAA5J,EAAA,CAIE,KAHAP,EAAAxW,EAAAuP,GAGA,OAAAvP,EAWA,IAAAwgB,EAAA,EAAA/U,EAAA+K,EAAA,GAAA/K,GAAA,GAAAA,GAAA,GAAA+U,IAIA,IAHA/V,EAAAsM,EAAAyJ,GAGA,EACE/V,GArzFJ,EAszFI6K,EAAAyB,EAIA9B,GAHAR,EAAA+B,EAAAkK,EAAA,IAGA9M,EAAA,GAAA4M,EAAAlL,EAAA,aAIA,IAFAoL,EAAA9iB,KAAAsX,MAAAzK,EAAA,GA5zFJ,MA6zFIgB,EAAA+K,EAAAja,QACA,CACE,IAAAgkB,EASE,MAAAI,EANA,KAAAlV,KAAAiV,GAAAlK,EAAAnU,KAAA,GACAoS,EAAAQ,EAAA,EACAuL,EAAA,EAEAlL,GADA7K,GAr0FR,KAs0FQ,CAIJ,KAAO,CAIL,IAHAgK,EAAAhJ,EAAA+K,EAAAkK,GAGAF,EAAA,EAAA/U,GAAA,GAAAA,GAAA,GAAA+U,IAUAvL,GAHAK,GAJA7K,GAj1FN,KAq1FM+V,GAGA,IAAA/L,EAAAb,EAAA,GAAA4M,EAAAlL,EAAA,OACF,CAmBF,GAfAiL,EAAAA,GAAAxJ,EAAA,YAAAP,EAAAkK,EAAA,KAAApL,EAAA,EAAAb,EAAAA,EAAAb,EAAA,GAAA4M,EAAAlL,EAAA,IAOAmL,EAAA3L,EAAA,GAAAG,GAAAsL,KAAA,GAAAzL,GAAAA,IAAA9U,EAAA6V,EAAA,QAAAZ,EAAA,MAAAA,IAAA,GAAAH,GAAAyL,GAAA,GAAAzL,IAAArK,EAAA,EAAA6K,EAAA,EAAAb,EAAAb,EAAA,GAAA4M,EAAAlL,GAAA,EAAAkB,EAAAkK,EAAA,UAAA5L,IAAA9U,EAAA6V,EAAA,QAQAkB,EAAA,IAAAP,EAAA,GAgBE,OAfAA,EAAAja,OAAA,EACAkkB,GAGE1J,GAAA/W,EAAA2O,EAAA,EAGA6H,EAAA,GAAA5C,EAAA,IAp3FN,EAo3FMmD,EAp3FN,MAq3FM/W,EAAA2O,GAAAoI,GAAA,GAIAP,EAAA,GAAAxW,EAAA2O,EAAA,EAGF3O,EAiBF,GAbA,GAAAyK,GACE+L,EAAAja,OAAAmkB,EACAjV,EAAA,EACAiV,MAEAlK,EAAAja,OAAAmkB,EAAA,EACAjV,EAAAmI,EAAA,GAt4FJ,EAs4FInJ,GAIA+L,EAAAkK,GAAApL,EAAA,GAAAb,EAAAb,EAAA,GAAA4M,EAAAlL,GAAA1B,EAAA,GAAA0B,GAAA,GAAA7J,EAAA,GAGFgV,EACE,OAAS,CAGP,MAAAC,EAAA,CAGE,IAAAjW,EAAA,EAAA6K,EAAAkB,EAAA,GAAAlB,GAAA,GAAAA,GAAA,GAAA7K,IAEA,IADA6K,EAAAkB,EAAA,IAAA/K,EACAA,EAAA,EAAA6J,GAAA,GAAAA,GAAA,GAAA7J,IAGAhB,GAAAgB,IACEzL,EAAA2O,IACA6H,EAAA,IAAAvC,IAAAuC,EAAA,OAGF,KACF,CAEE,GADAA,EAAAkK,IAAAjV,EACA+K,EAAAkK,IAAAzM,EAAA,MACAuC,EAAAkK,KAAA,EACAjV,EAAA,CAEJ,CAIF,IAAAhB,EAAA+L,EAAAja,OAAA,IAAAia,IAAA/L,IAAA+L,EAAA0F,KACF,CAqBA,OAnBA7I,IAGErT,EAAA2O,EAAAsH,EAAA9C,MAGEnT,EAAAuP,EAAA,KACAvP,EAAA2O,EAAAuH,KAGFlW,EAAA2O,EAAAsH,EAAA/C,OAGElT,EAAA2O,EAAA,EACA3O,EAAAuP,EAAA,CAAO,KAKXvP,CACF,CAGA,SAAA0d,EAAA1d,EAAA4gB,EAAA7J,GACE,IAAA/W,EAAA4X,WAAA,OAAAiJ,EAAA7gB,GACA,IAAAyL,EAAAkD,EAAA3O,EAAA2O,EAAA6F,EAAAH,EAAArU,EAAAuP,GAAAlD,EAAAmI,EAAAjY,OA2BA,OAtBAqkB,GACE7J,IAAAtL,EAAAsL,EAAA1K,GAAA,EACEmI,EAAAA,EAAAkB,OAAA,OAAAlB,EAAA/Q,MAAA,GAAAiR,EAAAjJ,GACFY,EAAA,IACEmI,EAAAA,EAAAkB,OAAA,OAAAlB,EAAA/Q,MAAA,IAGF+Q,EAAAA,GAAAxU,EAAA2O,EAAA,YAAA3O,EAAA2O,GACFA,EAAA,GACE6F,EAAA,KAAAE,GAAA/F,EAAA,GAAA6F,EACAuC,IAAAtL,EAAAsL,EAAA1K,GAAA,IAAAmI,GAAAE,EAAAjJ,KACFkD,GAAAtC,GACEmI,GAAAE,EAAA/F,EAAA,EAAAtC,GACA0K,IAAAtL,EAAAsL,EAAApI,EAAA,OAAA6F,EAAAA,EAAA,IAAAE,EAAAjJ,OAEAA,EAAAkD,EAAA,GAAAtC,IAAAmI,EAAAA,EAAA/Q,MAAA,EAAAgI,GAAA,IAAA+I,EAAA/Q,MAAAgI,IACAsL,IAAAtL,EAAAsL,EAAA1K,GAAA,IACEsC,EAAA,IAAAtC,IAAAmI,GAAA,KACAA,GAAAE,EAAAjJ,KAIJ+I,CACF,CAIA,SAAA4H,EAAAoE,EAAA7R,GACE,IAAA8F,EAAA+L,EAAA,GAGA,IAAA7R,GAz+FA,EAy+FA8F,GAAA,GAAAA,GAAA,GAAA9F,IACA,OAAAA,CACF,CAGA,SAAAmN,EAAA7F,EAAAc,EAAAD,GACE,GAAAC,EAAA7C,EAKE,MAFAb,GAAA,EACAyD,IAAAb,EAAApD,UAAAiE,GACAlC,MAAApB,GAEF,OAAAsC,EAAA,IAAAG,EAAAvD,GAAAqE,EAAA,KACF,CAGA,SAAA4C,EAAA1D,EAAAc,EAAAjC,GACE,GAAAiC,EAAA5C,EAAA,MAAAS,MAAApB,GACA,OAAAsC,EAAA,IAAAG,EAAAtD,GAAAoE,EAAAjC,GAAA,EACF,CAGA,SAAA8H,EAAA4D,GACE,IAAA/L,EAAA+L,EAAAjkB,OAAA,EAAA8P,EAjgGA,EAigGAoI,EAAA,EAMA,GAHAA,EAAA+L,EAAA/L,GAGA,CAGE,KAAAA,EAAA,MAAAA,GAAA,GAAApI,IAGA,IAAAoI,EAAA+L,EAAA,GAAA/L,GAAA,GAAAA,GAAA,GAAApI,GACF,CAEA,OAAAA,CACF,CAGA,SAAAqI,EAAAjJ,GAEE,IADA,IAAAqV,EAAA,GACArV,KAAAqV,GAAA,IACA,OAAAA,CACF,CASC,SAAArC,EAAAxI,EAAAjW,EAAAkE,EAAA4S,GAEC,IAAAyJ,EAAA1Z,EAAA,IAAAoP,EAAA,GAKExK,EAAA7N,KAAAsX,KAAA4B,EAxiGF,EAwiGE,GAIF,IAFAzD,GAAA,IAES,CAOP,GANAnP,EAAA,GAEE6c,GADAla,EAAAA,EAAAnE,MAAA1C,IACAuP,EAAA9D,KAAA8U,GAAA,GAIF,KADArc,EAAAyP,EAAAzP,EAAA,IACA,CAGEA,EAAA2C,EAAA0I,EAAAhT,OAAA,EACAgkB,GAAA,IAAA1Z,EAAA0I,EAAArL,MAAA2C,EAAA0I,EAAArL,GACA,KACF,CAGA6c,GADA/gB,EAAAA,EAAA0C,MAAA1C,IACAuP,EAAA9D,EACF,CAIA,OAFA4H,GAAA,EAEAxM,CACF,CAGA,SAAAma,EAAA9c,GACE,SAAAA,EAAAqL,EAAArL,EAAAqL,EAAAhT,OAAA,EACF,CAKC,SAAA0kB,EAAAhL,EAAAiL,EAAAhd,GAMC,IAJA,IAAAuH,EAAAzG,EAAAhF,EAAA,IAAAiW,EAAAiL,EAAA,IAAAzW,EAAA,IAIAA,EAAAyW,EAAA3kB,QAAA,CAIE,KAHAyI,EAAA,IAAAiR,EAAAiL,EAAAzW,KAGAoL,EAAA,CACE7V,EAAAgF,EACA,KACF,GAEAyG,EAAAzL,EAAAoW,IAAApR,MAEAd,GAAA,IAAAuH,GAAAzL,EAAA6V,IAAA3R,KACElE,EAAAgF,EAEJ,CAEA,OAAAhF,CACF,CAiCC,SAAAuc,EAAAvc,EAAA+W,GAEC,IAAA0E,EAAA0F,EAAA7L,EAAA3S,EAAAye,EAAAjiB,EAAAkb,EAAA5C,EAAA,EAAAhN,EAAA,EAAAgB,EAAA,EAAAwK,EAAAjW,EAAA8Q,YAAAgE,EAAAmB,EAAAnD,SAAAgE,EAAAb,EAAApD,UASA,IAAA7S,EAAAuP,IAAAvP,EAAAuP,EAAA,IAAAvP,EAAA2O,EAAA,GAEE,OAAO,IAAPsH,EAAAjW,EAAAuP,EAAAvP,EAAAuP,EAAA,GAAAvP,EAAA6V,EAAA,UAAA7V,EAAA6V,EAAA7V,EAAA6V,EAAA,IAAA7V,EAAA,KAeF,IAVA,MAAA+W,GACE1D,GAAA,EACAgH,EAAAvD,GAEAuD,EAAAtD,EAGF5X,EAAA,IAAA8W,EAAA,QAGAjW,EAAA2O,GAAA,GAGE3O,EAAAA,EAAA0C,MAAAvD,GACAsM,GAAA,EAUF,IAJA4O,GADA8G,EAAAvjB,KAAA0d,IAAA1H,EAAA,EAAAnI,IAAA7N,KAAA8U,KAAA,MAEA+I,EAAA9Y,EAAAye,EAAA,IAAAnL,EAAA,GACAA,EAAApD,UAAAwH,IAES,CAKP,GAJA1X,EAAAmT,EAAAnT,EAAAD,MAAA1C,GAAAqa,EAAA,GACAoB,EAAAA,EAAA/Y,QAAA+H,GAGA4J,GAFAlV,EAAAiiB,EAAAtW,KAAAgN,EAAAnV,EAAA8Y,EAAApB,EAAA,KAEA9K,GAAA9L,MAAA,EAAA4W,KAAAhG,EAAA+M,EAAA7R,GAAA9L,MAAA,EAAA4W,GAAA,CAEE,IADA/E,EAAA7J,EACA6J,KAAA8L,EAAAtL,EAAAsL,EAAA1e,MAAA0e,GAAA/G,EAAA,GAOA,SAAAtD,EAYE,OADAd,EAAApD,UAAAiE,EACAsK,EAVA,KAAA3J,EAAA,GAAA5C,EAAAuM,EAAA7R,EAAA8K,EAAA8G,EAAArM,EAAA2C,IAME,OAAA3B,EAAAsL,EAAAnL,EAAApD,UAAAiE,EAAAhC,EAAAzB,GAAA,GALA4C,EAAApD,UAAAwH,GAAA,GACAoB,EAAA9Y,EAAAxD,EAAA,IAAA8W,EAAA,GACAxL,EAAA,EACAgN,GAQN,CAEA2J,EAAAjiB,CACF,CACF,CAiBC,SAAA0c,EAAA7W,EAAA+R,GAEC,IAAAzK,EAAA+U,EAAA5F,EAAA9M,EAAA2S,EAAA7J,EAAA2J,EAAAjiB,EAAAkb,EAAAkH,EAAA3G,EAAA1W,EAAA,EAAAlE,EAAAgF,EAAAwR,EAAAxW,EAAAuP,EAAA0G,EAAAjW,EAAA8Q,YAAAgE,EAAAmB,EAAAnD,SAAAgE,EAAAb,EAAApD,UAUA,GAAA7S,EAAA6V,EAAA,IAAAW,IAAAA,EAAA,KAAAxW,EAAA2O,GAAA,GAAA6H,EAAA,OAAAA,EAAAja,OACE,OAAO,IAAP0Z,EAAAO,IAAAA,EAAA,WAAAxW,EAAA6V,EAAAK,IAAAM,EAAA,EAAAxW,GAcF,GAXA,MAAA+W,GACE1D,GAAA,EACAgH,EAAAvD,GAEAuD,EAAAtD,EAGFd,EAAApD,UAAAwH,GArBA,GAuBAgH,GADA/U,EAAA+H,EAAAmC,IACAd,OAAA,KAEA9X,KAAA6G,IAAAkK,EAAA3O,EAAA2O,GAAA,OAqCE,OAJAxP,EAAA2c,EAAA7F,EAAAoE,EAAA,EAAAvD,GAAApU,MAAAiM,EAAA,IACA3O,EAAA6b,EAAA,IAAA5F,EAAAoL,EAAA,IAAA/U,EAAA7I,MAAA,IAAA4W,EA3DF,IA2DEvP,KAAA3L,GACA8W,EAAApD,UAAAiE,EAEA,MAAAC,EAAAjB,EAAA9V,EAAA8W,EAAAhC,EAAAzB,GAAA,GAAArT,EAxBA,KAAAqhB,EAAA,MAAAA,GAAA,GAAAA,GAAA/U,EAAAoJ,OAAA,MAGE2L,GADA/U,EAAA+H,GADArU,EAAAA,EAAA0C,MAAAsC,IACAuK,IACAmG,OAAA,GACAxR,IAiCJ,IA9BEyK,EAAA3O,EAAA2O,EAEA0S,EAAA,GACErhB,EAAA,IAAAiW,EAAA,KAAA3J,GACAqC,KAEA3O,EAAA,IAAAiW,EAAAoL,EAAA,IAAA/U,EAAA7I,MAAA,IAeJ8d,EAAAvhB,EAKAohB,EAAAE,EAAAthB,EAAA8X,EAAA9X,EAAAoX,MAAA,GAAApX,EAAA8K,KAAA,GAAAuP,EAAA,GACAO,EAAA9E,EAAA9V,EAAA0C,MAAA1C,GAAAqa,EAAA,GACAoB,EAAA,IAES,CAIP,GAHA6F,EAAAxL,EAAAwL,EAAA5e,MAAAkY,GAAAP,EAAA,GAGAhG,GAFAlV,EAAAiiB,EAAAtW,KAAAgN,EAAAwJ,EAAA,IAAArL,EAAAwF,GAAApB,EAAA,KAEA9K,GAAA9L,MAAA,EAAA4W,KAAAhG,EAAA+M,EAAA7R,GAAA9L,MAAA,EAAA4W,GAAA,CAcE,GAbA+G,EAAAA,EAAA1e,MAAA,GAIA,IAAAiM,IAAAyS,EAAAA,EAAAtW,KAAAgR,EAAA7F,EAAAoE,EAAA,EAAAvD,GAAApU,MAAAiM,EAAA,MACAyS,EAAAtJ,EAAAsJ,EAAA,IAAAnL,EAAA/R,GAAAmW,EAAA,GAQA,MAAAtD,EAWE,OADAd,EAAApD,UAAAiE,EACAsK,EAVA,IAAAvM,EAAAuM,EAAA7R,EAAA8K,EA9FN,GA8FMvF,EAAA2C,GAME,OAAA3B,EAAAsL,EAAAnL,EAAApD,UAAAiE,EAAAhC,EAAAzB,GAAA,GALA4C,EAAApD,UAAAwH,GA/FR,GAgGQlb,EAAAmiB,EAAAthB,EAAA8X,EAAAyJ,EAAAnK,MAAA,GAAAmK,EAAAzW,KAAA,GAAAuP,EAAA,GACAO,EAAA9E,EAAA9V,EAAA0C,MAAA1C,GAAAqa,EAAA,GACAoB,EAAAhE,EAAA,CAQN,CAEA2J,EAAAjiB,EACAsc,GAAA,CACF,CACF,CAIA,SAAAoF,EAAA7gB,GAEE,OAAAoE,OAAApE,EAAA6V,EAAA7V,EAAA6V,EAAA,EACF,CAKC,SAAA2L,EAAAxhB,EAAAwU,GAEC,IAAA7F,EAAAlE,EAAA4B,EAqBA,KAhBAsC,EAAA6F,EAAA/W,QAAA,WAAA+W,EAAAA,EAAA3U,QAAA,UAGA4K,EAAA+J,EAAAiN,OAAA,UAGE9S,EAAA,IAAAA,EAAAlE,GACAkE,IAAA6F,EAAA/Q,MAAAgH,EAAA,GACA+J,EAAAA,EAAAkN,UAAA,EAAAjX,IACFkE,EAAA,IAGEA,EAAA6F,EAAAjY,QAIFkO,EAAA,OAAA+J,EAAAmN,WAAAlX,GAAAA,KAGA,IAAA4B,EAAAmI,EAAAjY,OAAA,KAAAiY,EAAAmN,WAAAtV,EAAA,KAAAA,GAGA,GAFAmI,EAAAA,EAAA/Q,MAAAgH,EAAA4B,GAEA,CAYE,GAXAA,GAAA5B,EACAzK,EAAA2O,EAAAA,EAAAA,EAAAlE,EAAA,EACAzK,EAAAuP,EAAA,GAMA9E,GAAAkE,EAAA,GAl4GF,EAm4GEA,EAAA,IAAAlE,GAn4GF,GAq4GEA,EAAA4B,EAAA,CAEE,IADA5B,GAAAzK,EAAAuP,EAAAlN,MAAAmS,EAAA/Q,MAAA,EAAAgH,IACA4B,GAv4GJ,EAu4GI5B,EAAA4B,GAAArM,EAAAuP,EAAAlN,MAAAmS,EAAA/Q,MAAAgH,EAAAA,GAv4GJ,IAy4GIA,EAz4GJ,GAw4GI+J,EAAAA,EAAA/Q,MAAAgH,IACAlO,MACF,MACEkO,GAAA4B,EAGF,KAAA5B,KAAA+J,GAAA,IACAxU,EAAAuP,EAAAlN,MAAAmS,GAEAnB,IAGErT,EAAA2O,EAAA3O,EAAA8Q,YAAAqC,MAGEnT,EAAAuP,EAAA,KACAvP,EAAA2O,EAAAuH,KAGFlW,EAAA2O,EAAA3O,EAAA8Q,YAAAoC,OAGElT,EAAA2O,EAAA,EACA3O,EAAAuP,EAAA,CAAO,IAIb,MAGEvP,EAAA2O,EAAA,EACA3O,EAAAuP,EAAA,CAAO,GAGT,OAAAvP,CACF,CAKC,SAAA4hB,EAAA5hB,EAAAwU,GAEC,IAAA+G,EAAAtF,EAAA4L,EAAApX,EAAAqX,EAAAzV,EAAAlK,EAAAqU,EAAAwF,EAEA,GAAAxH,EAAA/W,QAAA,SAEE,GADA+W,EAAAA,EAAA3U,QAAA,qBACAmU,EAAAzN,KAAAiO,GAAA,OAAAgN,EAAAxhB,EAAAwU,QACK,GAAP,aAAAA,GAAA,QAAAA,EAIE,OAHAA,IAAAxU,EAAA6V,EAAAK,KACAlW,EAAA2O,EAAAuH,IACAlW,EAAAuP,EAAA,KACAvP,EAGF,GAAA8T,EAAAvN,KAAAiO,GACE+G,EAAA,GACA/G,EAAAA,EAAAuN,mBACK,GAAPlO,EAAAtN,KAAAiO,GACE+G,EAAA,MACK,KAAPxH,EAAAxN,KAAAiO,GAGE,MAAAI,MAAArB,EAAAiB,GAFA+G,EAAA,CAGF,CA+BA,KA5BA9Q,EAAA+J,EAAAiN,OAAA,OAEA,GACEtf,GAAAqS,EAAA/Q,MAAAgH,EAAA,GACA+J,EAAAA,EAAAkN,UAAA,EAAAjX,IAEA+J,EAAAA,EAAA/Q,MAAA,GAMFqe,GADArX,EAAA+J,EAAA/W,QAAA,OACA,EACAwY,EAAAjW,EAAA8Q,YAEAgR,IAGErX,GADA4B,GADAmI,EAAAA,EAAA3U,QAAA,SACAtD,QACAkO,EAGAoX,EAAApD,EAAAxI,EAAA,IAAAA,EAAAsF,GAAA9Q,EAAA,EAAAA,IAOFA,EAHAuR,GADAxF,EAAArB,EAAAX,EAAA+G,EAAAtH,IACA1X,OAAA,EAGA,IAAAia,EAAA/L,KAAAA,EAAA+L,EAAA0F,MACA,OAAAzR,EAAA,MAAAwL,EAAA,EAAAjW,EAAA6V,IACA7V,EAAA2O,EAAAyN,EAAA5F,EAAAwF,GACAhc,EAAAuP,EAAAiH,EACAnD,GAAA,EAQAyO,IAAA9hB,EAAA8X,EAAA9X,EAAA6hB,EAAA,EAAAxV,IAGAlK,IAAAnC,EAAAA,EAAA0C,MAAA9E,KAAA6G,IAAAtC,GAAA,GAAAyR,EAAA,EAAAzR,GAAAgQ,EAAAxP,IAAA,EAAAR,KACAkR,GAAA,EAEArT,EACF,CA0CA,SAAAkX,EAAAjB,EAAA/R,EAAAlE,EAAAgF,EAAAgd,GACE,IAAA1M,EAAAnW,EAAA8iB,EAAArH,EAAA9D,EAAAb,EAAApD,UAAApH,EAAA7N,KAAAsX,KAAA4B,EApiHA,GA6iHA,IAJAzD,GAAA,EACAuH,EAAA5a,EAAA0C,MAAA1C,GACAiiB,EAAA,IAAAhM,EAAAjR,KAES,CAMP,GALA7F,EAAA2Y,EAAAmK,EAAAvf,MAAAkY,GAAA,IAAA3E,EAAA/R,IAAAA,KAAA4S,EAAA,GACAmL,EAAAD,EAAAhd,EAAA8F,KAAA3L,GAAA6F,EAAAoS,MAAAjY,GACA6F,EAAA8S,EAAA3Y,EAAAuD,MAAAkY,GAAA,IAAA3E,EAAA/R,IAAAA,KAAA4S,EAAA,QAGA,KAFA3X,EAAA8iB,EAAAnX,KAAA9F,IAEAuK,EAAA9D,GAAA,CACE,IAAA6J,EAAA7J,EAAAtM,EAAAoQ,EAAA+F,KAAA2M,EAAA1S,EAAA+F,IAAAA,MACA,OAAAA,EAAA,KACF,CAEAA,EAAA2M,EACAA,EAAAjd,EACAA,EAAA7F,EACAA,EAAAmW,CAEF,CAKA,OAHAjC,GAAA,EACAlU,EAAAoQ,EAAAhT,OAAAkP,EAAA,EAEAtM,CACF,CAIA,SAAA8X,EAAAoI,EAAA1Q,GAEE,IADA,IAAAzK,EAAAmb,IACA1Q,GAAAzK,GAAAmb,EACA,OAAAnb,CACF,CAIA,SAAAmT,EAAApB,EAAAjW,GACE,IAAAb,EAAAua,EAAA1Z,EAAA6V,EAAA,EAAAqM,EAAAvI,EAAA1D,EAAAA,EAAApD,UAAA,GAAA4H,EAAAyH,EAAAxf,MAAA,IAOA,IAFA1C,EAAAA,EAAAyE,OAEAsV,IAAAU,GAEE,OADAnI,EAAAoH,EAAA,IACA1Z,EAKF,IAFAb,EAAAa,EAAAqY,SAAA6J,IAEAlL,SACE1E,EAAAoH,EAAA,QACK,CAIL,IAHA1Z,EAAAA,EAAAoX,MAAAjY,EAAAuD,MAAAwf,KAGAnI,IAAAU,GAEE,OADAnI,EAAA0O,EAAA7hB,GAAAua,EAAA,IAAAA,EAAA,IACA1Z,EAGFsS,EAAA0O,EAAA7hB,GAAAua,EAAA,IAAAA,EAAA,GACF,CAEA,OAAA1Z,EAAAoX,MAAA8K,GAAAzd,KACF,CAOC,SAAA8Y,EAAAvd,EAAAqV,EAAA0B,EAAAjC,GAEC,IAAAyG,EAAA5M,EAAAlE,EAAAgB,EAAAY,EAAAoU,EAAAjM,EAAAgC,EAAAxR,EAAAiR,EAAAjW,EAAA8Q,YAAA8P,OAAA,IAAA7J,EAaA,GATA6J,GACEjM,EAAAoC,EAAA,EAAAvE,QACA,IAAAsC,EAAAA,EAAAmB,EAAAnD,SACK6B,EAAAG,EAAA,OAELiC,EAAAd,EAAApD,UACAiC,EAAAmB,EAAAnD,UAGF9S,EAAA4X,WAEO,CAoCL,IA3BAgJ,GACErF,EAAA,EACA,IAAAlG,EACE0B,EAAA,EAAAA,EAAA,EACF,GAAA1B,IACE0B,EAAA,EAAAA,EAAA,IAGFwE,EAAAlG,GAfF5K,GADA+J,EAAAkJ,EAAA1d,IACAvC,QAAA,OAsBA,IACE+W,EAAAA,EAAA3U,QAAA,SACAmF,EAAA,IAAAiR,EAAA,IACAtH,EAAA6F,EAAAjY,OAAAkO,EACAzF,EAAAuK,EAAA4F,EAAAuI,EAAA1Y,GAAA,GAAAuW,GACAvW,EAAA2J,EAAA3J,EAAAuK,EAAAhT,QAIFoS,EAAAtC,GADAmK,EAAArB,EAAAX,EAAA,GAAA+G,IACAhf,OAGA,GAAAia,IAAAnK,IAAAmK,EAAA0F,MAEA,GAAA1F,EAAA,GAEO,CAyBL,GAxBA/L,EAAA,EACEkE,MAEA3O,EAAA,IAAAiW,EAAAjW,IACAuP,EAAAiH,EACAxW,EAAA2O,EAAAA,EAEA6H,GADAxW,EAAA8X,EAAA9X,EAAAgF,EAAA+R,EAAAjC,EAAA,EAAAyG,IACAhM,EACAZ,EAAA3O,EAAA2O,EACA8R,EAAArO,GAIF3H,EAAA+L,EAAAO,GACAtL,EAAA8P,EAAA,EACAkF,EAAAA,QAAA,IAAAjK,EAAAO,EAAA,GAEA0J,EAAA3L,EAAA,YAAArK,GAAAgW,KAAA,IAAA3L,GAAAA,KAAA9U,EAAA6V,EAAA,QAAApL,EAAAgB,GAAAhB,IAAAgB,IAAA,IAAAqJ,GAAA2L,GAAA,IAAA3L,GAAA,EAAA0B,EAAAO,EAAA,IAAAjC,KAAA9U,EAAA6V,EAAA,QAKAW,EAAAja,OAAAwa,EAEA0J,EAGE,OAAAjK,IAAAO,GAAAwE,EAAA,GACE/E,EAAAO,GAAA,EACAA,MACEpI,EACA6H,EAAAmG,QAAA,IAMN,IAAAtQ,EAAAmK,EAAAja,QAAAia,EAAAnK,EAAA,KAAAA,GAGA,IAAA5B,EAAA,EAAA+J,EAAA,GAAA/J,EAAA4B,EAAA5B,IAAA+J,GAAA/B,EAAAiD,OAAAc,EAAA/L,IAGA,GAAAmW,EAAA,CACE,GAAAvU,EAAA,EACE,OAAAgJ,GAAA,GAAAA,EAAA,CAEE,IADA5K,EAAA,IAAA4K,EAAA,MACAhJ,EAAAA,EAAA5B,EAAA4B,IAAAmI,GAAA,IAEA,IAAAnI,GADAmK,EAAArB,EAAAX,EAAA+G,EAAAlG,IACA9Y,QAAAia,EAAAnK,EAAA,KAAAA,GAGA,IAAA5B,EAAA,EAAA+J,EAAA,KAAA/J,EAAA4B,EAAA5B,IAAA+J,GAAA/B,EAAAiD,OAAAc,EAAA/L,GACF,MACE+J,EAAAA,EAAAkB,OAAA,OAAAlB,EAAA/Q,MAAA,GAIJ+Q,EAAAA,GAAA7F,EAAA,YAAAA,CACF,MAAO,GAAPA,EAAA,GACE,OAAAA,GAAA6F,EAAA,IAAAA,EACAA,EAAA,KAAAA,CACF,MACE,KAAA7F,EAAAtC,EAAA,IAAAsC,GAAAtC,EAAAsC,KAAA6F,GAAA,SACK7F,EAAAtC,IAAAmI,EAAAA,EAAA/Q,MAAA,EAAAkL,GAAA,IAAA6F,EAAA/Q,MAAAkL,GAET,MApEE6F,EAAAoM,EAAA,WAsEFpM,GAAA,IAAAa,EAAA,QAAAA,EAAA,QAAAA,EAAA,SAAAb,CACF,MA/GEA,EAAAqM,EAAA7gB,GAiHF,OAAAA,EAAA6V,EAAA,MAAArB,EAAAA,CACF,CAIA,SAAAuM,EAAAvL,EAAAnJ,GACE,GAAAmJ,EAAAjZ,OAAA8P,EAEE,OADAmJ,EAAAjZ,OAAA8P,GACO,CAEX,CAwDC,SAAA5H,EAAAzE,GAEC,OAAO,IAAIoO,KAAXpO,GAAAyE,KACF,CAQC,SAAAgV,GAAAzZ,GAEC,OAAO,IAAIoO,KAAXpO,GAAAyZ,MACF,CASC,SAAAK,GAAA9Z,GAEC,OAAO,IAAIoO,KAAXpO,GAAA8Z,OACF,CAUC,SAAAzJ,GAAArQ,EAAAgF,GAEC,OAAO,IAAIoJ,KAAXpO,GAAA8K,KAAA9F,EACF,CASC,SAAAwV,GAAAxa,GAEC,OAAO,IAAIoO,KAAXpO,GAAAwa,MACF,CASC,SAAAN,GAAAla,GAEC,OAAO,IAAIoO,KAAXpO,GAAAka,OACF,CASC,SAAAN,GAAA5Z,GAEC,OAAO,IAAIoO,KAAXpO,GAAA4Z,MACF,CASC,SAAAQ,GAAApa,GAEC,OAAO,IAAIoO,KAAXpO,GAAAoa,OACF,CA2BC,SAAA+H,GAAAnd,EAAAhF,GAECgF,EAAA,SAAAA,GACAhF,EAAA,SAAAA,GACA,IAAA6G,EAAAiQ,EAAA,KAAAjE,UAAAiC,EAAA,KAAAhC,SAAAuH,EAAAvD,EAAA,EAqCA,OA/BA9R,EAAA6Q,GAAA7V,EAAA6V,EAIA7Q,EAAAuK,GAAAvP,EAAAuP,GAKAvP,EAAAuP,GAAAvK,EAAAgS,UACEnQ,EAAA7G,EAAA6V,EAAA,EAAA8D,EAAA,KAAA7C,EAAAhC,GAAA,aACAe,EAAA7Q,EAAA6Q,GAGF7Q,EAAAuK,GAAAvP,EAAAgX,UACEnQ,EAAA8S,EAAA,KAAAU,EAAA,GAAA3X,MAAA,KACAmT,EAAA7Q,EAAA6Q,EAGF7V,EAAA6V,EAAA,GACEzH,KAAAyE,UAAAwH,EACAjM,KAAA0E,SAAA,EACAjM,EAAA,KAAA+S,KAAA9B,EAAA9S,EAAAhF,EAAAqa,EAAA,IACAra,EAAA2Z,EAAA,KAAAU,EAAA,GACAjM,KAAAyE,UAAAiE,EACA1I,KAAA0E,SAAAgC,EACAjO,EAAA7B,EAAA6Q,EAAA,EAAAhP,EAAAuQ,MAAApX,GAAA6G,EAAAiE,KAAA9K,IAEA6G,EAAA,KAAA+S,KAAA9B,EAAA9S,EAAAhF,EAAAqa,EAAA,KAvBAxT,EAAA8S,EAAA,KAAAU,EAAA,GAAA3X,MAAA1C,EAAA6V,EAAA,YACAA,EAAA7Q,EAAA6Q,EALAhP,EAAA,SAAAqP,KA8BFrP,CACF,CASC,SAAA2Q,GAAAxX,GAEC,OAAO,IAAIoO,KAAXpO,GAAAwX,MACF,CAQC,SAAAtC,GAAAlV,GAEC,OAAA8V,EAAA9V,EAAA,SAAAA,GAAAA,EAAA2O,EAAA,IACF,CAUC,SAAAqH,GAAAhW,EAAAlC,EAAAD,GAEC,OAAO,IAAIuQ,KAAXpO,GAAAgW,MAAAlY,EAAAD,EACF,CAoBC,SAAAukB,GAAAC,GAEC,IAAAA,GAAA,iBAAAA,EAAA,MAAAzN,MAAAtB,EAAA,mBACA,IAAA7I,EAAAtI,EAAAG,EAAAggB,GAAA,IAAAD,EAAAjY,SAAAmY,EAAA,CAGI,YAAa,EAAG/P,EAChB,WAAY,EAAG,EACf,YAAYD,EAAY,EACxB,WAAY,EAAGA,EACf,OAAQ,EAAGA,EACX,QAAQA,EAAY,EACpB,SAAU,EAAG,GAGjB,IAAA9H,EAAA,EAAAA,EAAA8X,EAAAhmB,OAAAkO,GAAA,EAEE,GADAtI,EAAAogB,EAAA9X,GAAA6X,IAAA,KAAAngB,GAAAyQ,EAAAzQ,SACA,KAAAG,EAAA+f,EAAAlgB,IAAA,CACE,KAAAwR,EAAArR,KAAAA,GAAAA,GAAAigB,EAAA9X,EAAA,IAAAnI,GAAAigB,EAAA9X,EAAA,IACK,MAAAmK,MAAArB,EAAApR,EAAA,KAAAG,GADL,KAAAH,GAAAG,CAEF,CAIF,GADAH,EAAA,SAAAmgB,IAAA,KAAAngB,GAAAyQ,EAAAzQ,SACA,KAAAG,EAAA+f,EAAAlgB,IAAA,CACE,QAAAG,IAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,EAYE,MAAAsS,MAAArB,EAAApR,EAAA,KAAAG,GAXA,GAAAA,EAAA,CACE,uBAAA8Q,SAAAA,SAAAA,OAAAoP,kBAAApP,OAAAqP,YAIE,MAAA7N,MAAAnB,GAFArF,KAAAjM,IAAA,CAIJ,MACEiM,KAAAjM,IAAA,CAKN,CAEA,OAAOiM,IACT,CASC,SAAAyI,GAAA7W,GAEC,OAAO,IAAIoO,KAAXpO,GAAA6W,KACF,CASC,SAAA8B,GAAA3Y,GAEC,OAAO,IAAIoO,KAAXpO,GAAA2Y,MACF,CAiNC,SAAAR,GAAAnY,EAAAgF,GAEC,OAAO,IAAIoJ,KAAXpO,GAAAmY,IAAAnT,EACF,CASC,SAAAwX,GAAAxc,GAEC,OAAO,IAAIoO,KAAXpO,GAAAwc,KACF,CAQC,SAAA5Z,GAAA5C,GAEC,OAAA8V,EAAA9V,EAAA,SAAAA,GAAAA,EAAA2O,EAAA,IACF,CAWC,SAAA+T,KAEC,IAAAjY,EAAAvG,EAAA/E,EAAA,YAKA,IAFAkU,GAAA,EAEA5I,EAAA,EAAAA,EAAA4E,UAAA9S,QAEE,IADA2H,EAAA,SAAAmL,UAAA5E,OACA8E,EAMApQ,EAAAoQ,IACEpQ,EAAAA,EAAA2L,KAAA5G,EAAAxB,MAAAwB,SAPF,CACE,GAAAA,EAAA2R,EAEE,OADAxC,GAAA,EACO,IAAIjF,KAAK,KAElBjP,EAAA+E,CACF,CAOF,OAFAmP,GAAA,EAEAlU,EAAA8Z,MACF,CAOC,SAAA0J,GAAAN,GAEC,OAAAA,aAAAlQ,GAAAkQ,GAAAA,EAAAxR,cAAA6C,IAAA,CACF,CASC,SAAAsG,GAAAha,GAEC,OAAO,IAAIoO,KAAXpO,GAAAga,IACF,CAYC,SAAAsB,GAAAtb,EAAAgF,GAEC,OAAO,IAAIoJ,KAAXpO,GAAAsb,IAAAtW,EACF,CASC,SAAA4d,GAAA5iB,GAEC,OAAO,IAAIoO,KAAXpO,GAAAsb,IAAA,EACF,CASC,SAAAuH,GAAA7iB,GAEC,OAAO,IAAIoO,KAAXpO,GAAAsb,IAAA,GACF,CAQC,SAAAzd,KAEC,OAAAojB,EAAA,KAAA5R,WAAA,EACF,CAQC,SAAAvR,KAEC,OAAAmjB,EAAA,KAAA5R,UAAA,EACF,CAUC,SAAAgN,GAAArc,EAAAgF,GAEC,OAAO,IAAIoJ,KAAXpO,GAAAqc,IAAArX,EACF,CAUC,SAAAoY,GAAApd,EAAAgF,GAEC,OAAO,IAAIoJ,KAAXpO,GAAAod,IAAApY,EACF,CAUC,SAAArC,GAAA3C,EAAAgF,GAEC,OAAO,IAAIoJ,KAAXpO,GAAA2C,IAAAqC,EACF,CAUC,SAAA8d,GAAA/L,GAEC,IAAAxH,EAAAZ,EAAAlD,EAAAvH,EAAAuG,EAAA,EAAA5D,EAAA,YAAAoO,EAAA,GAUA,QALA,IAAA8B,EAAAA,EAAA,KAAAlE,UACK8B,EAAAoC,EAAA,EAAAvE,GAEL/G,EAAA7N,KAAAsX,KAAA6B,EAx+IA,GA0+IK3I,KAALgF,OAIO,GAAPA,OAAAoP,gBAGE,IAFAjT,EAAA6D,OAAAoP,gBAAA,IAAAO,YAAAtX,IAEAhB,EAAAgB,IACEvH,EAAAqL,EAAA9E,KAIA,MACE8E,EAAA9E,GAAA2I,OAAAoP,gBAAA,IAAAO,YAAA,OAKA9N,EAAAxK,KAAAvG,EAAA,QAKC,KAAPkP,OAAAqP,YAwBE,MAAA7N,MAAAnB,GAnBA,IAFAlE,EAAA6D,OAAAqP,YAAAhX,GAAA,GAEAhB,EAAAgB,IAGEvH,EAAAqL,EAAA9E,IAAA8E,EAAA9E,EAAA,QAAA8E,EAAA9E,EAAA,cAAA8E,EAAA9E,EAAA,WAGA,MACE2I,OAAAqP,YAAA,GAAAO,KAAAzT,EAAA9E,IAKAwK,EAAA5S,KAAA6B,EAAA,KACAuG,GAAA,GAIJA,EAAAgB,EAAA,CAGF,MA/CE,KAAAhB,EAAAgB,GAAAwJ,EAAAxK,KAAA,IAAA7M,KAAAklB,SAAA,EA2DF,IATA/L,GA7hJA,GA4hJAtL,EAAAwJ,IAAAxK,KAIAsM,IACE7S,EAAA0P,EAAA,GAjiJF,EAiiJEmD,GACA9B,EAAAxK,IAAAgB,EAAAvH,EAAA,GAAAA,GAIF,IAAA+Q,EAAAxK,GAAAA,IAAAwK,EAAAiH,MAGA,GAAAzR,EAAA,EACEkE,EAAA,EACAsG,EAAA,CAAM,OACD,CAIL,IAHAtG,GAAA,EAGA,IAAAsG,EAAA,GAAAtG,GAhjJF,EAgjJEsG,EAAAkH,QAGA,IAAA1Q,EAAA,EAAAvH,EAAA+Q,EAAA,GAAA/Q,GAAA,GAAAA,GAAA,GAAAuH,IAGAA,EAtjJF,IAsjJEkD,GAtjJF,EAsjJElD,EACF,CAKA,OAHA5E,EAAA8H,EAAAA,EACA9H,EAAA0I,EAAA0F,EAEApO,CACF,CAUC,SAAAgW,GAAA7c,GAEC,OAAA8V,EAAA9V,EAAA,SAAAA,GAAAA,EAAA2O,EAAA,OAAAmE,SACF,CAaC,SAAAwN,GAAAtgB,GAGC,OADAA,EAAA,SAAAA,IACAuP,EAAAvP,EAAAuP,EAAA,GAAAvP,EAAA6V,EAAA,EAAA7V,EAAA6V,EAAA7V,EAAA6V,GAAAK,GACF,CASC,SAAA6G,GAAA/c,GAEC,OAAO,IAAIoO,KAAXpO,GAAA+c,KACF,CASC,SAAA/D,GAAAhZ,GAEC,OAAO,IAAIoO,KAAXpO,GAAAgZ,MACF,CASC,SAAAC,GAAAjZ,GAEC,OAAO,IAAIoO,KAAXpO,GAAAiZ,MACF,CAUC,SAAA8C,GAAA/b,EAAAgF,GAEC,OAAO,IAAIoJ,KAAXpO,GAAA+b,IAAA/W,EACF,CAWC,SAAAoc,KAEC,IAAA3W,EAAA,EAAAyW,EAAA7R,UAAArP,EAAA,SAAAkhB,EAAAzW,IAKA,IADA4I,GAAA,EACArT,EAAA6V,KAAApL,EAAAyW,EAAA3kB,QAAAyD,EAAAA,EAAA8K,KAAAoW,EAAAzW,IAGA,OAFA4I,GAAA,EAEAyC,EAAA9V,EAAA,KAAA6S,UAAA,KAAAC,SACF,CASC,SAAAqK,GAAAnd,GAEC,OAAO,IAAIoO,KAAXpO,GAAAmd,KACF,CASC,SAAA5D,GAAAvZ,GAEC,OAAO,IAAIoO,KAAXpO,GAAAuZ,MACF,CAQC,SAAAuF,GAAA9e,GAEC,OAAA8V,EAAA9V,EAAA,SAAAA,GAAAA,EAAA2O,EAAA,IACF,CAIAwD,EArnBC,SAAA8Q,EAAAZ,GAEC,IAAA5X,EAAAtI,EAAAogB,EAQC,SAAApQ,EAAA7P,GAEC,IAAAqM,EAAAlE,EAAAtL,EAAAa,EAAA,KAIA,KAAAA,aAAAmS,GAAA,WAAAA,EAAA7P,GAMA,GAFAtC,EAAA8Q,YAAAqB,EAEAwQ,GAAArgB,GAuBE,OAtBAtC,EAAA6V,EAAAvT,EAAAuT,OAEAxC,GACE/Q,EAAAiN,GAAAjN,EAAAqM,EAAAwD,EAAAgB,MAGEnT,EAAA2O,EAAAuH,IACAlW,EAAAuP,EAAA,MACFjN,EAAAqM,EAAAwD,EAAAe,MAGElT,EAAA2O,EAAA,EACA3O,EAAAuP,EAAA,CAAO,KAEPvP,EAAA2O,EAAArM,EAAAqM,EACA3O,EAAAuP,EAAAjN,EAAAiN,EAAA9L,UAGFzD,EAAA2O,EAAArM,EAAAqM,EACA3O,EAAAuP,EAAAjN,EAAAiN,EAAAjN,EAAAiN,EAAA9L,QAAAnB,EAAAiN,IAQJ,eAFApQ,SAAAmD,GAEA,CACE,OAAAA,EAIE,OAHAtC,EAAA6V,EAAA,EAAAvT,EAAA,OACAtC,EAAA2O,EAAA,OACA3O,EAAAuP,EAAA,CAAO,IAYT,GARAjN,EAAA,GACEA,GAAAA,EACAtC,EAAA6V,GAAA,GAEA7V,EAAA6V,EAAA,EAIFvT,MAAAA,GAAAA,EAAA,KACE,IAAAqM,EAAA,EAAAlE,EAAAnI,EAAAmI,GAAA,GAAAA,GAAA,GAAAkE,IAkBA,YAhBA0E,EACE1E,EAAAwD,EAAAgB,MACEnT,EAAA2O,EAAAuH,IACAlW,EAAAuP,EAAA,MACFZ,EAAAwD,EAAAe,MACElT,EAAA2O,EAAA,EACA3O,EAAAuP,EAAA,CAAO,KAEPvP,EAAA2O,EAAAA,EACA3O,EAAAuP,EAAA,CAAOjN,KAGTtC,EAAA2O,EAAAA,EACA3O,EAAAuP,EAAA,CAAOjN,IAIX,CAGA,SAAAA,GAAA,GACEA,IAAAtC,EAAA6V,EAAAK,KACAlW,EAAA2O,EAAAuH,SACAlW,EAAAuP,EAAA,OAIFiS,EAAAxhB,EAAAsC,EAAA8N,WACF,CAEA,cAAAjR,EASE,OARA,MAAAsL,EAAAnI,EAAAqf,WAAA,KACErf,EAAAA,EAAAmB,MAAA,GACAzD,EAAA6V,GAAA,IAEA,KAAApL,IAAAnI,EAAAA,EAAAmB,MAAA,IACAzD,EAAA6V,EAAA,GAGF7B,EAAAzN,KAAAjE,GAAAkf,EAAAxhB,EAAAsC,GAAAsf,EAAA5hB,EAAAsC,GAGF,cAAAnD,EAQE,OAPAmD,EAAA,GACEA,GAAAA,EACAtC,EAAA6V,GAAA,GAEA7V,EAAA6V,EAAA,EAGF2L,EAAAxhB,EAAAsC,EAAA8N,YAGF,MAAAwE,MAAArB,EAAAjR,EACF,CA2DA,GAzDA6P,EAAA/W,UAAAgZ,EAEAjC,EAAA+Q,SAAA,EACA/Q,EAAAgR,WAAA,EACAhR,EAAAiR,WAAA,EACAjR,EAAAkR,YAAA,EACAlR,EAAAmR,cAAA,EACAnR,EAAAoR,gBAAA,EACApR,EAAAqR,gBAAA,EACArR,EAAAsR,gBAAA,EACAtR,EAAAuR,iBAAA,EACAvR,EAAAwR,OAAA,EAEAxR,EAAAiQ,OAAAjQ,EAAAnB,IAAAoR,GACAjQ,EAAA8Q,MAAAA,EACA9Q,EAAA6B,UAAA2O,GAEAxQ,EAAA1N,IAAAA,EACA0N,EAAAsH,KAAAA,GACAtH,EAAA2H,MAAAA,GACA3H,EAAA9B,IAAAA,GACA8B,EAAAqI,KAAAA,GACArI,EAAA+H,MAAAA,GACA/H,EAAAyH,KAAAA,GACAzH,EAAAiI,MAAAA,GACAjI,EAAAgQ,MAAAA,GACAhQ,EAAAqF,KAAAA,GACArF,EAAA+C,KAAAA,GACA/C,EAAA6D,MAAAA,GACA7D,EAAA0E,IAAAA,GACA1E,EAAAwG,KAAAA,GACAxG,EAAAgG,IAAAA,GACAhG,EAAAqK,IAAAA,GACArK,EAAAvP,MAAAA,GACAuP,EAAAuQ,MAAAA,GACAvQ,EAAA6H,GAAAA,GACA7H,EAAAmJ,IAAAA,GACAnJ,EAAA0Q,MAAAA,GACA1Q,EAAAyQ,KAAAA,GACAzQ,EAAAtU,IAAAA,GACAsU,EAAArU,IAAAA,GACAqU,EAAAkK,IAAAA,GACAlK,EAAAiL,IAAAA,GACAjL,EAAAxP,IAAAA,GACAwP,EAAA2Q,OAAAA,GACA3Q,EAAA0K,MAAAA,GACA1K,EAAAmO,KAAAA,GACAnO,EAAA4K,IAAAA,GACA5K,EAAA6G,KAAAA,GACA7G,EAAA8G,KAAAA,GACA9G,EAAA4J,IAAAA,GACA5J,EAAAiP,IAAAA,GACAjP,EAAAgL,IAAAA,GACAhL,EAAAoH,KAAAA,GACApH,EAAA2M,MAAAA,QAEA,IAAAuD,IAAAA,EAAA,IACAA,IACE,IAAAA,EAAAjY,SAEE,IADAmY,EAAA,CAAM,YAAa,WAAY,WAAY,WAAY,OAAQ,OAAQ,SAAU,UACjF9X,EAAA,EAAAA,EAAA8X,EAAAhmB,QAAA8lB,EAAAuB,eAAAzhB,EAAAogB,EAAA9X,QAAA4X,EAAAlgB,GAAA,KAAAA,IAMJ,OAFAgQ,EAAAiQ,OAAAC,GAEAlQ,CACF,CAqbA8Q,CAAArQ,GACAT,EAAA/W,UAAA0V,YAAAqB,EACAA,EAAA,QAAAA,EAAAA,QAAAA,EAGAO,EAAA,IAAAP,EAAAO,GACAC,EAAA,IAAAR,EAAAQ,GAOA,mBAAAkR,QAAAA,OAAAC,IACED,QAAA,WACE,OAAA1R,CACF,IAGF4R,EAAAA,SACE,mBAAAnT,QAAA,iBAAAA,OAAAoT,WACE5P,EAAAxD,OAAA,mCAAAwD,EAAAhE,SACAgE,EAAAxD,OAAAC,aAAA,WAGFkT,EAAOrpB,QAAPyX,IAIAD,IACEA,EAAA,oBAAA+R,MAAAA,MAAAA,KAAAA,MAAAA,KAAAA,KAAAC,QAGF7R,EAAAH,EAAAC,QACAA,EAAAE,WAAA,WAEE,OADAH,EAAAC,QAAAE,EACAF,CACF,EAEAD,EAAAC,QAAAA,EAEH,CAt1JC,CAs1JC/D"}