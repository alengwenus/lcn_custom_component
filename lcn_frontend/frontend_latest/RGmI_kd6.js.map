{"version":3,"file":"RGmI_kd6.js","mappings":";;AAoBA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;AA+CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC2BA;;;;;;AAOA;;;;AC3FA;ACIA;AAPA;;AAWA;AArBA;AAuBA;AAGA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;;;;ACWA;AACA;;AAEA;AACA;;AAEA;AAEA;;;;;;AAOA;AACA;;AAEA;AACA;;AAEA;AAEA;;;;AA7BA;;;;;;;;;;AAqEA;;;;;;;;;;;;;;;;;;;;AClJA;;;;AC6GA;AACA;;AAEA;AACA;;AAEA;AAEA;;;;;;AAOA;AACA;;AAEA;AACA;;AAEA;AAEA;;;;;;;AAQA;AACA;;AAEA;AACA;;AAEA;;;;;;AAQA;;AAEA;AACA;;;AAGA;AACA;AACA;;;;;AAOA;;AAEA;AACA;;;AAGA;AACA;AACA;;;;;;;AASA;AACA;;AAEA;AACA;;AAEA;AAEA;;;;;;AAOA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;AA7GA;;;;;;;;;;;;;AAuOA;;;AClTA;AACA;;AAEA;AACA;;AAEA;;;AAKA;;;AAIA;AACA;;AAEA;AACA;;AAEA;AAEA;;;AAIA;;;AAIA;AACA;;AAEA;AACA;;AAEA;AAEA;AACA;;;;;AA7CA;;;;;AAgGA;AC3DA;;AAEA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;;;;AAMA;AACA;;AAEA;AACA;;AAEA;;;AAKA;AApCA;;AA6CA;;;AAGA;AACA;;;;;;AAMA;;;AAGA;;;;;AAKA;AACA;AACA;;AAQA;;;;;;;;;;;;;;;AA0DA;;;;AC7GA;AACA;;AAEA;AACA;;AAEA;AAEA;;;;;;AAOA;AACA;;AAEA;AACA;;AAEA;;;;;AAOA;AACA;AAEA;AACA;;;;;;AAOA;AACA;AAEA;AACA;;;;;;AAOA;;;AAGA;;;;;AAKA;AACA;AACA;AACA;;AAnEA;;;;;;;;;;;;;;AAyIA;;;;ACnDA;AACA;;AAEA;AACA;;AAEA;AAEA;;;;;;AAOA;AACA;;AAEA;AACA;;AAEA;AAEA;;;;;;;AAQA;AACA;;AAEA;AACA;;AAEA;;AA3CA;;;;;;;;;;AA0FA;AClKA;;AAEA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;AACA;;;;;;AAMA;AACA;;AAEA;AACA;;AAEA;;AAjDA;;;;;;;;;;;;;AA0FA;;;;;ACjIA;AAIA;;;;AAIA;AACA;;AAEA;AACA;;AAEA;AAEA;AACA;AACA;;;;;;;AAQA;AACA;;AAEA;AACA;;AAEA;AAEA;;;;;AAMA;;AAEA;;;AAGA;;;;;AAKA;AACA;;;;AAIA;AACA;AACA;;;;AAhEA;;AA+EA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AAEA;;AAGA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AAEA;;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAwFA","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-formfield.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-list-item.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-radio.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-select.ts","webpack://lcn-frontend/./src/dialogs/lcn-config-binary-sensor.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-switch.ts","webpack://lcn-frontend/./src/dialogs/lcn-config-climate.ts","webpack://lcn-frontend/./src/dialogs/lcn-config-cover.ts","webpack://lcn-frontend/./src/dialogs/lcn-config-light.ts","webpack://lcn-frontend/./src/dialogs/lcn-config-scene.ts","webpack://lcn-frontend/./src/dialogs/lcn-config-sensor.ts","webpack://lcn-frontend/./src/dialogs/lcn-config-switch.ts","webpack://lcn-frontend/./src/dialogs/lcn-create-entity-dialog.ts"],"sourcesContent":["import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  protected override render() {\n    const classes = {\n      \"mdc-form-field--align-end\": this.alignEnd,\n      \"mdc-form-field--space-between\": this.spaceBetween,\n      \"mdc-form-field--nowrap\": this.nowrap,\n    };\n\n    return html` <div class=\"mdc-form-field ${classMap(classes)}\">\n      <slot></slot>\n      <label class=\"mdc-label\" @click=${this._labelClick}>\n        <slot name=\"label\">${this.label}</slot>\n      </label>\n    </div>`;\n  }\n\n  protected _labelClick() {\n    const input = this.input as HTMLInputElement | undefined;\n    if (!input) return;\n\n    input.focus();\n    if (input.disabled) {\n      return;\n    }\n    switch (input.tagName) {\n      case \"HA-CHECKBOX\":\n        input.checked = !input.checked;\n        fireEvent(input, \"change\");\n        break;\n      case \"HA-RADIO\":\n        input.checked = true;\n        fireEvent(input, \"change\");\n        break;\n      default:\n        input.click();\n        break;\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field {\n        align-items: var(--ha-formfield-align-items, center);\n        gap: 4px;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding: 0;\n      }\n      :host([disabled]) label {\n        color: var(--disabled-text-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport type { CSSResultGroup } from \"lit\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  protected renderRipple() {\n    if (this.noninteractive) {\n      return \"\";\n    }\n    return super.renderRipple();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(\n            --mdc-list-side-padding-left,\n            var(--mdc-list-side-padding, 20px)\n          );\n          padding-inline-start: var(\n            --mdc-list-side-padding-left,\n            var(--mdc-list-side-padding, 20px)\n          );\n          padding-right: var(\n            --mdc-list-side-padding-right,\n            var(--mdc-list-side-padding, 20px)\n          );\n          padding-inline-end: var(\n            --mdc-list-side-padding-right,\n            var(--mdc-list-side-padding, 20px)\n          );\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction) !important;\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction) !important;\n        }\n        .mdc-deprecated-list-item__meta {\n          display: var(--mdc-list-item-meta-display);\n          align-items: center;\n          flex-shrink: 0;\n        }\n        :host([graphic=\"icon\"]:not([twoline]))\n          .mdc-deprecated-list-item__graphic {\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            20px\n          ) !important;\n        }\n        :host([multiline-secondary]) {\n          height: auto;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__text {\n          padding: 8px 0;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__secondary-text {\n          text-overflow: initial;\n          white-space: normal;\n          overflow: auto;\n          display: inline-block;\n          margin-top: 10px;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__primary-text {\n          margin-top: 10px;\n        }\n        :host([multiline-secondary])\n          .mdc-deprecated-list-item__secondary-text::before {\n          display: none;\n        }\n        :host([multiline-secondary])\n          .mdc-deprecated-list-item__primary-text::before {\n          display: none;\n        }\n        :host([disabled]) {\n          color: var(--disabled-text-color);\n        }\n        :host([noninteractive]) {\n          pointer-events: unset;\n        }\n      `,\n      // safari workaround - must be explicit\n      document.dir === \"rtl\"\n        ? css`\n            span.material-icons:first-of-type,\n            span.material-icons:last-of-type {\n              direction: rtl !important;\n              --direction: rtl;\n            }\n          `\n        : css``,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon = false;\n\n  @property({ type: Boolean, reflect: true }) public clearable = false;\n\n  protected override render() {\n    return html`\n      ${super.render()}\n      ${this.clearable && !this.required && !this.disabled && this.value\n        ? html`<ha-icon-button\n            label=\"clear\"\n            @click=${this._clearValue}\n            .path=${mdiClose}\n          ></ha-icon-button>`\n        : nothing}\n    `;\n  }\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _clearValue(): void {\n    if (this.disabled || !this.value) {\n      return;\n    }\n    this.valueSetDirectly = true;\n    this.select(-1);\n    this.mdcFoundation.handleChange();\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      :host([clearable]) {\n        position: relative;\n      }\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-select__anchor {\n        height: var(--ha-select-height, 56px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n      .mdc-select__selected-text-container {\n        padding-inline-end: var(--select-selected-text-padding-end, 0px);\n      }\n      :host([clearable]) .mdc-select__selected-text-container {\n        padding-inline-end: var(--select-selected-text-padding-end, 12px);\n      }\n      ha-icon-button {\n        position: absolute;\n        top: 10px;\n        right: 28px;\n        --mdc-icon-button-size: 36px;\n        --mdc-icon-size: 20px;\n        color: var(--secondary-text-color);\n        inset-inline-start: initial;\n        inset-inline-end: 28px;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@ha/components/ha-list-item\";\nimport \"@ha/components/ha-select\";\nimport type { HaSelect } from \"@ha/components/ha-select\";\nimport { css, html, LitElement, CSSResult, nothing } from \"lit\";\nimport { stopPropagation } from \"@ha/common/dom/stop_propagation\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport type { HomeAssistant } from \"@ha/types\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport type { LCN, BinarySensorConfig } from \"types/lcn\";\n\ninterface ConfigItem {\n  name: string;\n  value: string;\n}\n\ninterface ConfigItemCollection {\n  name: string;\n  value: ConfigItem[];\n  id: string;\n}\n\n@customElement(\"lcn-config-binary-sensor-element\")\nexport class LCNConfigBinarySensorElement extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public domainData: BinarySensorConfig = {\n    source: \"BINSENSOR1\",\n  };\n\n  @state() private _sourceType!: ConfigItemCollection;\n\n  @state() private _source!: ConfigItem;\n\n  @query(\"#source-select\") private _sourceSelect!: HaSelect;\n\n  private get _binsensorPorts(): ConfigItem[] {\n    const binary_sensor: string = this.lcn.localize(\"binary-sensor\");\n    return [\n      { name: binary_sensor + \" 1\", value: \"BINSENSOR1\" },\n      { name: binary_sensor + \" 2\", value: \"BINSENSOR2\" },\n      { name: binary_sensor + \" 3\", value: \"BINSENSOR3\" },\n      { name: binary_sensor + \" 4\", value: \"BINSENSOR4\" },\n      { name: binary_sensor + \" 5\", value: \"BINSENSOR5\" },\n      { name: binary_sensor + \" 6\", value: \"BINSENSOR6\" },\n      { name: binary_sensor + \" 7\", value: \"BINSENSOR7\" },\n      { name: binary_sensor + \" 8\", value: \"BINSENSOR8\" },\n    ];\n  }\n\n  private get _regulators(): ConfigItem[] {\n    const regulator: string = this.lcn.localize(\"regulator\");\n    return [\n      { name: regulator + \" 1\", value: \"R1VARSETPOINT\" },\n      { name: regulator + \" 2\", value: \"R2VARSETPOINT\" },\n    ];\n  }\n\n  private _keys: ConfigItem[] = [\n    { name: \"A1\", value: \"A1\" },\n    { name: \"A2\", value: \"A2\" },\n    { name: \"A3\", value: \"A3\" },\n    { name: \"A4\", value: \"A4\" },\n    { name: \"A5\", value: \"A5\" },\n    { name: \"A6\", value: \"A6\" },\n    { name: \"A7\", value: \"A7\" },\n    { name: \"A8\", value: \"A8\" },\n    { name: \"B1\", value: \"B1\" },\n    { name: \"B2\", value: \"B2\" },\n    { name: \"B3\", value: \"B3\" },\n    { name: \"B4\", value: \"B4\" },\n    { name: \"B5\", value: \"B5\" },\n    { name: \"B6\", value: \"B6\" },\n    { name: \"B7\", value: \"B7\" },\n    { name: \"B8\", value: \"B8\" },\n    { name: \"C1\", value: \"C1\" },\n    { name: \"C2\", value: \"C2\" },\n    { name: \"C3\", value: \"C3\" },\n    { name: \"C4\", value: \"C4\" },\n    { name: \"C5\", value: \"C5\" },\n    { name: \"C6\", value: \"C6\" },\n    { name: \"C7\", value: \"C7\" },\n    { name: \"C8\", value: \"C8\" },\n    { name: \"D1\", value: \"D1\" },\n    { name: \"D2\", value: \"D2\" },\n    { name: \"D3\", value: \"D3\" },\n    { name: \"D4\", value: \"D4\" },\n    { name: \"D5\", value: \"D5\" },\n    { name: \"D6\", value: \"D6\" },\n    { name: \"D7\", value: \"D7\" },\n    { name: \"D8\", value: \"D8\" },\n  ];\n\n  private get _sourceTypes(): ConfigItemCollection[] {\n    return [\n      {\n        name: this.lcn.localize(\"binsensors\"),\n        value: this._binsensorPorts,\n        id: \"binsensors\",\n      },\n      {\n        name: this.lcn.localize(\"regulator-locks\"),\n        value: this._regulators,\n        id: \"regulator-locks\",\n      },\n      {\n        name: this.lcn.localize(\"key-locks\"),\n        value: this._keys,\n        id: \"key-locks\",\n      },\n    ];\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._sourceType = this._sourceTypes[0];\n    this._source = this._sourceType.value[0];\n  }\n\n  protected render() {\n    if (!(this._sourceType || this._source)) {\n      return nothing;\n    }\n    return html`\n      <div class=\"sources\">\n        <ha-select\n          id=\"source-type-select\"\n          .label=${this.lcn.localize(\"source-type\")}\n          .value=${this._sourceType.id}\n          fixedMenuPosition\n          @selected=${this._sourceTypeChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._sourceTypes.map(\n            (sourceType) => html`\n              <ha-list-item .value=${sourceType.id}> ${sourceType.name} </ha-list-item>\n            `,\n          )}\n        </ha-select>\n\n        <ha-select\n          id=\"source-select\"\n          .label=${this.lcn.localize(\"source\")}\n          .value=${this._source.value}\n          fixedMenuPosition\n          @selected=${this._sourceChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._sourceType.value.map(\n            (source) => html`\n              <ha-list-item .value=${source.value}> ${source.name} </ha-list-item>\n            `,\n          )}\n        </ha-select>\n      </div>\n    `;\n  }\n\n  private _sourceTypeChanged(ev: CustomEvent): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._sourceType = this._sourceTypes.find((sourceType) => sourceType.id === target.value)!;\n    this._source = this._sourceType.value[0];\n    this._sourceSelect.select(-1); // need to change index, so ha-select gets updated\n  }\n\n  private _sourceChanged(ev: CustomEvent): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._source = this._sourceType.value.find((source) => source.value === target.value)!;\n    this.domainData.source = this._source.value;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        .sources {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          column-gap: 4px;\n        }\n        ha-select {\n          display: block;\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-config-binary-sensor-element\": LCNConfigBinarySensorElement;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@ha/components/ha-list-item\";\nimport \"@ha/components/ha-select\";\nimport type { HaSelect } from \"@ha/components/ha-select\";\nimport \"@ha/components/ha-textfield\";\nimport type { HaTextField } from \"@ha/components/ha-textfield\";\nimport \"@ha/components/ha-switch\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, html, LitElement, CSSResultGroup, PropertyValues, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type { HomeAssistant, ValueChangedEvent } from \"@ha/types\";\nimport { stopPropagation } from \"@ha/common/dom/stop_propagation\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport { LCN, ClimateConfig } from \"types/lcn\";\n\ninterface ConfigItem {\n  name: string;\n  value: string;\n}\n\n@customElement(\"lcn-config-climate-element\")\nexport class LCNConfigClimateElement extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false, type: Number }) public softwareSerial: number = -1;\n\n  @property({ attribute: false }) public domainData: ClimateConfig = {\n    source: \"VAR1\",\n    setpoint: \"R1VARSETPOINT\",\n    max_temp: 35,\n    min_temp: 7,\n    lockable: false,\n    target_value_locked: -1,\n    unit_of_measurement: \"°C\",\n  };\n\n  @state() private _source!: ConfigItem;\n\n  @state() private _setpoint!: ConfigItem;\n\n  @state() private _unit!: ConfigItem;\n\n  @state() private _lockOption!: ConfigItem;\n\n  @state() private _targetValueLocked: number = 0;\n\n  private _invalid = false;\n\n  private get _is2012() {\n    return this.softwareSerial >= 0x160000;\n  }\n\n  private get _variablesNew(): ConfigItem[] {\n    const variable: string = this.lcn.localize(\"variable\");\n    return [\n      { name: variable + \" 1\", value: \"VAR1\" },\n      { name: variable + \" 2\", value: \"VAR2\" },\n      { name: variable + \" 3\", value: \"VAR3\" },\n      { name: variable + \" 4\", value: \"VAR4\" },\n      { name: variable + \" 5\", value: \"VAR5\" },\n      { name: variable + \" 6\", value: \"VAR6\" },\n      { name: variable + \" 7\", value: \"VAR7\" },\n      { name: variable + \" 8\", value: \"VAR8\" },\n      { name: variable + \" 9\", value: \"VAR9\" },\n      { name: variable + \" 10\", value: \"VAR10\" },\n      { name: variable + \" 11\", value: \"VAR11\" },\n      { name: variable + \" 12\", value: \"VAR12\" },\n    ];\n  }\n\n  private _variablesOld: ConfigItem[] = [\n    { name: \"TVar\", value: \"TVAR\" },\n    { name: \"R1Var\", value: \"R1VAR\" },\n    { name: \"R2Var\", value: \"R2VAR\" },\n  ];\n\n  private get _varSetpoints(): ConfigItem[] {\n    const setpoint: string = this.lcn.localize(\"setpoint\");\n    return [\n      { name: setpoint + \" 1\", value: \"R1VARSETPOINT\" },\n      { name: setpoint + \" 2\", value: \"R2VARSETPOINT\" },\n    ];\n  }\n\n  private _varUnits: ConfigItem[] = [\n    { name: \"Celsius\", value: \"°C\" },\n    { name: \"Fahrenheit\", value: \"°F\" },\n  ];\n\n  private get _regulatorLockOptions(): ConfigItem[] {\n    const regulatorLockOptions: ConfigItem[] = [\n      {\n        name: this.lcn.localize(\"dashboard-entities-dialog-climate-regulator-not-lockable\"),\n        value: \"NOT_LOCKABLE\",\n      },\n      {\n        name: this.lcn.localize(\"dashboard-entities-dialog-climate-regulator-lockable\"),\n        value: \"LOCKABLE\",\n      },\n      {\n        name: this.lcn.localize(\n          \"dashboard-entities-dialog-climate-regulator-lockable-with-target-value\",\n        ),\n        value: \"LOCKABLE_WITH_TARGET_VALUE\",\n      },\n    ];\n    if (this.softwareSerial < 0x120301) return regulatorLockOptions.slice(0, 2);\n    return regulatorLockOptions;\n  }\n\n  private get _sources(): ConfigItem[] {\n    return this._is2012 ? this._variablesNew : this._variablesOld;\n  }\n\n  private get _setpoints(): ConfigItem[] {\n    return this._is2012 ? this._varSetpoints.concat(this._variablesNew) : this._varSetpoints;\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._source = this._sources[0];\n    this._setpoint = this._setpoints[0];\n    this._unit = this._varUnits[0];\n    this._lockOption = this._regulatorLockOptions[0];\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    this._invalid =\n      !this._validateMinTemp(this.domainData.min_temp) ||\n      !this._validateMaxTemp(this.domainData.max_temp) ||\n      !this._validateTargetValueLocked(this._targetValueLocked);\n  }\n\n  protected update(changedProperties: PropertyValues) {\n    super.update(changedProperties);\n    this.dispatchEvent(\n      new CustomEvent(\"validity-changed\", {\n        detail: this._invalid,\n        bubbles: true,\n        composed: true,\n      }),\n    );\n  }\n\n  protected render() {\n    if (!(this._source && this._setpoint && this._unit && this._lockOption)) {\n      return nothing;\n    }\n    return html`\n      <div class=\"sources\">\n        <ha-select\n          id=\"source-select\"\n          .label=${this.lcn.localize(\"source\")}\n          .value=${this._source.value}\n          fixedMenuPosition\n          @selected=${this._sourceChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._sources.map(\n            (source) => html`\n              <ha-list-item .value=${source.value}> ${source.name} </ha-list-item>\n            `,\n          )}\n        </ha-select>\n\n        <ha-select\n          id=\"setpoint-select\"\n          .label=${this.lcn.localize(\"setpoint\")}\n          .value=${this._setpoint.value}\n          fixedMenuPosition\n          @selected=${this._setpointChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._setpoints.map(\n            (setpoint) => html`\n              <ha-list-item .value=${setpoint.value}> ${setpoint.name} </ha-list-item>\n            `,\n          )}\n        </ha-select>\n      </div>\n\n      <ha-select\n        id=\"unit-select\"\n        .label=${this.lcn.localize(\"dashboard-entities-dialog-unit-of-measurement\")}\n        .value=${this._unit.value}\n        fixedMenuPosition\n        @selected=${this._unitChanged}\n        @closed=${stopPropagation}\n      >\n        ${this._varUnits.map(\n          (unit) => html` <ha-list-item .value=${unit.value}> ${unit.name} </ha-list-item> `,\n        )}\n      </ha-select>\n\n      <div class=\"temperatures\">\n        <ha-textfield\n          id=\"min-temperature\"\n          .label=${this.lcn.localize(\"dashboard-entities-dialog-climate-min-temperature\")}\n          type=\"number\"\n          .suffix=${this._unit.value}\n          .value=${this.domainData.min_temp.toString()}\n          required\n          autoValidate\n          @input=${this._minTempChanged}\n          .validityTransform=${this._validityTransformMinTemp}\n          .validationMessage=${this.lcn.localize(\n            \"dashboard-entities-dialog-climate-min-temperature-error\",\n          )}\n        ></ha-textfield>\n\n        <ha-textfield\n          id=\"max-temperature\"\n          .label=${this.lcn.localize(\"dashboard-entities-dialog-climate-max-temperature\")}\n          type=\"number\"\n          .suffix=${this._unit.value}\n          .value=${this.domainData.max_temp.toString()}\n          required\n          autoValidate\n          @input=${this._maxTempChanged}\n          .validityTransform=${this._validityTransformMaxTemp}\n          .validationMessage=${this.lcn.localize(\n            \"dashboard-entities-dialog-climate-max-temperature-error\",\n          )}\n        ></ha-textfield>\n      </div>\n\n      <div class=\"lock-options\">\n        <ha-select\n          id=\"lock-options-select\"\n          .label=${this.lcn.localize(\"dashboard-entities-dialog-climate-regulator-lock\")}\n          .value=${this._lockOption.value}\n          fixedMenuPosition\n          @selected=${this._lockOptionChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._regulatorLockOptions.map(\n            (lockOption) => html`\n              <ha-list-item .value=${lockOption.value}> ${lockOption.name} </ha-list-item>\n            `,\n          )}\n        </ha-select>\n\n        <ha-textfield\n          id=\"target-value\"\n          .label=${this.lcn.localize(\"dashboard-entities-dialog-climate-target-value\")}\n          type=\"number\"\n          suffix=\"%\"\n          .value=${this._targetValueLocked.toString()}\n          .disabled=${this._lockOption.value !== \"LOCKABLE_WITH_TARGET_VALUE\"}\n          .helper=${this.lcn.localize(\"dashboard-entities-dialog-climate-target-value-helper\")}\n          .helperPersistent=${this._lockOption.value === \"LOCKABLE_WITH_TARGET_VALUE\"}\n          required\n          autoValidate\n          @input=${this._targetValueLockedChanged}\n          .validityTransform=${this._validityTransformTargetValueLocked}\n          .validationMessage=${this.lcn.localize(\n            \"dashboard-entities-dialog-climate-target-value-error\",\n          )}\n        >\n        </ha-textfield>\n      </div>\n    `;\n  }\n\n  private _sourceChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._source = this._sources.find((source) => source.value === target.value)!;\n    this.domainData.source = this._source.value;\n  }\n\n  private _setpointChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._setpoint = this._setpoints.find((setpoint) => setpoint.value === target.value)!;\n    this.domainData.setpoint = this._setpoint.value;\n  }\n\n  private _minTempChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaTextField;\n    this.domainData.min_temp = +target.value;\n    const maxTextfield: HaTextField = this.shadowRoot!.querySelector(\"#max-temperature\")!;\n    maxTextfield.reportValidity();\n    this.requestUpdate();\n  }\n\n  private _maxTempChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaTextField;\n    this.domainData.max_temp = +target.value;\n    const minTextfield: HaTextField = this.shadowRoot!.querySelector(\"#min-temperature\")!;\n    minTextfield.reportValidity();\n    this.requestUpdate();\n  }\n\n  private _unitChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._unit = this._varUnits.find((unit) => unit.value === target.value)!;\n    this.domainData.unit_of_measurement = this._unit.value;\n  }\n\n  private _lockOptionChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaSelect;\n\n    if (target.index === -1) this._lockOption = this._regulatorLockOptions[0];\n    else\n      this._lockOption = this._regulatorLockOptions.find(\n        (option) => option.value === target.value,\n      )!;\n\n    switch (this._lockOption.value) {\n      case \"LOCKABLE\":\n        this.domainData.lockable = true;\n        this.domainData.target_value_locked = -1;\n        break;\n      case \"LOCKABLE_WITH_TARGET_VALUE\":\n        this.domainData.lockable = true;\n        this.domainData.target_value_locked = this._targetValueLocked;\n        break;\n      default: // NOT_LOCKABLE\n        this.domainData.lockable = false;\n        this.domainData.target_value_locked = -1;\n        break;\n    }\n  }\n\n  private _targetValueLockedChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaTextField;\n    this._targetValueLocked = +target.value;\n    this.domainData.target_value_locked = +target.value;\n  }\n\n  private _validateMaxTemp(max_temp: number): boolean {\n    return max_temp > this.domainData.min_temp;\n  }\n\n  private _validateMinTemp(min_temp: number): boolean {\n    return min_temp < this.domainData.max_temp;\n  }\n\n  private _validateTargetValueLocked(target_value_locked: number): boolean {\n    return target_value_locked >= 0 && target_value_locked <= 100;\n  }\n\n  private get _validityTransformMaxTemp() {\n    return (value: string) => ({ valid: this._validateMaxTemp(+value) });\n  }\n\n  private get _validityTransformMinTemp() {\n    return (value: string) => ({ valid: this._validateMinTemp(+value) });\n  }\n\n  private get _validityTransformTargetValueLocked() {\n    return (value: string) => ({ valid: this._validateTargetValueLocked(+value) });\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        .sources,\n        .temperatures,\n        .lock-options {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          column-gap: 4px;\n        }\n        ha-select,\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-config-climate-element\": LCNConfigClimateElement;\n  }\n}\n","import \"@ha/components/ha-list-item\";\nimport \"@ha/components/ha-select\";\nimport type { HaSelect } from \"@ha/components/ha-select\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, html, LitElement, CSSResult, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type { HomeAssistant } from \"@ha/types\";\nimport { stopPropagation } from \"@ha/common/dom/stop_propagation\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport type { LCN, CoverConfig } from \"types/lcn\";\n\ninterface ConfigItem {\n  name: string;\n  value: string;\n}\n\n@customElement(\"lcn-config-cover-element\")\nexport class LCNConfigCoverElement extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public domainData: CoverConfig = {\n    motor: \"MOTOR1\",\n    positioning_mode: \"NONE\",\n    reverse_time: \"RT1200\",\n  };\n\n  @state() private _motor!: ConfigItem;\n\n  @state() private _positioningMode!: ConfigItem;\n\n  @state() private _reverseDelay!: ConfigItem;\n\n  private get _motors(): ConfigItem[] {\n    return [\n      { name: this.lcn.localize(\"motor-port\", { port: 1 }), value: \"MOTOR1\" },\n      { name: this.lcn.localize(\"motor-port\", { port: 2 }), value: \"MOTOR2\" },\n      { name: this.lcn.localize(\"motor-port\", { port: 3 }), value: \"MOTOR3\" },\n      { name: this.lcn.localize(\"motor-port\", { port: 4 }), value: \"MOTOR4\" },\n      { name: this.lcn.localize(\"outputs\"), value: \"OUTPUTS\" },\n    ];\n  }\n\n  private _reverseDelays: ConfigItem[] = [\n    { name: \"70ms\", value: \"RT70\" },\n    { name: \"600ms\", value: \"RT600\" },\n    { name: \"1200ms\", value: \"RT1200\" },\n  ];\n\n  private get _positioningModes(): ConfigItem[] {\n    return [\n      { name: this.lcn.localize(\"motor-positioning-none\"), value: \"NONE\" },\n      { name: this.lcn.localize(\"motor-positioning-bs4\"), value: \"BS4\" },\n      { name: this.lcn.localize(\"motor-positioning-module\"), value: \"MODULE\" },\n    ];\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._motor = this._motors[0];\n    this._positioningMode = this._positioningModes[0];\n    this._reverseDelay = this._reverseDelays[0];\n  }\n\n  protected render() {\n    if (!(this._motor || this._positioningMode || this._reverseDelay)) {\n      return nothing;\n    }\n    return html`\n      <ha-select\n        id=\"motor-select\"\n        .label=${this.lcn.localize(\"motor\")}\n        .value=${this._motor.value}\n        fixedMenuPosition\n        @selected=${this._motorChanged}\n        @closed=${stopPropagation}\n      >\n        ${this._motors.map(\n          (motor) => html` <ha-list-item .value=${motor.value}> ${motor.name} </ha-list-item> `,\n        )}\n      </ha-select>\n\n      ${this._motor.value === \"OUTPUTS\"\n        ? html`\n            <ha-select\n              id=\"reverse-delay-select\"\n              .label=${this.lcn.localize(\"reverse-delay\")}\n              .value=${this._reverseDelay.value}\n              fixedMenuPosition\n              @selected=${this._reverseDelayChanged}\n              @closed=${stopPropagation}\n            >\n              ${this._reverseDelays.map(\n                (reverseDelay) => html`\n                  <ha-list-item .value=${reverseDelay.value}> ${reverseDelay.name} </ha-list-item>\n                `,\n              )}\n            </ha-select>\n          `\n        : html`\n            <ha-select\n              id=\"positioning-mode-select\"\n              .label=${this.lcn.localize(\"motor-positioning-mode\")}\n              .value=${this._positioningMode.value}\n              fixedMenuPosition\n              @selected=${this._positioningModeChanged}\n              @closed=${stopPropagation}\n            >\n              ${this._positioningModes.map(\n                (positioningMode) => html`\n                  <ha-list-item .value=${positioningMode.value}>\n                    ${positioningMode.name}\n                  </ha-list-item>\n                `,\n              )}\n            </ha-select>\n          `}\n    `;\n  }\n\n  private _motorChanged(ev: CustomEvent): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._motor = this._motors.find((motor) => motor.value === target.value)!;\n    this._positioningMode = this._positioningModes[0];\n    this._reverseDelay = this._reverseDelays[0];\n    this.domainData.motor = this._motor.value;\n    if (this._motor.value === \"OUTPUTS\") this.domainData.positioning_mode = \"NONE\";\n    else this.domainData.reverse_time = \"RT1200\";\n  }\n\n  private _positioningModeChanged(ev: CustomEvent): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._positioningMode = this._positioningModes.find(\n      (positioningMode) => positioningMode.value === target.value,\n    )!;\n    this.domainData.positioning_mode = this._positioningMode.value;\n  }\n\n  private _reverseDelayChanged(ev: CustomEvent): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._reverseDelay = this._reverseDelays.find(\n      (reverseDelay) => reverseDelay.value === target.value,\n    )!;\n    this.domainData.reverse_time = this._reverseDelay.value;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-select {\n          display: block;\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-config-cover-element\": LCNConfigCoverElement;\n  }\n}\n","import \"@ha/components/ha-list-item\";\nimport \"@ha/components/ha-select\";\nimport type { HaSelect } from \"@ha/components/ha-select\";\nimport \"@ha/components/ha-radio\";\nimport \"@ha/components/ha-formfield\";\nimport \"@ha/components/ha-textfield\";\nimport { css, html, LitElement, CSSResultGroup, PropertyValues, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport type { HaRadio } from \"@ha/components/ha-radio\";\nimport type { HaSwitch } from \"@ha/components/ha-switch\";\nimport type { HaTextField } from \"@ha/components/ha-textfield\";\nimport { stopPropagation } from \"@ha/common/dom/stop_propagation\";\nimport type { HomeAssistant, ValueChangedEvent } from \"@ha/types\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport type { LCN, LightConfig } from \"types/lcn\";\n\ninterface ConfigItem {\n  name: string;\n  value: string;\n}\n\ninterface ConfigItemCollection {\n  name: string;\n  value: ConfigItem[];\n  id: string;\n}\n\n@customElement(\"lcn-config-light-element\")\nexport class LCNConfigLightElement extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public domainData: LightConfig = {\n    output: \"OUTPUT1\",\n    dimmable: false,\n    transition: 0,\n  };\n\n  @state() private _portType!: ConfigItemCollection;\n\n  @state() private _port!: ConfigItem;\n\n  @query(\"#port-select\") private _portSelect;\n\n  private _invalid = false;\n\n  private get _outputPorts(): ConfigItem[] {\n    const output: string = this.lcn.localize(\"output\");\n    return [\n      { name: output + \" 1\", value: \"OUTPUT1\" },\n      { name: output + \" 2\", value: \"OUTPUT2\" },\n      { name: output + \" 3\", value: \"OUTPUT3\" },\n      { name: output + \" 4\", value: \"OUTPUT4\" },\n    ];\n  }\n\n  private get _relayPorts(): ConfigItem[] {\n    const relay: string = this.lcn.localize(\"relay\");\n    return [\n      { name: relay + \" 1\", value: \"RELAY1\" },\n      { name: relay + \" 2\", value: \"RELAY2\" },\n      { name: relay + \" 3\", value: \"RELAY3\" },\n      { name: relay + \" 4\", value: \"RELAY4\" },\n      { name: relay + \" 5\", value: \"RELAY5\" },\n      { name: relay + \" 6\", value: \"RELAY6\" },\n      { name: relay + \" 7\", value: \"RELAY7\" },\n      { name: relay + \" 8\", value: \"RELAY8\" },\n    ];\n  }\n\n  private get _portTypes(): ConfigItemCollection[] {\n    return [\n      { name: this.lcn.localize(\"output\"), value: this._outputPorts, id: \"output\" },\n      { name: this.lcn.localize(\"relay\"), value: this._relayPorts, id: \"relay\" },\n    ];\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._portType = this._portTypes[0];\n    this._port = this._portType.value[0];\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    this._invalid = !this._validateTransition(this.domainData.transition);\n  }\n\n  protected update(changedProperties: PropertyValues) {\n    super.update(changedProperties);\n    this.dispatchEvent(\n      new CustomEvent(\"validity-changed\", {\n        detail: this._invalid,\n        bubbles: true,\n        composed: true,\n      }),\n    );\n  }\n\n  protected render() {\n    if (!(this._portType || this._port)) {\n      return nothing;\n    }\n    return html`\n      <div id=\"port-type\">${this.lcn.localize(\"port-type\")}</div>\n\n      <ha-formfield label=${this.lcn.localize(\"output\")}>\n        <ha-radio\n          name=\"port\"\n          value=\"output\"\n          .checked=${this._portType.id === \"output\"}\n          @change=${this._portTypeChanged}\n        ></ha-radio>\n      </ha-formfield>\n\n      <ha-formfield label=${this.lcn.localize(\"relay\")}>\n        <ha-radio\n          name=\"port\"\n          value=\"relay\"\n          .checked=${this._portType.id === \"relay\"}\n          @change=${this._portTypeChanged}\n        ></ha-radio>\n      </ha-formfield>\n\n      <ha-select\n        id=\"port-select\"\n        .label=${this.lcn.localize(\"port\")}\n        .value=${this._port.value}\n        fixedMenuPosition\n        @selected=${this._portChanged}\n        @closed=${stopPropagation}\n      >\n        ${this._portType.value.map(\n          (port) => html` <ha-list-item .value=${port.value}> ${port.name} </ha-list-item> `,\n        )}\n      </ha-select>\n\n      ${this.renderOutputFeatures()}\n    `;\n  }\n\n  private renderOutputFeatures() {\n    switch (this._portType.id) {\n      case \"output\":\n        return html`\n          <div id=\"dimmable\">\n            <label>${this.lcn.localize(\"dashboard-entities-dialog-light-dimmable\")}:</label>\n\n            <ha-switch\n              .checked=${this.domainData.dimmable}\n              @change=${this._dimmableChanged}\n            ></ha-switch>\n          </div>\n\n          <ha-textfield\n            id=\"transition\"\n            .label=${this.lcn.localize(\"dashboard-entities-dialog-light-transition\")}\n            type=\"number\"\n            suffix=\"s\"\n            .value=${this.domainData.transition.toString()}\n            min=\"0\"\n            max=\"486\"\n            required\n            autoValidate\n            @input=${this._transitionChanged}\n            .validityTransform=${this._validityTransformTransition}\n            .validationMessage=${this.lcn.localize(\n              \"dashboard-entities-dialog-light-transition-error\",\n            )}\n          ></ha-textfield>\n        `;\n      case \"relay\":\n        return nothing;\n      default:\n        return nothing;\n    }\n  }\n\n  private _portTypeChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaRadio;\n\n    this._portType = this._portTypes.find((portType) => portType.id === target.value)!;\n    this._port = this._portType.value[0];\n    this._portSelect.select(-1); // need to change index, so ha-select gets updated\n  }\n\n  private _portChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._port = this._portType.value.find((portType) => portType.value === target.value)!;\n    this.domainData.output = this._port.value;\n  }\n\n  private _dimmableChanged(ev: ValueChangedEvent<boolean>): void {\n    this.domainData.dimmable = (ev.target as HaSwitch).checked;\n  }\n\n  private _transitionChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaTextField;\n    this.domainData.transition = +target.value;\n    this.requestUpdate();\n  }\n\n  private _validateTransition(transition: number): boolean {\n    return transition >= 0 && transition <= 486;\n  }\n\n  private get _validityTransformTransition() {\n    return (value: string) => ({ valid: this._validateTransition(+value) });\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        #port-type {\n          margin-top: 16px;\n        }\n        ha-select,\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n        #dimmable {\n          margin-top: 16px;\n        }\n        #transition {\n          margin-top: 16px;\n        }\n      `,\n    ];\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-config-light-element\": LCNConfigLightElement;\n  }\n}\n","import \"@ha/components/ha-list-item\";\nimport \"@ha/components/ha-select\";\nimport type { HaSelect } from \"@ha/components/ha-select\";\nimport \"@ha/components/ha-textfield\";\nimport type { HaTextField } from \"@ha/components/ha-textfield\";\nimport \"@ha/components/ha-checkbox\";\nimport \"@ha/components/ha-formfield\";\nimport { css, html, LitElement, CSSResultGroup, PropertyValues, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type { HomeAssistant, ValueChangedEvent } from \"@ha/types\";\nimport { stopPropagation } from \"@ha/common/dom/stop_propagation\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport type { LCN, SceneConfig } from \"types/lcn\";\n\ninterface ConfigItem {\n  name: string;\n  value: string;\n}\n\n@customElement(\"lcn-config-scene-element\")\nexport class LCNConfigSceneElement extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public domainData: SceneConfig = {\n    register: 0,\n    scene: 0,\n    outputs: [],\n    transition: 0,\n  };\n\n  @state() private _register!: ConfigItem;\n\n  @state() private _scene!: ConfigItem;\n\n  private _invalid = false;\n\n  private get _registers(): ConfigItem[] {\n    const register: string = this.lcn.localize(\"register\");\n    return [\n      { name: register + \" 0\", value: \"0\" },\n      { name: register + \" 1\", value: \"1\" },\n      { name: register + \" 2\", value: \"2\" },\n      { name: register + \" 3\", value: \"3\" },\n      { name: register + \" 4\", value: \"4\" },\n      { name: register + \" 5\", value: \"5\" },\n      { name: register + \" 6\", value: \"6\" },\n      { name: register + \" 7\", value: \"7\" },\n      { name: register + \" 8\", value: \"8\" },\n      { name: register + \" 9\", value: \"9\" },\n    ];\n  }\n\n  private get _scenes(): ConfigItem[] {\n    const scene: string = this.lcn.localize(\"scene\");\n    return [\n      { name: scene + \" 1\", value: \"0\" },\n      { name: scene + \" 2\", value: \"1\" },\n      { name: scene + \" 3\", value: \"2\" },\n      { name: scene + \" 4\", value: \"3\" },\n      { name: scene + \" 5\", value: \"4\" },\n      { name: scene + \" 6\", value: \"5\" },\n      { name: scene + \" 7\", value: \"6\" },\n      { name: scene + \" 8\", value: \"7\" },\n      { name: scene + \" 9\", value: \"8\" },\n      { name: scene + \" 10\", value: \"9\" },\n    ];\n  }\n\n  private get _outputPorts(): ConfigItem[] {\n    const output: string = this.lcn.localize(\"output\");\n    return [\n      { name: output + \" 1\", value: \"OUTPUT1\" },\n      { name: output + \" 2\", value: \"OUTPUT2\" },\n      { name: output + \" 3\", value: \"OUTPUT3\" },\n      { name: output + \" 4\", value: \"OUTPUT4\" },\n    ];\n  }\n\n  private get _relayPorts(): ConfigItem[] {\n    const relay: string = this.lcn.localize(\"relay\");\n    return [\n      { name: relay + \" 1\", value: \"RELAY1\" },\n      { name: relay + \" 2\", value: \"RELAY2\" },\n      { name: relay + \" 3\", value: \"RELAY3\" },\n      { name: relay + \" 4\", value: \"RELAY4\" },\n      { name: relay + \" 5\", value: \"RELAY5\" },\n      { name: relay + \" 6\", value: \"RELAY6\" },\n      { name: relay + \" 7\", value: \"RELAY7\" },\n      { name: relay + \" 8\", value: \"RELAY8\" },\n    ];\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._register = this._registers[0];\n    this._scene = this._scenes[0];\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    this._invalid = !this._validateTransition(this.domainData.transition);\n  }\n\n  protected update(changedProperties: PropertyValues) {\n    super.update(changedProperties);\n    this.dispatchEvent(\n      new CustomEvent(\"validity-changed\", {\n        detail: this._invalid,\n        bubbles: true,\n        composed: true,\n      }),\n    );\n  }\n\n  protected render() {\n    if (!(this._register || this._scene)) {\n      return nothing;\n    }\n    return html`\n      <div class=\"registers\">\n        <ha-select\n          id=\"register-select\"\n          .label=${this.lcn.localize(\"register\")}\n          .value=${this._register.value}\n          fixedMenuPosition\n          @selected=${this._registerChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._registers.map(\n            (register) => html`\n              <ha-list-item .value=${register.value}> ${register.name} </ha-list-item>\n            `,\n          )}\n        </ha-select>\n\n        <ha-select\n          id=\"scene-select\"\n          .label=${this.lcn.localize(\"scene\")}\n          .value=${this._scene.value}\n          fixedMenuPosition\n          @selected=${this._sceneChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._scenes.map(\n            (scene) => html` <ha-list-item .value=${scene.value}> ${scene.name} </ha-list-item> `,\n          )}\n        </ha-select>\n      </div>\n\n      <div class=\"ports\">\n        <label>${this.lcn.localize(\"outputs\")}:</label><br />\n        ${this._outputPorts.map(\n          (port) => html`\n            <ha-formfield label=${port.name}>\n              <ha-checkbox .value=${port.value} @change=${this._portCheckedChanged}></ha-checkbox>\n            </ha-formfield>\n          `,\n        )}\n      </div>\n\n      <div class=\"ports\">\n        <label>${this.lcn.localize(\"relays\")}:</label><br />\n        ${this._relayPorts.map(\n          (port) => html`\n            <ha-formfield label=${port.name}>\n              <ha-checkbox .value=${port.value} @change=${this._portCheckedChanged}></ha-checkbox>\n            </ha-formfield>\n          `,\n        )}\n      </div>\n\n      <ha-textfield\n        .label=${this.lcn.localize(\"dashboard-entities-dialog-scene-transition\")}\n        type=\"number\"\n        suffix=\"s\"\n        .value=${this.domainData.transition.toString()}\n        min=\"0\"\n        max=\"486\"\n        required\n        autoValidate\n        @input=${this._transitionChanged}\n        .validityTransform=${this._validityTransformTransition}\n        .disabled=${this._transitionDisabled}\n        .validationMessage=${this.lcn.localize(\"dashboard-entities-dialog-scene-transition-error\")}\n      ></ha-textfield>\n    `;\n  }\n\n  private _registerChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._register = this._registers.find((register) => register.value === target.value)!;\n    this.domainData.register = +this._register.value;\n  }\n\n  private _sceneChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._scene = this._scenes.find((scene) => scene.value === target.value)!;\n    this.domainData.scene = +this._scene.value;\n  }\n\n  private _portCheckedChanged(ev: ValueChangedEvent<string> | any): void {\n    if (ev.target.checked) {\n      this.domainData.outputs.push(ev.target.value);\n    } else {\n      this.domainData.outputs = this.domainData.outputs.filter((port) => ev.target.value !== port);\n    }\n    this.requestUpdate();\n  }\n\n  private _transitionChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaTextField;\n    this.domainData.transition = +target.value;\n    this.requestUpdate();\n  }\n\n  private _validateTransition(transition: number): boolean {\n    return transition >= 0 && transition <= 486;\n  }\n\n  private get _validityTransformTransition() {\n    return (value: string) => ({ valid: this._validateTransition(+value) });\n  }\n\n  private get _transitionDisabled(): boolean {\n    const outputPortValues = this._outputPorts.map((port) => port.value);\n    return (\n      this.domainData.outputs.filter((output) => outputPortValues.includes(output)).length === 0\n    );\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        .registers {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          column-gap: 4px;\n        }\n        ha-select,\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n        .ports {\n          margin-top: 10px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-config-scene-element\": LCNConfigSceneElement;\n  }\n}\n","import \"@ha/components/ha-list-item\";\nimport \"@ha/components/ha-select\";\nimport type { HaSelect } from \"@ha/components/ha-select\";\nimport { css, html, LitElement, CSSResultGroup, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport type { HomeAssistant } from \"@ha/types\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport { stopPropagation } from \"@ha/common/dom/stop_propagation\";\nimport type { LCN, SensorConfig } from \"types/lcn\";\n\ninterface ConfigItem {\n  name: string;\n  value: string;\n}\n\ninterface ConfigItemCollection {\n  name: string;\n  value: ConfigItem[];\n  id: string;\n}\n\n@customElement(\"lcn-config-sensor-element\")\nexport class LCNConfigSensorElement extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false, type: Number }) public softwareSerial: number = -1;\n\n  @property({ attribute: false }) public domainData: SensorConfig = {\n    source: \"VAR1\",\n    unit_of_measurement: \"NATIVE\",\n  };\n\n  @state() private _sourceType!: ConfigItemCollection;\n\n  @state() private _source!: ConfigItem;\n\n  @state() private _unit!: ConfigItem;\n\n  @query(\"#source-select\") private _sourceSelect!: HaSelect;\n\n  private get _is2013() {\n    return this.softwareSerial >= 0x170206;\n  }\n\n  private _variablesOld: ConfigItem[] = [\n    { name: \"TVar\", value: \"TVAR\" },\n    { name: \"R1Var\", value: \"R1VAR\" },\n    { name: \"R2Var\", value: \"R2VAR\" },\n  ];\n\n  private get _variablesNew(): ConfigItem[] {\n    const variable: string = this.lcn.localize(\"variable\");\n    return [\n      { name: variable + \" 1\", value: \"VAR1\" },\n      { name: variable + \" 2\", value: \"VAR2\" },\n      { name: variable + \" 3\", value: \"VAR3\" },\n      { name: variable + \" 4\", value: \"VAR4\" },\n      { name: variable + \" 5\", value: \"VAR5\" },\n      { name: variable + \" 6\", value: \"VAR6\" },\n      { name: variable + \" 7\", value: \"VAR7\" },\n      { name: variable + \" 8\", value: \"VAR8\" },\n      { name: variable + \" 9\", value: \"VAR9\" },\n      { name: variable + \" 10\", value: \"VAR10\" },\n      { name: variable + \" 11\", value: \"VAR11\" },\n      { name: variable + \" 12\", value: \"VAR12\" },\n    ];\n  }\n\n  private get _setpoints(): ConfigItem[] {\n    const setpoint: string = this.lcn.localize(\"setpoint\");\n    return [\n      { name: setpoint + \" 1\", value: \"R1VARSETPOINT\" },\n      { name: setpoint + \" 2\", value: \"R2VARSETPOINT\" },\n    ];\n  }\n\n  private get _thresholdsOld(): ConfigItem[] {\n    const threshold: string = this.lcn.localize(\"threshold\");\n    return [\n      { name: threshold + \" 1\", value: \"THRS1\" },\n      { name: threshold + \" 2\", value: \"THRS2\" },\n      { name: threshold + \" 3\", value: \"THRS3\" },\n      { name: threshold + \" 4\", value: \"THRS4\" },\n      { name: threshold + \" 5\", value: \"THRS5\" },\n    ];\n  }\n\n  private get _thresholdsNew(): ConfigItem[] {\n    const threshold: string = this.lcn.localize(\"threshold\");\n    return [\n      { name: threshold + \" 1-1\", value: \"THRS1\" },\n      { name: threshold + \" 1-2\", value: \"THRS2\" },\n      { name: threshold + \" 1-3\", value: \"THRS3\" },\n      { name: threshold + \" 1-4\", value: \"THRS4\" },\n      { name: threshold + \" 2-1\", value: \"THRS2_1\" },\n      { name: threshold + \" 2-2\", value: \"THRS2_2\" },\n      { name: threshold + \" 2-3\", value: \"THRS2_3\" },\n      { name: threshold + \" 2-4\", value: \"THRS2_4\" },\n      { name: threshold + \" 3-1\", value: \"THRS3_1\" },\n      { name: threshold + \" 3-2\", value: \"THRS3_2\" },\n      { name: threshold + \" 3-3\", value: \"THRS3_3\" },\n      { name: threshold + \" 3-4\", value: \"THRS3_4\" },\n      { name: threshold + \" 4-1\", value: \"THRS4_1\" },\n      { name: threshold + \" 4-2\", value: \"THRS4_2\" },\n      { name: threshold + \" 4-3\", value: \"THRS4_3\" },\n      { name: threshold + \" 4-4\", value: \"THRS4_4\" },\n    ];\n  }\n\n  private get _s0Inputs(): ConfigItem[] {\n    const s0input: string = this.lcn.localize(\"s0input\");\n    return [\n      { name: s0input + \" 1\", value: \"S0INPUT1\" },\n      { name: s0input + \" 2\", value: \"S0INPUT2\" },\n      { name: s0input + \" 3\", value: \"S0INPUT3\" },\n      { name: s0input + \" 4\", value: \"S0INPUT4\" },\n    ];\n  }\n\n  private get _ledPorts(): ConfigItem[] {\n    const led: string = this.lcn.localize(\"led\");\n    return [\n      { name: led + \" 1\", value: \"LED1\" },\n      { name: led + \" 2\", value: \"LED2\" },\n      { name: led + \" 3\", value: \"LED3\" },\n      { name: led + \" 4\", value: \"LED4\" },\n      { name: led + \" 5\", value: \"LED5\" },\n      { name: led + \" 6\", value: \"LED6\" },\n      { name: led + \" 7\", value: \"LED7\" },\n      { name: led + \" 8\", value: \"LED8\" },\n      { name: led + \" 9\", value: \"LED9\" },\n      { name: led + \" 10\", value: \"LED10\" },\n      { name: led + \" 11\", value: \"LED11\" },\n      { name: led + \" 12\", value: \"LED12\" },\n    ];\n  }\n\n  private get _logicOpPorts(): ConfigItem[] {\n    const logic: string = this.lcn.localize(\"logic\");\n    return [\n      { name: logic + \" 1\", value: \"LOGICOP1\" },\n      { name: logic + \" 2\", value: \"LOGICOP2\" },\n      { name: logic + \" 3\", value: \"LOGICOP3\" },\n      { name: logic + \" 4\", value: \"LOGICOP4\" },\n    ];\n  }\n\n  private get _sourceTypes(): ConfigItemCollection[] {\n    return [\n      {\n        name: this.lcn.localize(\"variables\"),\n        value: this._is2013 ? this._variablesNew : this._variablesOld,\n        id: \"variables\",\n      },\n      {\n        name: this.lcn.localize(\"setpoints\"),\n        value: this._setpoints,\n        id: \"setpoints\",\n      },\n      {\n        name: this.lcn.localize(\"thresholds\"),\n        value: this._is2013 ? this._thresholdsNew : this._thresholdsOld,\n        id: \"thresholds\",\n      },\n      { name: this.lcn.localize(\"s0inputs\"), value: this._s0Inputs, id: \"s0inputs\" },\n      { name: this.lcn.localize(\"leds\"), value: this._ledPorts, id: \"ledports\" },\n      { name: this.lcn.localize(\"logics\"), value: this._logicOpPorts, id: \"logicopports\" },\n    ];\n  }\n\n  private get _varUnits(): ConfigItem[] {\n    return [\n      { name: this.lcn.localize(\"unit-lcn-native\"), value: \"NATIVE\" },\n      { name: \"Celsius\", value: \"°C\" },\n      { name: \"Fahrenheit\", value: \"°F\" },\n      { name: \"Kelvin\", value: \"K\" },\n      { name: \"Lux\", value: \"LUX_T\" },\n      { name: \"Lux (I-Port)\", value: \"LUX_I\" },\n      { name: this.lcn.localize(\"unit-humidity\") + \" (%)\", value: \"PERCENT\" },\n      { name: \"CO2 (‰)\", value: \"PPM\" },\n      { name: this.lcn.localize(\"unit-wind\") + \" (m/s)\", value: \"METERPERSECOND\" },\n      { name: this.lcn.localize(\"unit-volts\"), value: \"VOLT\" },\n      { name: this.lcn.localize(\"unit-milliamperes\"), value: \"AMPERE\" },\n      { name: this.lcn.localize(\"unit-angle\") + \" (°)\", value: \"DEGREE\" },\n    ];\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._sourceType = this._sourceTypes[0];\n    this._source = this._sourceType.value[0];\n    this._unit = this._varUnits[0];\n  }\n\n  protected render() {\n    if (!(this._sourceType || this._source)) {\n      return nothing;\n    }\n    return html`\n      <div class=\"sources\">\n        <ha-select\n          id=\"source-type-select\"\n          .label=${this.lcn.localize(\"source-type\")}\n          .value=${this._sourceType.id}\n          fixedMenuPosition\n          @selected=${this._sourceTypeChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._sourceTypes.map(\n            (sourceType) => html`\n              <ha-list-item .value=${sourceType.id}> ${sourceType.name} </ha-list-item>\n            `,\n          )}\n        </ha-select>\n\n        <ha-select\n          id=\"source-select\"\n          .label=${this.lcn.localize(\"source\")}\n          .value=${this._source.value}\n          fixedMenuPosition\n          @selected=${this._sourceChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._sourceType.value.map(\n            (source) => html`\n              <ha-list-item .value=${source.value}> ${source.name} </ha-list-item>\n            `,\n          )}\n        </ha-select>\n      </div>\n\n      <ha-select\n        id=\"unit-select\"\n        .label=${this.lcn.localize(\"dashboard-entities-dialog-unit-of-measurement\")}\n        .value=${this._unit.value}\n        fixedMenuPosition\n        @selected=${this._unitChanged}\n        @closed=${stopPropagation}\n      >\n        ${this._varUnits.map(\n          (unit) => html` <ha-list-item .value=${unit.value}> ${unit.name} </ha-list-item> `,\n        )}\n      </ha-select>\n    `;\n  }\n\n  private _sourceTypeChanged(ev: CustomEvent): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._sourceType = this._sourceTypes.find((sourceType) => sourceType.id === target.value)!;\n    this._source = this._sourceType.value[0];\n    this._sourceSelect.select(-1); // need to change index, so ha-select gets updated\n  }\n\n  private _sourceChanged(ev: CustomEvent): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._source = this._sourceType.value.find((source) => source.value === target.value)!;\n    this.domainData.source = this._source.value;\n  }\n\n  private _unitChanged(ev: CustomEvent): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._unit = this._varUnits.find((unit) => unit.value === target.value)!;\n    this.domainData.unit_of_measurement = this._unit.value;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        .sources {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          column-gap: 4px;\n        }\n        ha-select {\n          display: block;\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-config-sensor-element\": LCNConfigSensorElement;\n  }\n}\n","import \"@ha/components/ha-list-item\";\nimport \"@ha/components/ha-select\";\nimport type { HaSelect } from \"@ha/components/ha-select\";\nimport \"@ha/components/ha-textfield\";\nimport { css, html, LitElement, CSSResultGroup, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport type { HomeAssistant, ValueChangedEvent } from \"@ha/types\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport type { LCN, SwitchConfig } from \"types/lcn\";\nimport \"@ha/components/ha-radio\";\nimport \"@ha/components/ha-formfield\";\nimport { stopPropagation } from \"@ha/common/dom/stop_propagation\";\nimport type { HaRadio } from \"@ha/components/ha-radio\";\n\ninterface ConfigItem {\n  name: string;\n  value: string;\n}\n\ninterface ConfigItemCollection {\n  name: string;\n  value: ConfigItem[];\n  id: string;\n}\n\n@customElement(\"lcn-config-switch-element\")\nexport class LCNConfigSwitchElement extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public domainData: SwitchConfig = { output: \"OUTPUT1\" };\n\n  @state() private _portType!: ConfigItemCollection;\n\n  @state() private _port!: ConfigItem;\n\n  @query(\"#port-select\") private _portSelect;\n\n  private get _outputPorts(): ConfigItem[] {\n    const output: string = this.lcn.localize(\"output\");\n    return [\n      { name: output + \" 1\", value: \"OUTPUT1\" },\n      { name: output + \" 2\", value: \"OUTPUT2\" },\n      { name: output + \" 3\", value: \"OUTPUT3\" },\n      { name: output + \" 4\", value: \"OUTPUT4\" },\n    ];\n  }\n\n  private get _relayPorts(): ConfigItem[] {\n    const relay: string = this.lcn.localize(\"relay\");\n    return [\n      { name: relay + \" 1\", value: \"RELAY1\" },\n      { name: relay + \" 2\", value: \"RELAY2\" },\n      { name: relay + \" 3\", value: \"RELAY3\" },\n      { name: relay + \" 4\", value: \"RELAY4\" },\n      { name: relay + \" 5\", value: \"RELAY5\" },\n      { name: relay + \" 6\", value: \"RELAY6\" },\n      { name: relay + \" 7\", value: \"RELAY7\" },\n      { name: relay + \" 8\", value: \"RELAY8\" },\n    ];\n  }\n\n  private get _regulators(): ConfigItem[] {\n    const regulator: string = this.lcn.localize(\"regulator\");\n    return [\n      { name: regulator + \" 1\", value: \"R1VARSETPOINT\" },\n      { name: regulator + \" 2\", value: \"R2VARSETPOINT\" },\n    ];\n  }\n\n  private _keys: ConfigItem[] = [\n    { name: \"A1\", value: \"A1\" },\n    { name: \"A2\", value: \"A2\" },\n    { name: \"A3\", value: \"A3\" },\n    { name: \"A4\", value: \"A4\" },\n    { name: \"A5\", value: \"A5\" },\n    { name: \"A6\", value: \"A6\" },\n    { name: \"A7\", value: \"A7\" },\n    { name: \"A8\", value: \"A8\" },\n    { name: \"B1\", value: \"B1\" },\n    { name: \"B2\", value: \"B2\" },\n    { name: \"B3\", value: \"B3\" },\n    { name: \"B4\", value: \"B4\" },\n    { name: \"B5\", value: \"B5\" },\n    { name: \"B6\", value: \"B6\" },\n    { name: \"B7\", value: \"B7\" },\n    { name: \"B8\", value: \"B8\" },\n    { name: \"C1\", value: \"C1\" },\n    { name: \"C2\", value: \"C2\" },\n    { name: \"C3\", value: \"C3\" },\n    { name: \"C4\", value: \"C4\" },\n    { name: \"C5\", value: \"C5\" },\n    { name: \"C6\", value: \"C6\" },\n    { name: \"C7\", value: \"C7\" },\n    { name: \"C8\", value: \"C8\" },\n    { name: \"D1\", value: \"D1\" },\n    { name: \"D2\", value: \"D2\" },\n    { name: \"D3\", value: \"D3\" },\n    { name: \"D4\", value: \"D4\" },\n    { name: \"D5\", value: \"D5\" },\n    { name: \"D6\", value: \"D6\" },\n    { name: \"D7\", value: \"D7\" },\n    { name: \"D8\", value: \"D8\" },\n  ];\n\n  private get _portTypes(): ConfigItemCollection[] {\n    return [\n      { name: this.lcn.localize(\"output\"), value: this._outputPorts, id: \"output\" },\n      { name: this.lcn.localize(\"relay\"), value: this._relayPorts, id: \"relay\" },\n      { name: this.lcn.localize(\"regulator\"), value: this._regulators, id: \"regulator-locks\" },\n      { name: this.lcn.localize(\"key\"), value: this._keys, id: \"key-locks\" },\n    ];\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._portType = this._portTypes[0];\n    this._port = this._portType.value[0];\n  }\n\n  protected render() {\n    if (!(this._portType || this._port)) {\n      return nothing;\n    }\n    return html`\n      <div id=\"port-type\">${this.lcn.localize(\"port-type\")}</div>\n\n      <ha-formfield label=${this.lcn.localize(\"output\")}>\n        <ha-radio\n          name=\"port\"\n          value=\"output\"\n          .checked=${this._portType.id === \"output\"}\n          @change=${this._portTypeChanged}\n        ></ha-radio>\n      </ha-formfield>\n\n      <ha-formfield label=${this.lcn.localize(\"relay\")}>\n        <ha-radio\n          name=\"port\"\n          value=\"relay\"\n          .checked=${this._portType.id === \"relay\"}\n          @change=${this._portTypeChanged}\n        ></ha-radio>\n      </ha-formfield>\n\n      <ha-formfield label=${this.lcn.localize(\"regulator-lock\")}>\n        <ha-radio\n          name=\"port\"\n          value=\"regulator-locks\"\n          .checked=${this._portType.id === \"regulator-locks\"}\n          @change=${this._portTypeChanged}\n        ></ha-radio>\n      </ha-formfield>\n\n      <ha-formfield label=${this.lcn.localize(\"key-lock\")}>\n        <ha-radio\n          name=\"port\"\n          value=\"key-locks\"\n          .checked=${this._portType.id === \"key-locks\"}\n          @change=${this._portTypeChanged}\n        ></ha-radio>\n      </ha-formfield>\n\n      <ha-select\n        id=\"port-select\"\n        .label=${this._portType.name}\n        .value=${this._port.value}\n        fixedMenuPosition\n        @selected=${this._portChanged}\n        @closed=${stopPropagation}\n      >\n        ${this._portType.value.map(\n          (port) => html` <ha-list-item .value=${port.value}> ${port.name} </ha-list-item> `,\n        )}\n      </ha-select>\n    `;\n  }\n\n  private _portTypeChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaRadio;\n\n    this._portType = this._portTypes.find((portType) => portType.id === target.value)!;\n    this._port = this._portType.value[0];\n    this._portSelect.select(-1); // need to change index, so ha-select gets updated\n  }\n\n  private _portChanged(ev: ValueChangedEvent<string>): void {\n    const target = ev.target as HaSelect;\n    if (target.index === -1) return;\n\n    this._port = this._portType.value.find((portType) => portType.value === target.value)!;\n    this.domainData.output = this._port.value;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        #port-type {\n          margin-top: 16px;\n        }\n        .lock-time {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          column-gap: 4px;\n        }\n        ha-select {\n          display: block;\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-config-switch-element\": LCNConfigSwitchElement;\n  }\n}\n","import { consume } from \"@lit-labs/context\";\nimport { deviceConfigsContext } from \"components/context\";\nimport \"@ha/components/ha-icon-button\";\nimport \"@ha/components/ha-list-item\";\nimport \"@ha/components/ha-select\";\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport type { HaSelect } from \"@ha/components/ha-select\";\nimport { css, html, LitElement, CSSResultGroup, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { createCloseHeading } from \"@ha/components/ha-dialog\";\nimport { stopPropagation } from \"@ha/common/dom/stop_propagation\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport type { HomeAssistant } from \"@ha/types\";\nimport type { LCN, LcnDeviceConfig, LcnEntityConfig } from \"types/lcn\";\nimport { addressToString, stringToAddress } from \"helpers/address_conversion\";\nimport \"./lcn-config-binary-sensor\";\nimport \"./lcn-config-climate\";\nimport \"./lcn-config-cover\";\nimport \"./lcn-config-light\";\nimport \"./lcn-config-scene\";\nimport \"./lcn-config-sensor\";\nimport \"./lcn-config-switch\";\nimport type { HaTextField } from \"@ha/components/ha-textfield\";\nimport { showAlertDialog } from \"@ha/dialogs/generic/show-dialog-box\";\nimport type { LcnEntityDialogParams } from \"./show-dialog-create-entity\";\n\ninterface DomainItem {\n  name: string;\n  domain: string;\n}\n\n@customElement(\"lcn-create-entity-dialog\")\nexport class CreateEntityDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @state() private _params?: LcnEntityDialogParams;\n\n  @state() private _name: string = \"\";\n\n  @state() public domain: string = \"binary_sensor\";\n\n  @state() private _invalid: boolean = true;\n\n  @state() private _deviceConfig?: LcnDeviceConfig;\n\n  @state()\n  @consume({ context: deviceConfigsContext, subscribe: true })\n  deviceConfigs!: LcnDeviceConfig[];\n\n  private get _domains(): DomainItem[] {\n    return [\n      { name: this.lcn.localize(\"binary-sensor\"), domain: \"binary_sensor\" },\n      { name: this.lcn.localize(\"climate\"), domain: \"climate\" },\n      { name: this.lcn.localize(\"cover\"), domain: \"cover\" },\n      { name: this.lcn.localize(\"light\"), domain: \"light\" },\n      { name: this.lcn.localize(\"scene\"), domain: \"scene\" },\n      { name: this.lcn.localize(\"sensor\"), domain: \"sensor\" },\n      { name: this.lcn.localize(\"switch\"), domain: \"switch\" },\n    ];\n  }\n\n  public async showDialog(params: LcnEntityDialogParams): Promise<void> {\n    this._params = params;\n    this.lcn = params.lcn;\n    this._name = \"\";\n    this._invalid = true;\n    this._deviceConfig = params.deviceConfig;\n\n    if (!this._deviceConfig) this._deviceConfig = this.deviceConfigs[0];\n\n    await this.updateComplete;\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.lcn.localize(\"dashboard-entities-dialog-create-title\"),\n        ) as unknown as string}\n        @closed=${this._closeDialog}\n      >\n        <ha-select\n          id=\"device-select\"\n          .label=${this.lcn.localize(\"device\")}\n          .value=${this._deviceConfig ? addressToString(this._deviceConfig.address) : undefined}\n          fixedMenuPosition\n          @selected=${this._deviceChanged}\n          @closed=${stopPropagation}\n        >\n          ${this.deviceConfigs.map(\n            (deviceConfig) => html`\n              <ha-list-item .value=${addressToString(deviceConfig.address)}>\n                <div class=\"primary\">${deviceConfig.name}</div>\n                <div class=\"secondary\">(${addressToString(deviceConfig.address)})</div>\n              </ha-list-item>\n            `,\n          )}\n        </ha-select>\n\n        <ha-select\n          id=\"domain-select\"\n          .label=${this.lcn.localize(\"domain\")}\n          .value=${this.domain}\n          fixedMenuPosition\n          @selected=${this._domainChanged}\n          @closed=${stopPropagation}\n        >\n          ${this._domains.map(\n            (domain) => html`\n              <ha-list-item .value=${domain.domain}> ${domain.name} </ha-list-item>\n            `,\n          )}\n        </ha-select>\n        <ha-textfield\n          id=\"name-input\"\n          label=${this.lcn.localize(\"name\")}\n          type=\"string\"\n          @input=${this._nameChanged}\n        ></ha-textfield>\n\n        ${this.renderDomain(this.domain)}\n\n        <div class=\"buttons\">\n          <mwc-button\n            slot=\"secondaryAction\"\n            @click=${this._closeDialog}\n            .label=${this.lcn.localize(\"dismiss\")}\n          ></mwc-button>\n          <mwc-button\n            slot=\"primaryAction\"\n            .disabled=${this._invalid}\n            @click=${this._create}\n            .label=${this.lcn.localize(\"create\")}\n          ></mwc-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private renderDomain(domain: string) {\n    if (!(this._params && this._deviceConfig)) {\n      return nothing;\n    }\n    switch (domain) {\n      case \"binary_sensor\":\n        return html`<lcn-config-binary-sensor-element\n          id=\"domain\"\n          .hass=${this.hass}\n          .lcn=${this.lcn}\n        ></lcn-config-binary-sensor-element>`;\n      case \"climate\":\n        return html`<lcn-config-climate-element\n          id=\"domain\"\n          .hass=${this.hass}\n          .lcn=${this.lcn}\n          .softwareSerial=${this._deviceConfig.software_serial}\n          @validity-changed=${this._validityChanged}\n        ></lcn-config-climate-element>`;\n      case \"cover\":\n        return html`<lcn-config-cover-element\n          id=\"domain\"\n          .hass=${this.hass}\n          .lcn=${this.lcn}\n        ></lcn-config-cover-element>`;\n      case \"light\":\n        return html`<lcn-config-light-element\n          id=\"domain\"\n          .hass=${this.hass}\n          .lcn=${this.lcn}\n          @validity-changed=${this._validityChanged}\n        ></lcn-config-light-element>`;\n      case \"scene\":\n        return html`<lcn-config-scene-element\n          id=\"domain\"\n          .hass=${this.hass}\n          .lcn=${this.lcn}\n          @validity-changed=${this._validityChanged}\n        ></lcn-config-scene-element>`;\n      case \"sensor\":\n        return html`<lcn-config-sensor-element\n          id=\"domain\"\n          .hass=${this.hass}\n          .lcn=${this.lcn}\n          .softwareSerial=${this._deviceConfig.software_serial}\n        ></lcn-config-sensor-element>`;\n      case \"switch\":\n        return html`<lcn-config-switch-element\n          id=\"domain\"\n          .hass=${this.hass}\n          .lcn=${this.lcn}\n        ></lcn-config-switch-element>`;\n      default:\n        return nothing;\n    }\n  }\n\n  private _deviceChanged(ev: CustomEvent): void {\n    const target = ev.target as HaTextField;\n    const address = stringToAddress(target.value);\n    this._deviceConfig = this.deviceConfigs.find(\n      (deviceConfig) =>\n        deviceConfig.address[0] === address[0] &&\n        deviceConfig.address[1] === address[1] &&\n        deviceConfig.address[2] === address[2],\n    );\n  }\n\n  private _nameChanged(ev: CustomEvent): void {\n    const target = ev.target as HaTextField;\n    this._name = target.value;\n    this._validityChanged(\n      new CustomEvent(\"validity-changed\", {\n        detail: !this._name,\n      }),\n    );\n  }\n\n  private _validityChanged(ev: CustomEvent): void {\n    this._invalid = ev.detail;\n  }\n\n  private async _create(): Promise<void> {\n    const domainElement = this.shadowRoot?.querySelector<any>(\"#domain\");\n\n    const values: Partial<LcnEntityConfig> = {\n      name: this._name ? this._name : this.domain,\n      address: this._deviceConfig!.address,\n      domain: this.domain,\n      domain_data: domainElement.domainData,\n    };\n\n    if (!(await this._params!.createEntity(values))) {\n      await showAlertDialog(this, {\n        title: this.lcn.localize(\"dashboard-entities-dialog-add-alert-title\"),\n        text: `${this.lcn.localize(\"dashboard-entities-dialog-add-alert-text\")}\n              ${this.lcn.localize(\"dashboard-entities-dialog-add-alert-hint\")}`,\n      });\n      return;\n    }\n\n    this._closeDialog();\n  }\n\n  private _closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _domainChanged(ev: CustomEvent) {\n    const target = ev.target as HaSelect;\n    this.domain = target.value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n          --dialog-z-index: 10;\n        }\n        ha-select,\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n        #name-input {\n          margin-bottom: 25px;\n        }\n        .buttons {\n          display: flex;\n          justify-content: space-between;\n          padding: 8px;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-create-entity-dialog\": CreateEntityDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}